{"version":3,"file":"tess2.js","sources":["../src/assert.js","../src/Geom.js","../src/units/TESSmesh.js","../src/Sweep.js"],"sourcesContent":["export function assert (cond) {\r\n\tif (!cond) {\r\n\t\tthrow \"Assertion Failed!\";\r\n\t}\r\n};","import {assert} from \"./assert\";\r\n\r\nexport class Geom {\r\n\r\n\tstatic vertEq (u, v) {\r\n\t\treturn u.s === v.s && u.t === v.t;\r\n\t}\r\n\r\n\t/* Returns TRUE if u is lexicographically <= v. */\r\n\tstatic vertLeq(u, v) {\r\n\t\treturn u.s < v.s || (u.s === v.s && u.t <= v.t);\r\n\t}\r\n\r\n\t/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\r\n\tstatic transLeq(u, v) {\r\n\t\treturn u.t < v.t || (u.t === v.t && u.s <= v.s);\r\n\t}\r\n\r\n\tstatic edgeGoesLeft(e) {\r\n\t\treturn Geom.vertLeq(e.Dst, e.Org);\r\n\t}\r\n\r\n\tstatic edgeGoesRight(e) {\r\n\t\treturn Geom.vertLeq(e.Org, e.Dst);\r\n\t}\r\n\r\n\tstatic vertL1dist(u, v) {\r\n\t\treturn Math.abs(u.s - v.s) + Math.abs(u.t - v.t);\r\n\t}\r\n\r\n\t//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\n\tstatic edgeEval(u, v, w) {\r\n\t\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\r\n\t\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\r\n\t\t * Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\r\n\t\t * If uw is vertical (and thus passes thru v), the result is zero.\r\n\t\t *\r\n\t\t * The calculation is extremely accurate and stable, even when v\r\n\t\t * is very close to u or w.  In particular if we set v->t = 0 and\r\n\t\t * let r be the negated result (this evaluates (uw)(v->s)), then\r\n\t\t * r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\r\n\t\t */\r\n\t\tassert(Geom.vertLeq(u, v) && Geom.vertLeq(v, w));\r\n\r\n\t\tvar gapL = v.s - u.s;\r\n\t\tvar gapR = w.s - v.s;\r\n\r\n\t\tif (gapL + gapR > 0.0) {\r\n\t\t\tif (gapL < gapR) {\r\n\t\t\t\treturn v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));\r\n\t\t\t} else {\r\n\t\t\t\treturn v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* vertical line */\r\n\t\treturn 0.0;\r\n\t}\r\n\r\n\t//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\n\tstatic edgeSign(u, v, w) {\r\n\t\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\r\n\t\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\r\n\t\t * as v is above, on, or below the edge uw.\r\n\t\t */\r\n\t\tassert(Geom.vertLeq(u, v) && Geom.vertLeq(v, w));\r\n\r\n\t\tvar gapL = v.s - u.s;\r\n\t\tvar gapR = w.s - v.s;\r\n\r\n\t\tif (gapL + gapR > 0.0) {\r\n\t\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\r\n\t\t}\r\n\t\t/* vertical line */\r\n\t\treturn 0.0;\r\n\t}\r\n\r\n\t/***********************************************************************\r\n\t * Define versions of EdgeSign, EdgeEval with s and t transposed.\r\n\t */\r\n\r\n\t//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\n\tstatic transEval(u, v, w) {\r\n\t\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\r\n\t\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\r\n\t\t * Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\r\n\t\t * If uw is vertical (and thus passes thru v), the result is zero.\r\n\t\t *\r\n\t\t * The calculation is extremely accurate and stable, even when v\r\n\t\t * is very close to u or w.  In particular if we set v->s = 0 and\r\n\t\t * let r be the negated result (this evaluates (uw)(v->t)), then\r\n\t\t * r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\r\n\t\t */\r\n\t\tassert(Geom.transLeq(u, v) && Geom.transLeq(v, w));\r\n\r\n\t\tvar gapL = v.t - u.t;\r\n\t\tvar gapR = w.t - v.t;\r\n\r\n\t\tif (gapL + gapR > 0.0) {\r\n\t\t\tif (gapL < gapR) {\r\n\t\t\t\treturn v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));\r\n\t\t\t} else {\r\n\t\t\t\treturn v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* vertical line */\r\n\t\treturn 0.0;\r\n\t}\r\n\r\n\t//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\n\tstatic transSign(u, v, w) {\r\n\t\t/* Returns a number whose sign matches TransEval(u,v,w) but which\r\n\t\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\r\n\t\t * as v is above, on, or below the edge uw.\r\n\t\t */\r\n\t\tassert(Geom.transLeq(u, v) && Geom.transLeq(v, w));\r\n\r\n\t\tvar gapL = v.t - u.t;\r\n\t\tvar gapR = w.t - v.t;\r\n\r\n\t\tif (gapL + gapR > 0.0) {\r\n\t\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\r\n\t\t}\r\n\t\t/* vertical line */\r\n\t\treturn 0.0;\r\n\t}\r\n\r\n\t//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\n\tstatic vertCCW(u, v, w) {\r\n\t\t/* For almost-degenerate situations, the results are not reliable.\r\n\t\t * Unless the floating-point arithmetic can be performed without\r\n\t\t * rounding errors, *any* implementation will give incorrect results\r\n\t\t * on some degenerate inputs, so the client must have some way to\r\n\t\t * handle this situation.\r\n\t\t */\r\n\t\treturn u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;\r\n\t}\r\n\r\n\t/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\r\n\t * or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\r\n\t * this in the rare case that one argument is slightly negative.\r\n\t * The implementation is extremely stable numerically.\r\n\t * In particular it guarantees that the result r satisfies\r\n\t * MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\r\n\t * even when a and b differ greatly in magnitude.\r\n\t */\r\n\tstatic interpolate(a, x, b, y) {\r\n\t\treturn (\r\n\t\t\t(a = a < 0 ? 0 : a),\r\n\t\t\t(b = b < 0 ? 0 : b),\r\n\t\t\ta <= b\r\n\t\t\t\t? b === 0\r\n\t\t\t\t\t? (x + y) / 2\r\n\t\t\t\t\t: x + (y - x) * (a / (a + b))\r\n\t\t\t\t: y + (x - y) * (b / (a + b))\r\n\t\t);\r\n\t}\r\n\r\n\t/*\r\n\t#ifndef FOR_TRITE_TEST_PROGRAM\r\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\r\n\t#else\r\n\r\n\t// Claim: the ONLY property the sweep algorithm relies on is that\r\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\r\n\t#include <stdlib.h>\r\n\textern int RandomInterpolate;\r\n\r\n\tdouble Interpolate( double a, double x, double b, double y)\r\n\t{\r\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\r\n\t\tif( RandomInterpolate ) {\r\n\t\t\ta = 1.2 * drand48() - 0.1;\r\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\r\n\t\t\tb = 1.0 - a;\r\n\t\t}\r\n\t\treturn RealInterpolate(a,x,b,y);\r\n\t}\r\n\t#endif*/\r\n\r\n\tstatic intersect(o1, d1, o2, d2, v) {\r\n\t\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\r\n\t\t * The computed point is guaranteed to lie in the intersection of the\r\n\t\t * bounding rectangles defined by each edge.\r\n\t\t */\r\n\t\tvar z1, z2;\r\n\t\tvar t;\r\n\r\n\t\t/* This is certainly not the most efficient way to find the intersection\r\n\t\t * of two line segments, but it is very numerically stable.\r\n\t\t *\r\n\t\t * Strategy: find the two middle vertices in the VertLeq ordering,\r\n\t\t * and interpolate the intersection s-value from these.  Then repeat\r\n\t\t * using the TransLeq ordering to find the intersection t-value.\r\n\t\t */\r\n\r\n\t\tif (!Geom.vertLeq(o1, d1)) {\r\n\t\t\tt = o1;\r\n\t\t\to1 = d1;\r\n\t\t\td1 = t;\r\n\t\t} //swap( o1, d1 ); }\r\n\t\tif (!Geom.vertLeq(o2, d2)) {\r\n\t\t\tt = o2;\r\n\t\t\to2 = d2;\r\n\t\t\td2 = t;\r\n\t\t} //swap( o2, d2 ); }\r\n\t\tif (!Geom.vertLeq(o1, o2)) {\r\n\t\t\tt = o1;\r\n\t\t\to1 = o2;\r\n\t\t\to2 = t;\r\n\t\t\tt = d1;\r\n\t\t\td1 = d2;\r\n\t\t\td2 = t;\r\n\t\t} //swap( o1, o2 ); swap( d1, d2 ); }\r\n\r\n\t\tif (!Geom.vertLeq(o2, d1)) {\r\n\t\t\t/* Technically, no intersection -- do our best */\r\n\t\t\tv.s = (o2.s + d1.s) / 2;\r\n\t\t} else if (Geom.vertLeq(d1, d2)) {\r\n\t\t\t/* Interpolate between o2 and d1 */\r\n\t\t\tz1 = Geom.edgeEval(o1, o2, d1);\r\n\t\t\tz2 = Geom.edgeEval(o2, d1, d2);\r\n\t\t\tif (z1 + z2 < 0) {\r\n\t\t\t\tz1 = -z1;\r\n\t\t\t\tz2 = -z2;\r\n\t\t\t}\r\n\t\t\tv.s = Geom.interpolate(z1, o2.s, z2, d1.s);\r\n\t\t} else {\r\n\t\t\t/* Interpolate between o2 and d2 */\r\n\t\t\tz1 = Geom.edgeSign(o1, o2, d1);\r\n\t\t\tz2 = -Geom.edgeSign(o1, d2, d1);\r\n\t\t\tif (z1 + z2 < 0) {\r\n\t\t\t\tz1 = -z1;\r\n\t\t\t\tz2 = -z2;\r\n\t\t\t}\r\n\t\t\tv.s = Geom.interpolate(z1, o2.s, z2, d2.s);\r\n\t\t}\r\n\r\n\t\t/* Now repeat the process for t */\r\n\r\n\t\tif (!Geom.transLeq(o1, d1)) {\r\n\t\t\tt = o1;\r\n\t\t\to1 = d1;\r\n\t\t\td1 = t;\r\n\t\t} //swap( o1, d1 ); }\r\n\t\tif (!Geom.transLeq(o2, d2)) {\r\n\t\t\tt = o2;\r\n\t\t\to2 = d2;\r\n\t\t\td2 = t;\r\n\t\t} //swap( o2, d2 ); }\r\n\t\tif (!Geom.transLeq(o1, o2)) {\r\n\t\t\tt = o1;\r\n\t\t\to1 = o2;\r\n\t\t\to2 = t;\r\n\t\t\tt = d1;\r\n\t\t\td1 = d2;\r\n\t\t\td2 = t;\r\n\t\t} //swap( o1, o2 ); swap( d1, d2 ); }\r\n\r\n\t\tif (!Geom.transLeq(o2, d1)) {\r\n\t\t\t/* Technically, no intersection -- do our best */\r\n\t\t\tv.t = (o2.t + d1.t) / 2;\r\n\t\t} else if (Geom.transLeq(d1, d2)) {\r\n\t\t\t/* Interpolate between o2 and d1 */\r\n\t\t\tz1 = Geom.transEval(o1, o2, d1);\r\n\t\t\tz2 = Geom.transEval(o2, d1, d2);\r\n\t\t\tif (z1 + z2 < 0) {\r\n\t\t\t\tz1 = -z1;\r\n\t\t\t\tz2 = -z2;\r\n\t\t\t}\r\n\t\t\tv.t = Geom.interpolate(z1, o2.t, z2, d1.t);\r\n\t\t} else {\r\n\t\t\t/* Interpolate between o2 and d2 */\r\n\t\t\tz1 = Geom.transSign(o1, o2, d1);\r\n\t\t\tz2 = -Geom.transSign(o1, d2, d1);\r\n\t\t\tif (z1 + z2 < 0) {\r\n\t\t\t\tz1 = -z1;\r\n\t\t\t\tz2 = -z2;\r\n\t\t\t}\r\n\t\t\tv.t = Geom.interpolate(z1, o2.t, z2, d2.t);\r\n\t\t}\r\n\t}\r\n}\r\n","import { Geom } from \"../Geom\";\r\nimport { assert } from \"../assert\";\r\nimport { TESSface} from './TESSface';\r\nimport { TESShalfEdge } from \"./TESShalfEdge\";\r\nimport { TESSvertex } from \"./TESSvertex\";\r\n\r\n/* Internal */\r\n\r\nexport function TESSmesh() {\r\n\tvar v = new TESSvertex();\r\n\tvar f = new TESSface();\r\n\tvar e = new TESShalfEdge(0);\r\n\tvar eSym = new TESShalfEdge(1);\r\n\r\n\tv.next = v.prev = v;\r\n\tv.anEdge = null;\r\n\r\n\tf.next = f.prev = f;\r\n\tf.anEdge = null;\r\n\tf.trail = null;\r\n\tf.marked = false;\r\n\tf.inside = false;\r\n\r\n\te.next = e;\r\n\te.Sym = eSym;\r\n\te.Onext = null;\r\n\te.Lnext = null;\r\n\te.Org = null;\r\n\te.Lface = null;\r\n\te.winding = 0;\r\n\te.activeRegion = null;\r\n\r\n\teSym.next = eSym;\r\n\teSym.Sym = e;\r\n\teSym.Onext = null;\r\n\teSym.Lnext = null;\r\n\teSym.Org = null;\r\n\teSym.Lface = null;\r\n\teSym.winding = 0;\r\n\teSym.activeRegion = null;\r\n\r\n\tthis.vHead = v; /* dummy header for vertex list */\r\n\tthis.fHead = f; /* dummy header for face list */\r\n\tthis.eHead = e; /* dummy header for edge list */\r\n\tthis.eHeadSym = eSym; /* and its symmetric counterpart */\r\n}\r\n\r\n/* The mesh operations below have three motivations: completeness,\r\n * convenience, and efficiency.  The basic mesh operations are MakeEdge,\r\n * Splice, and Delete.  All the other edge operations can be implemented\r\n * in terms of these.  The other operations are provided for convenience\r\n * and/or efficiency.\r\n *\r\n * When a face is split or a vertex is added, they are inserted into the\r\n * global list *before* the existing vertex or face (ie. e->Org or e->Lface).\r\n * This makes it easier to process all vertices or faces in the global lists\r\n * without worrying about processing the same data twice.  As a convenience,\r\n * when a face is split, the \"inside\" flag is copied from the old face.\r\n * Other internal data (v->data, v->activeRegion, f->data, f->marked,\r\n * f->trail, e->winding) is set to zero.\r\n *\r\n * ********************** Basic Edge Operations **************************\r\n *\r\n * tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\r\n * The loop (face) consists of the two new half-edges.\r\n *\r\n * tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\r\n * mesh connectivity and topology.  It changes the mesh so that\r\n *  eOrg->Onext <- OLD( eDst->Onext )\r\n *  eDst->Onext <- OLD( eOrg->Onext )\r\n * where OLD(...) means the value before the meshSplice operation.\r\n *\r\n * This can have two effects on the vertex structure:\r\n *  - if eOrg->Org != eDst->Org, the two vertices are merged together\r\n *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\r\n * In both cases, eDst->Org is changed and eOrg->Org is untouched.\r\n *\r\n * Similarly (and independently) for the face structure,\r\n *  - if eOrg->Lface == eDst->Lface, one loop is split into two\r\n *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\r\n * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\r\n *\r\n * tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\r\n * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\r\n * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\r\n * the newly created loop will contain eDel->Dst.  If the deletion of eDel\r\n * would create isolated vertices, those are deleted as well.\r\n *\r\n * ********************** Other Edge Operations **************************\r\n *\r\n * tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\r\n * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\r\n * eOrg and eNew will have the same left face.\r\n *\r\n * tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\r\n * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\r\n * eOrg and eNew will have the same left face.\r\n *\r\n * tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\r\n * to eDst->Org, and returns the corresponding half-edge eNew.\r\n * If eOrg->Lface == eDst->Lface, this splits one loop into two,\r\n * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\r\n * loops are merged into one, and the loop eDst->Lface is destroyed.\r\n *\r\n * ************************ Other Operations *****************************\r\n *\r\n * tessMeshNewMesh() creates a new mesh with no edges, no vertices,\r\n * and no loops (what we usually call a \"face\").\r\n *\r\n * tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\r\n * both meshes, and returns the new mesh (the old meshes are destroyed).\r\n *\r\n * tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\r\n *\r\n * tessMeshZapFace( fZap ) destroys a face and removes it from the\r\n * global face list.  All edges of fZap will have a NULL pointer as their\r\n * left face.  Any edges which also have a NULL pointer as their right face\r\n * are deleted entirely (along with any isolated vertices this produces).\r\n * An entire mesh can be deleted by zapping its faces, one at a time,\r\n * in any order.  Zapped faces cannot be used in further mesh operations!\r\n *\r\n * tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\r\n */\r\n\r\nTESSmesh.prototype = {\r\n\t/* MakeEdge creates a new pair of half-edges which form their own loop.\r\n\t * No vertex or face structures are allocated, but these must be assigned\r\n\t * before the current edge operation is completed.\r\n\t */\r\n\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\r\n\tmakeEdge_: function(eNext) {\r\n\t\tvar e = new TESShalfEdge(0);\r\n\t\tvar eSym = new TESShalfEdge(1);\r\n\r\n\t\t/* Make sure eNext points to the first edge of the edge pair */\r\n\t\tif (eNext.Sym.side < eNext.side) {\r\n\t\t\teNext = eNext.Sym;\r\n\t\t}\r\n\r\n\t\t/* Insert in circular doubly-linked list before eNext.\r\n\t\t * Note that the prev pointer is stored in Sym->next.\r\n\t\t */\r\n\t\tvar ePrev = eNext.Sym.next;\r\n\t\teSym.next = ePrev;\r\n\t\tePrev.Sym.next = e;\r\n\t\te.next = eNext;\r\n\t\teNext.Sym.next = eSym;\r\n\r\n\t\te.Sym = eSym;\r\n\t\te.Onext = e;\r\n\t\te.Lnext = eSym;\r\n\t\te.Org = null;\r\n\t\te.Lface = null;\r\n\t\te.winding = 0;\r\n\t\te.activeRegion = null;\r\n\r\n\t\teSym.Sym = e;\r\n\t\teSym.Onext = eSym;\r\n\t\teSym.Lnext = e;\r\n\t\teSym.Org = null;\r\n\t\teSym.Lface = null;\r\n\t\teSym.winding = 0;\r\n\t\teSym.activeRegion = null;\r\n\r\n\t\treturn e;\r\n\t},\r\n\r\n\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\r\n\t * CS348a notes (see mesh.h).  Basically it modifies the mesh so that\r\n\t * a->Onext and b->Onext are exchanged.  This can have various effects\r\n\t * depending on whether a and b belong to different face or vertex rings.\r\n\t * For more explanation see tessMeshSplice() below.\r\n\t */\r\n\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\r\n\tsplice_: function(a, b) {\r\n\t\tvar aOnext = a.Onext;\r\n\t\tvar bOnext = b.Onext;\r\n\t\taOnext.Sym.Lnext = b;\r\n\t\tbOnext.Sym.Lnext = a;\r\n\t\ta.Onext = bOnext;\r\n\t\tb.Onext = aOnext;\r\n\t},\r\n\r\n\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\r\n\t * origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\r\n\t * a place to insert the new vertex in the global vertex list.  We insert\r\n\t * the new vertex *before* vNext so that algorithms which walk the vertex\r\n\t * list will not see the newly created vertices.\r\n\t */\r\n\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\r\n\tmakeVertex_: function(newVertex, eOrig, vNext) {\r\n\t\tvar vNew = newVertex;\r\n\r\n\t\tassert(vNew);\r\n\r\n\t\t/* insert in circular doubly-linked list before vNext */\r\n\t\tvar vPrev = vNext.prev;\r\n\t\tvNew.prev = vPrev;\r\n\t\tvPrev.next = vNew;\r\n\t\tvNew.next = vNext;\r\n\t\tvNext.prev = vNew;\r\n\r\n\t\tvNew.anEdge = eOrig;\r\n\t\t/* leave coords, s, t undefined */\r\n\r\n\t\t/* fix other edges on this vertex loop */\r\n\t\tvar e = eOrig;\r\n\t\tdo {\r\n\t\t\te.Org = vNew;\r\n\t\t\te = e.Onext;\r\n\t\t} while (e !== eOrig);\r\n\t},\r\n\r\n\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\r\n\t * face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\r\n\t * a place to insert the new face in the global face list.  We insert\r\n\t * the new face *before* fNext so that algorithms which walk the face\r\n\t * list will not see the newly created faces.\r\n\t */\r\n\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\r\n\tmakeFace_: function(newFace, eOrig, fNext) {\r\n\t\tvar fNew = newFace;\r\n\t\tassert(fNew !== null);\r\n\r\n\t\t/* insert in circular doubly-linked list before fNext */\r\n\t\tvar fPrev = fNext.prev;\r\n\t\tfNew.prev = fPrev;\r\n\t\tfPrev.next = fNew;\r\n\t\tfNew.next = fNext;\r\n\t\tfNext.prev = fNew;\r\n\r\n\t\tfNew.anEdge = eOrig;\r\n\t\tfNew.trail = null;\r\n\t\tfNew.marked = false;\r\n\r\n\t\t/* The new face is marked \"inside\" if the old one was.  This is a\r\n\t\t * convenience for the common case where a face has been split in two.\r\n\t\t */\r\n\t\tfNew.inside = fNext.inside;\r\n\r\n\t\t/* fix other edges on this face loop */\r\n\t\tvar e = eOrig;\r\n\t\tdo {\r\n\t\t\te.Lface = fNew;\r\n\t\t\te = e.Lnext;\r\n\t\t} while (e !== eOrig);\r\n\t},\r\n\r\n\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\r\n\t * and removes from the global edge list.\r\n\t */\r\n\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\r\n\tkillEdge_: function(eDel) {\r\n\t\t/* Half-edges are allocated in pairs, see EdgePair above */\r\n\t\tif (eDel.Sym.side < eDel.side) {\r\n\t\t\teDel = eDel.Sym;\r\n\t\t}\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar eNext = eDel.next;\r\n\t\tvar ePrev = eDel.Sym.next;\r\n\t\teNext.Sym.next = ePrev;\r\n\t\tePrev.Sym.next = eNext;\r\n\t},\r\n\r\n\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\r\n\t * vertex list.  It updates the vertex loop to point to a given new vertex.\r\n\t */\r\n\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\r\n\tkillVertex_: function(vDel, newOrg) {\r\n\t\tvar eStart = vDel.anEdge;\r\n\t\t/* change the origin of all affected edges */\r\n\t\tvar e = eStart;\r\n\t\tdo {\r\n\t\t\te.Org = newOrg;\r\n\t\t\te = e.Onext;\r\n\t\t} while (e !== eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar vPrev = vDel.prev;\r\n\t\tvar vNext = vDel.next;\r\n\t\tvNext.prev = vPrev;\r\n\t\tvPrev.next = vNext;\r\n\t},\r\n\r\n\t/* KillFace( fDel ) destroys a face and removes it from the global face\r\n\t * list.  It updates the face loop to point to a given new face.\r\n\t */\r\n\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\r\n\tkillFace_: function(fDel, newLface) {\r\n\t\tvar eStart = fDel.anEdge;\r\n\r\n\t\t/* change the left face of all affected edges */\r\n\t\tvar e = eStart;\r\n\t\tdo {\r\n\t\t\te.Lface = newLface;\r\n\t\t\te = e.Lnext;\r\n\t\t} while (e !== eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar fPrev = fDel.prev;\r\n\t\tvar fNext = fDel.next;\r\n\t\tfNext.prev = fPrev;\r\n\t\tfPrev.next = fNext;\r\n\t},\r\n\r\n\t/****************** Basic Edge Operations **********************/\r\n\r\n\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\r\n\t * The loop consists of the two new half-edges.\r\n\t */\r\n\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\r\n\tmakeEdge: function() {\r\n\t\tvar newVertex1 = new TESSvertex();\r\n\t\tvar newVertex2 = new TESSvertex();\r\n\t\tvar newFace = new TESSface();\r\n\t\tvar e = this.makeEdge_(this.eHead);\r\n\t\tthis.makeVertex_(newVertex1, e, this.vHead);\r\n\t\tthis.makeVertex_(newVertex2, e.Sym, this.vHead);\r\n\t\tthis.makeFace_(newFace, e, this.fHead);\r\n\t\treturn e;\r\n\t},\r\n\r\n\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\r\n\t * mesh connectivity and topology.  It changes the mesh so that\r\n\t *\teOrg->Onext <- OLD( eDst->Onext )\r\n\t *\teDst->Onext <- OLD( eOrg->Onext )\r\n\t * where OLD(...) means the value before the meshSplice operation.\r\n\t *\r\n\t * This can have two effects on the vertex structure:\r\n\t *  - if eOrg->Org != eDst->Org, the two vertices are merged together\r\n\t *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\r\n\t * In both cases, eDst->Org is changed and eOrg->Org is untouched.\r\n\t *\r\n\t * Similarly (and independently) for the face structure,\r\n\t *  - if eOrg->Lface == eDst->Lface, one loop is split into two\r\n\t *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\r\n\t * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\r\n\t *\r\n\t * Some special cases:\r\n\t * If eDst == eOrg, the operation has no effect.\r\n\t * If eDst == eOrg->Lnext, the new face will have a single edge.\r\n\t * If eDst == eOrg->Lprev, the old face will have a single edge.\r\n\t * If eDst == eOrg->Onext, the new vertex will have a single edge.\r\n\t * If eDst == eOrg->Oprev, the old vertex will have a single edge.\r\n\t */\r\n\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\r\n\tsplice: function(eOrg, eDst) {\r\n\t\tvar joiningLoops = false;\r\n\t\tvar joiningVertices = false;\r\n\r\n\t\tif (eOrg === eDst) return;\r\n\r\n\t\tif (eDst.Org !== eOrg.Org) {\r\n\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\r\n\t\t\tjoiningVertices = true;\r\n\t\t\tthis.killVertex_(eDst.Org, eOrg.Org);\r\n\t\t}\r\n\t\tif (eDst.Lface !== eOrg.Lface) {\r\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDst.Lface, eOrg.Lface);\r\n\t\t}\r\n\r\n\t\t/* Change the edge structure */\r\n\t\tthis.splice_(eDst, eOrg);\r\n\r\n\t\tif (!joiningVertices) {\r\n\t\t\tvar newVertex = new TESSvertex();\r\n\r\n\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\r\n\t\t\t * Make sure the old vertex points to a valid half-edge.\r\n\t\t\t */\r\n\t\t\tthis.makeVertex_(newVertex, eDst, eOrg.Org);\r\n\t\t\teOrg.Org.anEdge = eOrg;\r\n\t\t}\r\n\t\tif (!joiningLoops) {\r\n\t\t\tvar newFace = new TESSface();\r\n\r\n\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\r\n\t\t\t * Make sure the old face points to a valid half-edge.\r\n\t\t\t */\r\n\t\t\tthis.makeFace_(newFace, eDst, eOrg.Lface);\r\n\t\t\teOrg.Lface.anEdge = eOrg;\r\n\t\t}\r\n\t},\r\n\r\n\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\r\n\t * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\r\n\t * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\r\n\t * the newly created loop will contain eDel->Dst.  If the deletion of eDel\r\n\t * would create isolated vertices, those are deleted as well.\r\n\t *\r\n\t * This function could be implemented as two calls to tessMeshSplice\r\n\t * plus a few calls to memFree, but this would allocate and delete\r\n\t * unnecessary vertices and faces.\r\n\t */\r\n\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\r\n\tdelete: function(eDel) {\r\n\t\tvar eDelSym = eDel.Sym;\r\n\t\tvar joiningLoops = false;\r\n\r\n\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\r\n\t\t * changes to get a consistent mesh in this \"intermediate\" state.\r\n\t\t */\r\n\t\tif (eDel.Lface !== eDel.Rface) {\r\n\t\t\t/* We are joining two loops into one -- remove the left face */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDel.Lface, eDel.Rface);\r\n\t\t}\r\n\r\n\t\tif (eDel.Onext === eDel) {\r\n\t\t\tthis.killVertex_(eDel.Org, null);\r\n\t\t} else {\r\n\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\r\n\t\t\teDel.Rface.anEdge = eDel.Oprev;\r\n\t\t\teDel.Org.anEdge = eDel.Onext;\r\n\r\n\t\t\tthis.splice_(eDel, eDel.Oprev);\r\n\t\t\tif (!joiningLoops) {\r\n\t\t\t\tvar newFace = new TESSface();\r\n\r\n\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\r\n\t\t\t\tthis.makeFace_(newFace, eDel, eDel.Lface);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\r\n\t\t * may have been deleted.  Now we disconnect eDel->Dst.\r\n\t\t */\r\n\t\tif (eDelSym.Onext === eDelSym) {\r\n\t\t\tthis.killVertex_(eDelSym.Org, null);\r\n\t\t\tthis.killFace_(eDelSym.Lface, null);\r\n\t\t} else {\r\n\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\r\n\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\r\n\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\r\n\t\t\tthis.splice_(eDelSym, eDelSym.Oprev);\r\n\t\t}\r\n\r\n\t\t/* Any isolated vertices or faces have already been freed. */\r\n\t\tthis.killEdge_(eDel);\r\n\t},\r\n\r\n\t/******************** Other Edge Operations **********************/\r\n\r\n\t/* All these routines can be implemented with the basic edge\r\n\t * operations above.  They are provided for convenience and efficiency.\r\n\t */\r\n\r\n\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\r\n\t * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\r\n\t * eOrg and eNew will have the same left face.\r\n\t */\r\n\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\r\n\taddEdgeVertex: function(eOrg) {\r\n\t\tvar eNew = this.makeEdge_(eOrg);\r\n\t\tvar eNewSym = eNew.Sym;\r\n\r\n\t\t/* Connect the new edge appropriately */\r\n\t\tthis.splice_(eNew, eOrg.Lnext);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teNew.Org = eOrg.Dst;\r\n\r\n\t\tvar newVertex = new TESSvertex();\r\n\t\tthis.makeVertex_(newVertex, eNewSym, eNew.Org);\r\n\r\n\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\r\n\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\r\n\t * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\r\n\t * eOrg and eNew will have the same left face.\r\n\t */\r\n\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\r\n\tsplitEdge: function(eOrg, eDst) {\r\n\t\tvar tempHalfEdge = this.addEdgeVertex(eOrg);\r\n\t\tvar eNew = tempHalfEdge.Sym;\r\n\r\n\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\r\n\t\tthis.splice_(eOrg.Sym, eOrg.Sym.Oprev);\r\n\t\tthis.splice_(eOrg.Sym, eNew);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teOrg.Dst = eNew.Org;\r\n\t\teNew.Dst.anEdge = eNew.Sym; /* may have pointed to eOrg->Sym */\r\n\t\teNew.Rface = eOrg.Rface;\r\n\t\teNew.winding = eOrg.winding; /* copy old winding information */\r\n\t\teNew.Sym.winding = eOrg.Sym.winding;\r\n\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\r\n\t * to eDst->Org, and returns the corresponding half-edge eNew.\r\n\t * If eOrg->Lface == eDst->Lface, this splits one loop into two,\r\n\t * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\r\n\t * loops are merged into one, and the loop eDst->Lface is destroyed.\r\n\t *\r\n\t * If (eOrg == eDst), the new face will have only two edges.\r\n\t * If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\r\n\t * If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\r\n\t */\r\n\r\n\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\r\n\tconnect: function(eOrg, eDst) {\r\n\t\tvar joiningLoops = false;\r\n\t\tvar eNew = this.makeEdge_(eOrg);\r\n\t\tvar eNewSym = eNew.Sym;\r\n\r\n\t\tif (eDst.Lface !== eOrg.Lface) {\r\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDst.Lface, eOrg.Lface);\r\n\t\t}\r\n\r\n\t\t/* Connect the new edge appropriately */\r\n\t\tthis.splice_(eNew, eOrg.Lnext);\r\n\t\tthis.splice_(eNewSym, eDst);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teNew.Org = eOrg.Dst;\r\n\t\teNewSym.Org = eDst.Org;\r\n\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\r\n\r\n\t\t/* Make sure the old face points to a valid half-edge */\r\n\t\teOrg.Lface.anEdge = eNewSym;\r\n\r\n\t\tif (!joiningLoops) {\r\n\t\t\tvar newFace = new TESSface();\r\n\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\r\n\t\t\tthis.makeFace_(newFace, eNew, eOrg.Lface);\r\n\t\t}\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\r\n\t * global face list.  All edges of fZap will have a NULL pointer as their\r\n\t * left face.  Any edges which also have a NULL pointer as their right face\r\n\t * are deleted entirely (along with any isolated vertices this produces).\r\n\t * An entire mesh can be deleted by zapping its faces, one at a time,\r\n\t * in any order.  Zapped faces cannot be used in further mesh operations!\r\n\t */\r\n\tzapFace: function(fZap) {\r\n\t\tvar eStart = fZap.anEdge;\r\n\t\tvar e, eNext, eSym;\r\n\t\tvar fPrev, fNext;\r\n\r\n\t\t/* walk around face, deleting edges whose right face is also NULL */\r\n\t\teNext = eStart.Lnext;\r\n\t\tdo {\r\n\t\t\te = eNext;\r\n\t\t\teNext = e.Lnext;\r\n\r\n\t\t\te.Lface = null;\r\n\t\t\tif (e.Rface === null) {\r\n\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\r\n\r\n\t\t\t\tif (e.Onext === e) {\r\n\t\t\t\t\tthis.killVertex_(e.Org, null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\r\n\t\t\t\t\te.Org.anEdge = e.Onext;\r\n\t\t\t\t\tthis.splice_(e, e.Oprev);\r\n\t\t\t\t}\r\n\t\t\t\teSym = e.Sym;\r\n\t\t\t\tif (eSym.Onext === eSym) {\r\n\t\t\t\t\tthis.killVertex_(eSym.Org, null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\r\n\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\r\n\t\t\t\t\tthis.splice_(eSym, eSym.Oprev);\r\n\t\t\t\t}\r\n\t\t\t\tthis.killEdge_(e);\r\n\t\t\t}\r\n\t\t} while (e != eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tfPrev = fZap.prev;\r\n\t\tfNext = fZap.next;\r\n\t\tfNext.prev = fPrev;\r\n\t\tfPrev.next = fNext;\r\n\t},\r\n\r\n\tcountFaceVerts_: function(f) {\r\n\t\tvar eCur = f.anEdge;\r\n\t\tvar n = 0;\r\n\t\tdo {\r\n\t\t\tn++;\r\n\t\t\teCur = eCur.Lnext;\r\n\t\t} while (eCur !== f.anEdge);\r\n\t\treturn n;\r\n\t},\r\n\r\n\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\r\n\tmergeConvexFaces: function(maxVertsPerFace) {\r\n\t\tvar f;\r\n\t\tvar eCur, eNext, eSym;\r\n\t\tvar vStart;\r\n\t\tvar curNv, symNv;\r\n\r\n\t\tfor (f = this.fHead.next; f !== this.fHead; f = f.next) {\r\n\t\t\t// Skip faces which are outside the result.\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\teCur = f.anEdge;\r\n\t\t\tvStart = eCur.Org;\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\teNext = eCur.Lnext;\r\n\t\t\t\teSym = eCur.Sym;\r\n\r\n\t\t\t\t// Try to merge if the neighbour face is valid.\r\n\t\t\t\tif (eSym && eSym.Lface && eSym.Lface.inside) {\r\n\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\r\n\t\t\t\t\t// does not exceed maximum number of vertices.\r\n\t\t\t\t\tcurNv = this.countFaceVerts_(f);\r\n\t\t\t\t\tsymNv = this.countFaceVerts_(eSym.Lface);\r\n\t\t\t\t\tif (curNv + symNv - 2 <= maxVertsPerFace) {\r\n\t\t\t\t\t\t// Merge if the resulting poly is convex.\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tGeom.vertCCW(\r\n\t\t\t\t\t\t\t\teCur.Lprev.Org,\r\n\t\t\t\t\t\t\t\teCur.Org,\r\n\t\t\t\t\t\t\t\teSym.Lnext.Lnext.Org,\r\n\t\t\t\t\t\t\t) &&\r\n\t\t\t\t\t\t\tGeom.vertCCW(\r\n\t\t\t\t\t\t\t\teSym.Lprev.Org,\r\n\t\t\t\t\t\t\t\teSym.Org,\r\n\t\t\t\t\t\t\t\teCur.Lnext.Lnext.Org,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\teNext = eSym.Lnext;\r\n\t\t\t\t\t\t\tthis.delete(eSym);\r\n\t\t\t\t\t\t\teCur = null;\r\n\t\t\t\t\t\t\teSym = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (eCur && eCur.Lnext.Org === vStart) break;\r\n\r\n\t\t\t\t// Continue to next edge.\r\n\t\t\t\teCur = eNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\r\n\t */\r\n\tcheck: function() {\r\n\t\tvar fHead = this.fHead;\r\n\t\tvar vHead = this.vHead;\r\n\t\tvar eHead = this.eHead;\r\n\t\tvar f, fPrev, v, vPrev, e, ePrev;\r\n\r\n\t\tfPrev = fHead;\r\n\t\tfor (fPrev = fHead; (f = fPrev.next) !== fHead; fPrev = f) {\r\n\t\t\tassert(f.prev === fPrev);\r\n\t\t\te = f.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tassert(e.Sym !== e);\r\n\t\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t\t\tassert(e.Lface === f);\r\n\t\t\t\te = e.Lnext;\r\n\t\t\t} while (e !== f.anEdge);\r\n\t\t}\r\n\t\tassert(f.prev === fPrev && f.anEdge === null);\r\n\r\n\t\tvPrev = vHead;\r\n\t\tfor (vPrev = vHead; (v = vPrev.next) !== vHead; vPrev = v) {\r\n\t\t\tassert(v.prev === vPrev);\r\n\t\t\te = v.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tassert(e.Sym !== e);\r\n\t\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t\t\tassert(e.Org === v);\r\n\t\t\t\te = e.Onext;\r\n\t\t\t} while (e !== v.anEdge);\r\n\t\t}\r\n\t\tassert(v.prev === vPrev && v.anEdge === null);\r\n\r\n\t\tePrev = eHead;\r\n\t\tfor (ePrev = eHead; (e = ePrev.next) !== eHead; ePrev = e) {\r\n\t\t\tassert(e.Sym.next === ePrev.Sym);\r\n\t\t\tassert(e.Sym !== e);\r\n\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\tassert(e.Org !== null);\r\n\t\t\tassert(e.Dst !== null);\r\n\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t}\r\n\t\tassert(\r\n\t\t\te.Sym.next === ePrev.Sym &&\r\n\t\t\t\te.Sym === this.eHeadSym &&\r\n\t\t\t\te.Sym.Sym === e &&\r\n\t\t\t\te.Org === null &&\r\n\t\t\t\te.Dst === null &&\r\n\t\t\t\te.Lface === null &&\r\n\t\t\t\te.Rface === null,\r\n\t\t);\r\n\t}\r\n}\r\n","import { Geom } from \"./Geom\";\r\nimport { assert } from \"./assert\";\r\nimport { PriorityQ } from \"./PriorityQ\";\r\nimport { WINDING, MODE } from \"./constants\";\r\nimport { ActiveRegion } from \"./units\";\r\nimport { TESSvertex } from \"./units\";\r\nimport {Dict} from \"./Dict\";\r\n\r\nexport class Sweep {\r\n\tstatic regionBelow(r) {\r\n\t\treturn r.nodeUp.prev.key;\r\n\t}\r\n\r\n\tstatic regionAbove(r) {\r\n\t\treturn r.nodeUp.next.key;\r\n\t}\r\n\r\n\tstatic debugEvent(tess) {\r\n\t\t// empty\r\n\t}\r\n\r\n\t/*\r\n\t * Invariants for the Edge Dictionary.\r\n\t * - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\r\n\t *   at any valid location of the sweep event\r\n\t * - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\r\n\t *   share a common endpoint\r\n\t * - for each e, e->Dst has been processed, but not e->Org\r\n\t * - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\r\n\t *   where \"event\" is the current sweep line event.\r\n\t * - no edge e has zero length\r\n\t *\r\n\t * Invariants for the Mesh (the processed portion).\r\n\t * - the portion of the mesh left of the sweep line is a planar graph,\r\n\t *   ie. there is *some* way to embed it in the plane\r\n\t * - no processed edge has zero length\r\n\t * - no two processed vertices have identical coordinates\r\n\t * - each \"inside\" region is monotone, ie. can be broken into two chains\r\n\t *   of monotonically increasing vertices according to VertLeq(v1,v2)\r\n\t *   - a non-invariant: these chains may intersect (very slightly)\r\n\t *\r\n\t * Invariants for the Sweep.\r\n\t * - if none of the edges incident to the event vertex have an activeRegion\r\n\t *   (ie. none of these edges are in the edge dictionary), then the vertex\r\n\t *   has only right-going edges.\r\n\t * - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\r\n\t *   by ConnectRightVertex), then it is the only right-going edge from\r\n\t *   its associated vertex.  (This says that these edges exist only\r\n\t *   when it is necessary.)\r\n\t */\r\n\r\n\t/* When we merge two edges into one, we need to compute the combined\r\n\t * winding of the new edge.\r\n\t */\r\n\tstatic addWinding(eDst, eSrc) {\r\n\t\teDst.winding += eSrc.winding;\r\n\t\teDst.Sym.winding += eSrc.Sym.winding;\r\n\t}\r\n\r\n\t//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\r\n\tstatic edgeLeq(tess, reg1, reg2) {\r\n\t\t/*\r\n\t\t * Both edges must be directed from right to left (this is the canonical\r\n\t\t * direction for the upper edge of each region).\r\n\t\t *\r\n\t\t * The strategy is to evaluate a \"t\" value for each edge at the\r\n\t\t * current sweep line position, given by tess->event.  The calculations\r\n\t\t * are designed to be very stable, but of course they are not perfect.\r\n\t\t *\r\n\t\t * Special case: if both edge destinations are at the sweep event,\r\n\t\t * we sort the edges by slope (they would otherwise compare equally).\r\n\t\t */\r\n\t\tvar ev = tess.event;\r\n\t\tvar t1, t2;\r\n\r\n\t\tvar e1 = reg1.eUp;\r\n\t\tvar e2 = reg2.eUp;\r\n\r\n\t\tif (e1.Dst === ev) {\r\n\t\t\tif (e2.Dst === ev) {\r\n\t\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\r\n\t\t\t\t * Sort them by slope.\r\n\t\t\t\t */\r\n\t\t\t\tif (Geom.vertLeq(e1.Org, e2.Org)) {\r\n\t\t\t\t\treturn Geom.edgeSign(e2.Dst, e1.Org, e2.Org) <= 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn Geom.edgeSign(e1.Dst, e2.Org, e1.Org) >= 0;\r\n\t\t\t}\r\n\t\t\treturn Geom.edgeSign(e2.Dst, ev, e2.Org) <= 0;\r\n\t\t}\r\n\t\tif (e2.Dst === ev) {\r\n\t\t\treturn Geom.edgeSign(e1.Dst, ev, e1.Org) >= 0;\r\n\t\t}\r\n\r\n\t\t/* General case - compute signed distance *from* e1, e2 to event */\r\n\t\tvar t1 = Geom.edgeEval(e1.Dst, ev, e1.Org);\r\n\t\tvar t2 = Geom.edgeEval(e2.Dst, ev, e2.Org);\r\n\t\treturn t1 >= t2;\r\n\t}\r\n\r\n\t//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\r\n\tstatic deleteRegion(tess, reg) {\r\n\t\tif (reg.fixUpperEdge) {\r\n\t\t\t/* It was created with zero winding number, so it better be\r\n\t\t\t * deleted with zero winding number (ie. it better not get merged\r\n\t\t\t * with a real edge).\r\n\t\t\t */\r\n\t\t\tassert(reg.eUp.winding === 0);\r\n\t\t}\r\n\t\treg.eUp.activeRegion = null;\r\n\t\ttess.dict.delete(reg.nodeUp);\r\n\t}\r\n\r\n\t//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\r\n\tstatic fixUpperEdge(tess, reg, newEdge) {\r\n\t\t/*\r\n\t\t * Replace an upper edge which needs fixing (see ConnectRightVertex).\r\n\t\t */\r\n\t\tassert(reg.fixUpperEdge);\r\n\t\ttess.mesh.delete(reg.eUp);\r\n\t\treg.fixUpperEdge = false;\r\n\t\treg.eUp = newEdge;\r\n\t\tnewEdge.activeRegion = reg;\r\n\t}\r\n\r\n\t//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\r\n\tstatic topLeftRegion(tess, reg) {\r\n\t\tvar org = reg.eUp.Org;\r\n\t\tvar e;\r\n\r\n\t\t/* Find the region above the uppermost edge with the same origin */\r\n\t\tdo {\r\n\t\t\treg = Sweep.regionAbove(reg);\r\n\t\t} while (reg.eUp.Org === org);\r\n\r\n\t\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\r\n\t\t * now is the time to fix it.\r\n\t\t */\r\n\t\tif (reg.fixUpperEdge) {\r\n\t\t\te = tess.mesh.connect(\r\n\t\t\t\tSweep.regionBelow(reg).eUp.Sym,\r\n\t\t\t\treg.eUp.Lnext,\r\n\t\t\t);\r\n\t\t\tif (e === null) return null;\r\n\t\t\tSweep.fixUpperEdge(tess, reg, e);\r\n\t\t\treg = Sweep.regionAbove(reg);\r\n\t\t}\r\n\t\treturn reg;\r\n\t}\r\n\r\n\t//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\r\n\tstatic topRightRegion(reg) {\r\n\t\tvar dst = reg.eUp.Dst;\r\n\t\t/* Find the region above the uppermost edge with the same destination */\r\n\t\tdo {\r\n\t\t\treg = Sweep.regionAbove(reg);\r\n\t\t} while (reg.eUp.Dst === dst);\r\n\t\treturn reg;\r\n\t}\r\n\r\n\t//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\r\n\tstatic addRegionBelow(tess, regAbove, eNewUp) {\r\n\t\t/*\r\n\t\t * Add a new active region to the sweep line, *somewhere* below \"regAbove\"\r\n\t\t * (according to where the new edge belongs in the sweep-line dictionary).\r\n\t\t * The upper edge of the new region will be \"eNewUp\".\r\n\t\t * Winding number and \"inside\" flag are not updated.\r\n\t\t */\r\n\t\tvar regNew = new ActiveRegion();\r\n\t\tregNew.eUp = eNewUp;\r\n\t\tregNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp, regNew);\r\n\t\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\r\n\t\tregNew.fixUpperEdge = false;\r\n\t\tregNew.sentinel = false;\r\n\t\tregNew.dirty = false;\r\n\r\n\t\teNewUp.activeRegion = regNew;\r\n\t\treturn regNew;\r\n\t}\r\n\r\n\t//static int IsWindingInside( TESStesselator *tess, int n )\r\n\tstatic isWindingInside(tess, n) {\r\n\t\tswitch (tess.windingRule) {\r\n\t\t\tcase WINDING.ODD:\r\n\t\t\t\treturn (n & 1) !== 0;\r\n\t\t\tcase WINDING.NONZERO:\r\n\t\t\t\treturn n !== 0;\r\n\t\t\tcase WINDING.POSITIVE:\r\n\t\t\t\treturn n > 0;\r\n\t\t\tcase WINDING.NEGATIVE:\r\n\t\t\t\treturn n < 0;\r\n\t\t\tcase WINDING.ABS_GEQ_TWO:\r\n\t\t\t\treturn n >= 2 || n <= -2;\r\n\t\t}\r\n\t\tassert(false);\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\r\n\tstatic computeWinding(tess, reg) {\r\n\t\treg.windingNumber =\r\n\t\t\tSweep.regionAbove(reg).windingNumber + reg.eUp.winding;\r\n\t\treg.inside = Sweep.isWindingInside(tess, reg.windingNumber);\r\n\t}\r\n\r\n\t//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\r\n\tstatic finishRegion(tess, reg) {\r\n\t\t/*\r\n\t\t * Delete a region from the sweep line.  This happens when the upper\r\n\t\t * and lower chains of a region meet (at a vertex on the sweep line).\r\n\t\t * The \"inside\" flag is copied to the appropriate mesh face (we could\r\n\t\t * not do this before -- since the structure of the mesh is always\r\n\t\t * changing, this face may not have even existed until now).\r\n\t\t */\r\n\t\tvar e = reg.eUp;\r\n\t\tvar f = e.Lface;\r\n\r\n\t\tf.inside = reg.inside;\r\n\t\tf.anEdge = e; /* optimization for tessMeshTessellateMonoRegion() */\r\n\t\tSweep.deleteRegion(tess, reg);\r\n\t}\r\n\r\n\t//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\r\n\tstatic finishLeftRegions(tess, regFirst, regLast) {\r\n\t\t/*\r\n\t\t * We are given a vertex with one or more left-going edges.  All affected\r\n\t\t * edges should be in the edge dictionary.  Starting at regFirst->eUp,\r\n\t\t * we walk down deleting all regions where both edges have the same\r\n\t\t * origin vOrg.  At the same time we copy the \"inside\" flag from the\r\n\t\t * active region to the face, since at this point each face will belong\r\n\t\t * to at most one region (this was not necessarily true until this point\r\n\t\t * in the sweep).  The walk stops at the region above regLast; if regLast\r\n\t\t * is NULL we walk as far as possible.  At the same time we relink the\r\n\t\t * mesh if necessary, so that the ordering of edges around vOrg is the\r\n\t\t * same as in the dictionary.\r\n\t\t */\r\n\t\tvar e, ePrev;\r\n\t\tvar reg = null;\r\n\t\tvar regPrev = regFirst;\r\n\t\tvar ePrev = regFirst.eUp;\r\n\t\twhile (regPrev !== regLast) {\r\n\t\t\tregPrev.fixUpperEdge = false; /* placement was OK */\r\n\t\t\treg = Sweep.regionBelow(regPrev);\r\n\t\t\te = reg.eUp;\r\n\t\t\tif (e.Org != ePrev.Org) {\r\n\t\t\t\tif (!reg.fixUpperEdge) {\r\n\t\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\r\n\t\t\t\t\t * edges in the dictionary with this origin, there may be further\r\n\t\t\t\t\t * such edges in the mesh (if we are adding left edges to a vertex\r\n\t\t\t\t\t * that has already been processed).  Thus it is important to call\r\n\t\t\t\t\t * FinishRegion rather than just DeleteRegion.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tSweep.finishRegion(tess, regPrev);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t/* If the edge below was a temporary edge introduced by\r\n\t\t\t\t * ConnectRightVertex, now is the time to fix it.\r\n\t\t\t\t */\r\n\t\t\t\te = tess.mesh.connect(ePrev.Lprev, e.Sym);\r\n\t\t\t\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\r\n\t\t\t\tSweep.fixUpperEdge(tess, reg, e);\r\n\t\t\t}\r\n\r\n\t\t\t/* Relink edges so that ePrev->Onext == e */\r\n\t\t\tif (ePrev.Onext !== e) {\r\n\t\t\t\ttess.mesh.splice(e.Oprev, e);\r\n\t\t\t\ttess.mesh.splice(ePrev, e);\r\n\t\t\t}\r\n\t\t\tSweep.finishRegion(tess, regPrev); /* may change reg->eUp */\r\n\t\t\tePrev = reg.eUp;\r\n\t\t\tregPrev = reg;\r\n\t\t}\r\n\t\treturn ePrev;\r\n\t}\r\n\r\n\t//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\r\n\tstatic addRightEdges(tess, regUp, eFirst, eLast, eTopLeft, cleanUp) {\r\n\t\t/*\r\n\t\t * Purpose: insert right-going edges into the edge dictionary, and update\r\n\t\t * winding numbers and mesh connectivity appropriately.  All right-going\r\n\t\t * edges share a common origin vOrg.  Edges are inserted CCW starting at\r\n\t\t * eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\r\n\t\t * left-going edges already processed, then eTopLeft must be the edge\r\n\t\t * such that an imaginary upward vertical segment from vOrg would be\r\n\t\t * contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\r\n\t\t * should be NULL.\r\n\t\t */\r\n\t\tvar reg, regPrev;\r\n\t\tvar e, ePrev;\r\n\t\tvar firstTime = true;\r\n\r\n\t\t/* Insert the new right-going edges in the dictionary */\r\n\t\te = eFirst;\r\n\t\tdo {\r\n\t\t\tassert(Geom.vertLeq(e.Org, e.Dst));\r\n\t\t\tSweep.addRegionBelow(tess, regUp, e.Sym);\r\n\t\t\te = e.Onext;\r\n\t\t} while (e !== eLast);\r\n\r\n\t\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\r\n\t\t * updating the winding numbers of each region, and re-linking the mesh\r\n\t\t * edges to match the dictionary ordering (if necessary).\r\n\t\t */\r\n\t\tif (eTopLeft === null) {\r\n\t\t\teTopLeft = Sweep.regionBelow(regUp).eUp.Rprev;\r\n\t\t}\r\n\t\tregPrev = regUp;\r\n\t\tePrev = eTopLeft;\r\n\t\tfor (;;) {\r\n\t\t\treg = Sweep.regionBelow(regPrev);\r\n\t\t\te = reg.eUp.Sym;\r\n\t\t\tif (e.Org !== ePrev.Org) break;\r\n\r\n\t\t\tif (e.Onext !== ePrev) {\r\n\t\t\t\t/* Unlink e from its current position, and relink below ePrev */\r\n\t\t\t\ttess.mesh.splice(e.Oprev, e);\r\n\t\t\t\ttess.mesh.splice(ePrev.Oprev, e);\r\n\t\t\t}\r\n\t\t\t/* Compute the winding number and \"inside\" flag for the new regions */\r\n\t\t\treg.windingNumber = regPrev.windingNumber - e.winding;\r\n\t\t\treg.inside = Sweep.isWindingInside(tess, reg.windingNumber);\r\n\r\n\t\t\t/* Check for two outgoing edges with same slope -- process these\r\n\t\t\t * before any intersection tests (see example in tessComputeInterior).\r\n\t\t\t */\r\n\t\t\tregPrev.dirty = true;\r\n\t\t\tif (!firstTime && Sweep.checkForRightSplice(tess, regPrev)) {\r\n\t\t\t\tSweep.addWinding(e, ePrev);\r\n\t\t\t\tSweep.deleteRegion(tess, regPrev);\r\n\t\t\t\ttess.mesh.delete(ePrev);\r\n\t\t\t}\r\n\t\t\tfirstTime = false;\r\n\t\t\tregPrev = reg;\r\n\t\t\tePrev = e;\r\n\t\t}\r\n\t\tregPrev.dirty = true;\r\n\t\tassert(regPrev.windingNumber - e.winding === reg.windingNumber);\r\n\r\n\t\tif (cleanUp) {\r\n\t\t\t/* Check for intersections between newly adjacent edges. */\r\n\t\t\tSweep.walkDirtyRegions(tess, regPrev);\r\n\t\t}\r\n\t}\r\n\r\n\t//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\r\n\tstatic spliceMergeVertices(tess, e1, e2) {\r\n\t\t/*\r\n\t\t * Two vertices with idential coordinates are combined into one.\r\n\t\t * e1->Org is kept, while e2->Org is discarded.\r\n\t\t */\r\n\t\ttess.mesh.splice(e1, e2);\r\n\t}\r\n\r\n\t//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\r\n\tstatic vertexWeights(isect, org, dst) {\r\n\t\t/*\r\n\t\t * Find some weights which describe how the intersection vertex is\r\n\t\t * a linear combination of \"org\" and \"dest\".  Each of the two edges\r\n\t\t * which generated \"isect\" is allocated 50% of the weight; each edge\r\n\t\t * splits the weight between its org and dst according to the\r\n\t\t * relative distance to \"isect\".\r\n\t\t */\r\n\t\tvar t1 = Geom.vertL1dist(org, isect);\r\n\t\tvar t2 = Geom.vertL1dist(dst, isect);\r\n\t\tvar w0 = (0.5 * t2) / (t1 + t2);\r\n\t\tvar w1 = (0.5 * t1) / (t1 + t2);\r\n\t\tisect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];\r\n\t\tisect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];\r\n\t\tisect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];\r\n\t}\r\n\r\n\t//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\r\n\tstatic getIntersectData(tess, isect, orgUp, dstUp, orgLo, dstLo) {\r\n\t\t/*\r\n\t\t * We've computed a new intersection point, now we need a \"data\" pointer\r\n\t\t * from the user so that we can refer to this new vertex in the\r\n\t\t * rendering callbacks.\r\n\t\t */\r\n\t\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\r\n\t\tisect.idx = -1;\r\n\t\tSweep.vertexWeights(isect, orgUp, dstUp);\r\n\t\tSweep.vertexWeights(isect, orgLo, dstLo);\r\n\t}\r\n\r\n\t//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\r\n\tstatic checkForRightSplice(tess, regUp) {\r\n\t\t/*\r\n\t\t * Check the upper and lower edge of \"regUp\", to make sure that the\r\n\t\t * eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\r\n\t\t * origin is leftmost).\r\n\t\t *\r\n\t\t * The main purpose is to splice right-going edges with the same\r\n\t\t * dest vertex and nearly identical slopes (ie. we can't distinguish\r\n\t\t * the slopes numerically).  However the splicing can also help us\r\n\t\t * to recover from numerical errors.  For example, suppose at one\r\n\t\t * point we checked eUp and eLo, and decided that eUp->Org is barely\r\n\t\t * above eLo.  Then later, we split eLo into two edges (eg. from\r\n\t\t * a splice operation like this one).  This can change the result of\r\n\t\t * our test so that now eUp->Org is incident to eLo, or barely below it.\r\n\t\t * We must correct this condition to maintain the dictionary invariants.\r\n\t\t *\r\n\t\t * One possibility is to check these edges for intersection again\r\n\t\t * (ie. CheckForIntersect).  This is what we do if possible.  However\r\n\t\t * CheckForIntersect requires that tess->event lies between eUp and eLo,\r\n\t\t * so that it has something to fall back on when the intersection\r\n\t\t * calculation gives us an unusable answer.  So, for those cases where\r\n\t\t * we can't check for intersection, this routine fixes the problem\r\n\t\t * by just splicing the offending vertex into the other edge.\r\n\t\t * This is a guaranteed solution, no matter how degenerate things get.\r\n\t\t * Basically this is a combinatorial solution to a numerical problem.\r\n\t\t */\r\n\t\tvar regLo = Sweep.regionBelow(regUp);\r\n\t\tvar eUp = regUp.eUp;\r\n\t\tvar eLo = regLo.eUp;\r\n\r\n\t\tif (Geom.vertLeq(eUp.Org, eLo.Org)) {\r\n\t\t\tif (Geom.edgeSign(eLo.Dst, eUp.Org, eLo.Org) > 0) return false;\r\n\r\n\t\t\t/* eUp->Org appears to be below eLo */\r\n\t\t\tif (!Geom.vertEq(eUp.Org, eLo.Org)) {\r\n\t\t\t\t/* Splice eUp->Org into eLo */\r\n\t\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\t\ttess.mesh.splice(eUp, eLo.Oprev);\r\n\t\t\t\tregUp.dirty = regLo.dirty = true;\r\n\t\t\t} else if (eUp.Org !== eLo.Org) {\r\n\t\t\t\t/* merge the two vertices, discarding eUp->Org */\r\n\t\t\t\ttess.pq.delete(eUp.Org.pqHandle);\r\n\t\t\t\tSweep.spliceMergeVertices(tess, eLo.Oprev, eUp);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (Geom.edgeSign(eUp.Dst, eLo.Org, eUp.Org) < 0) return false;\r\n\r\n\t\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\r\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\t\ttess.mesh.splice(eLo.Oprev, eUp);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\r\n\tstatic checkForLeftSplice(tess, regUp) {\r\n\t\t/*\r\n\t\t * Check the upper and lower edge of \"regUp\", to make sure that the\r\n\t\t * eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\r\n\t\t * destination is rightmost).\r\n\t\t *\r\n\t\t * Theoretically, this should always be true.  However, splitting an edge\r\n\t\t * into two pieces can change the results of previous tests.  For example,\r\n\t\t * suppose at one point we checked eUp and eLo, and decided that eUp->Dst\r\n\t\t * is barely above eLo.  Then later, we split eLo into two edges (eg. from\r\n\t\t * a splice operation like this one).  This can change the result of\r\n\t\t * the test so that now eUp->Dst is incident to eLo, or barely below it.\r\n\t\t * We must correct this condition to maintain the dictionary invariants\r\n\t\t * (otherwise new edges might get inserted in the wrong place in the\r\n\t\t * dictionary, and bad stuff will happen).\r\n\t\t *\r\n\t\t * We fix the problem by just splicing the offending vertex into the\r\n\t\t * other edge.\r\n\t\t */\r\n\t\tvar regLo = Sweep.regionBelow(regUp);\r\n\t\tvar eUp = regUp.eUp;\r\n\t\tvar eLo = regLo.eUp;\r\n\t\tvar e;\r\n\r\n\t\tassert(!Geom.vertEq(eUp.Dst, eLo.Dst));\r\n\r\n\t\tif (Geom.vertLeq(eUp.Dst, eLo.Dst)) {\r\n\t\t\tif (Geom.edgeSign(eUp.Dst, eLo.Dst, eUp.Org) < 0) return false;\r\n\r\n\t\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\r\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\t\te = tess.mesh.splitEdge(eUp);\r\n\t\t\ttess.mesh.splice(eLo.Sym, e);\r\n\t\t\te.Lface.inside = regUp.inside;\r\n\t\t} else {\r\n\t\t\tif (Geom.edgeSign(eLo.Dst, eUp.Dst, eLo.Org) > 0) return false;\r\n\r\n\t\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\r\n\t\t\tregUp.dirty = regLo.dirty = true;\r\n\t\t\te = tess.mesh.splitEdge(eLo);\r\n\t\t\ttess.mesh.splice(eUp.Lnext, eLo.Sym);\r\n\t\t\te.Rface.inside = regUp.inside;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\r\n\tstatic checkForIntersect(tess, regUp) {\r\n\t\t/*\r\n\t\t * Check the upper and lower edges of the given region to see if\r\n\t\t * they intersect.  If so, create the intersection and add it\r\n\t\t * to the data structures.\r\n\t\t *\r\n\t\t * Returns TRUE if adding the new intersection resulted in a recursive\r\n\t\t * call to AddRightEdges(); in this case all \"dirty\" regions have been\r\n\t\t * checked for intersections, and possibly regUp has been deleted.\r\n\t\t */\r\n\t\tvar regLo = Sweep.regionBelow(regUp);\r\n\t\tvar eUp = regUp.eUp;\r\n\t\tvar eLo = regLo.eUp;\r\n\t\tvar orgUp = eUp.Org;\r\n\t\tvar orgLo = eLo.Org;\r\n\t\tvar dstUp = eUp.Dst;\r\n\t\tvar dstLo = eLo.Dst;\r\n\t\tvar tMinUp, tMaxLo;\r\n\t\tvar isect = new TESSvertex(),\r\n\t\t\torgMin;\r\n\t\tvar e;\r\n\r\n\t\tassert(!Geom.vertEq(dstLo, dstUp));\r\n\t\tassert(Geom.edgeSign(dstUp, tess.event, orgUp) <= 0);\r\n\t\tassert(Geom.edgeSign(dstLo, tess.event, orgLo) >= 0);\r\n\t\tassert(orgUp !== tess.event && orgLo !== tess.event);\r\n\t\tassert(!regUp.fixUpperEdge && !regLo.fixUpperEdge);\r\n\r\n\t\tif (orgUp === orgLo) return false; /* right endpoints are the same */\r\n\r\n\t\ttMinUp = Math.min(orgUp.t, dstUp.t);\r\n\t\ttMaxLo = Math.max(orgLo.t, dstLo.t);\r\n\t\tif (tMinUp > tMaxLo) return false; /* t ranges do not overlap */\r\n\r\n\t\tif (Geom.vertLeq(orgUp, orgLo)) {\r\n\t\t\tif (Geom.edgeSign(dstLo, orgUp, orgLo) > 0) return false;\r\n\t\t} else {\r\n\t\t\tif (Geom.edgeSign(dstUp, orgLo, orgUp) < 0) return false;\r\n\t\t}\r\n\r\n\t\t/* At this point the edges intersect, at least marginally */\r\n\t\tSweep.debugEvent(tess);\r\n\r\n\t\tGeom.intersect(dstUp, orgUp, dstLo, orgLo, isect);\r\n\t\t/* The following properties are guaranteed: */\r\n\t\tassert(Math.min(orgUp.t, dstUp.t) <= isect.t);\r\n\t\tassert(isect.t <= Math.max(orgLo.t, dstLo.t));\r\n\t\tassert(Math.min(dstLo.s, dstUp.s) <= isect.s);\r\n\t\tassert(isect.s <= Math.max(orgLo.s, orgUp.s));\r\n\r\n\t\tif (Geom.vertLeq(isect, tess.event)) {\r\n\t\t\t/* The intersection point lies slightly to the left of the sweep line,\r\n\t\t\t * so move it until it''s slightly to the right of the sweep line.\r\n\t\t\t * (If we had perfect numerical precision, this would never happen\r\n\t\t\t * in the first place).  The easiest and safest thing to do is\r\n\t\t\t * replace the intersection by tess->event.\r\n\t\t\t */\r\n\t\t\tisect.s = tess.event.s;\r\n\t\t\tisect.t = tess.event.t;\r\n\t\t}\r\n\t\t/* Similarly, if the computed intersection lies to the right of the\r\n\t\t * rightmost origin (which should rarely happen), it can cause\r\n\t\t * unbelievable inefficiency on sufficiently degenerate inputs.\r\n\t\t * (If you have the test program, try running test54.d with the\r\n\t\t * \"X zoom\" option turned on).\r\n\t\t */\r\n\t\torgMin = Geom.vertLeq(orgUp, orgLo) ? orgUp : orgLo;\r\n\t\tif (Geom.vertLeq(orgMin, isect)) {\r\n\t\t\tisect.s = orgMin.s;\r\n\t\t\tisect.t = orgMin.t;\r\n\t\t}\r\n\r\n\t\tif (Geom.vertEq(isect, orgUp) || Geom.vertEq(isect, orgLo)) {\r\n\t\t\t/* Easy case -- intersection at one of the right endpoints */\r\n\t\t\tSweep.checkForRightSplice(tess, regUp);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\t(!Geom.vertEq(dstUp, tess.event) &&\r\n\t\t\t\tGeom.edgeSign(dstUp, tess.event, isect) >= 0) ||\r\n\t\t\t(!Geom.vertEq(dstLo, tess.event) &&\r\n\t\t\t\tGeom.edgeSign(dstLo, tess.event, isect) <= 0)\r\n\t\t) {\r\n\t\t\t/* Very unusual -- the new upper or lower edge would pass on the\r\n\t\t\t * wrong side of the sweep event, or through it.  This can happen\r\n\t\t\t * due to very small numerical errors in the intersection calculation.\r\n\t\t\t */\r\n\t\t\tif (dstLo === tess.event) {\r\n\t\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\r\n\t\t\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\t\t\ttess.mesh.splice(eLo.Sym, eUp);\r\n\t\t\t\tregUp = Sweep.topLeftRegion(tess, regUp);\r\n\t\t\t\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\r\n\t\t\t\teUp = Sweep.regionBelow(regUp).eUp;\r\n\t\t\t\tSweep.finishLeftRegions(tess, Sweep.regionBelow(regUp), regLo);\r\n\t\t\t\tSweep.addRightEdges(tess, regUp, eUp.Oprev, eUp, eUp, true);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (dstUp === tess.event) {\r\n\t\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\r\n\t\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\t\ttess.mesh.splice(eUp.Lnext, eLo.Oprev);\r\n\t\t\t\tregLo = regUp;\r\n\t\t\t\tregUp = Sweep.topRightRegion(regUp);\r\n\t\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\r\n\t\t\t\tregLo.eUp = eLo.Oprev;\r\n\t\t\t\teLo = Sweep.finishLeftRegions(tess, regLo, null);\r\n\t\t\t\tSweep.addRightEdges(tess, regUp, eLo.Onext, eUp.Rprev, e, true);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t/* Special case: called from ConnectRightVertex.  If either\r\n\t\t\t * edge passes on the wrong side of tess->event, split it\r\n\t\t\t * (and wait for ConnectRightVertex to splice it appropriately).\r\n\t\t\t */\r\n\t\t\tif (Geom.edgeSign(dstUp, tess.event, isect) >= 0) {\r\n\t\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\t\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\t\t\teUp.Org.s = tess.event.s;\r\n\t\t\t\teUp.Org.t = tess.event.t;\r\n\t\t\t}\r\n\t\t\tif (Geom.edgeSign(dstLo, tess.event, isect) <= 0) {\r\n\t\t\t\tregUp.dirty = regLo.dirty = true;\r\n\t\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\t\teLo.Org.s = tess.event.s;\r\n\t\t\t\teLo.Org.t = tess.event.t;\r\n\t\t\t}\r\n\t\t\t/* leave the rest for ConnectRightVertex */\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t/* General case -- split both edges, splice into new vertex.\r\n\t\t * When we do the splice operation, the order of the arguments is\r\n\t\t * arbitrary as far as correctness goes.  However, when the operation\r\n\t\t * creates a new face, the work done is proportional to the size of\r\n\t\t * the new face.  We expect the faces in the processed part of\r\n\t\t * the mesh (ie. eUp->Lface) to be smaller than the faces in the\r\n\t\t * unprocessed original contours (which will be eLo->Oprev->Lface).\r\n\t\t */\r\n\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\ttess.mesh.splice(eLo.Oprev, eUp);\r\n\t\teUp.Org.s = isect.s;\r\n\t\teUp.Org.t = isect.t;\r\n\t\teUp.Org.pqHandle = tess.pq.insert(eUp.Org);\r\n\t\tSweep.getIntersectData(tess, eUp.Org, orgUp, dstUp, orgLo, dstLo);\r\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\r\n\t\treturn false;\r\n\t}\r\n\r\n\t//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\r\n\tstatic walkDirtyRegions(tess, regUp) {\r\n\t\t/*\r\n\t\t * When the upper or lower edge of any region changes, the region is\r\n\t\t * marked \"dirty\".  This routine walks through all the dirty regions\r\n\t\t * and makes sure that the dictionary invariants are satisfied\r\n\t\t * (see the comments at the beginning of this file).  Of course\r\n\t\t * new dirty regions can be created as we make changes to restore\r\n\t\t * the invariants.\r\n\t\t */\r\n\t\tvar regLo = Sweep.regionBelow(regUp);\r\n\t\tvar eUp, eLo;\r\n\r\n\t\tfor (;;) {\r\n\t\t\t/* Find the lowest dirty region (we walk from the bottom up). */\r\n\t\t\twhile (regLo.dirty) {\r\n\t\t\t\tregUp = regLo;\r\n\t\t\t\tregLo = Sweep.regionBelow(regLo);\r\n\t\t\t}\r\n\t\t\tif (!regUp.dirty) {\r\n\t\t\t\tregLo = regUp;\r\n\t\t\t\tregUp = Sweep.regionAbove(regUp);\r\n\t\t\t\tif (regUp === null || !regUp.dirty) {\r\n\t\t\t\t\t/* We've walked all the dirty regions */\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tregUp.dirty = false;\r\n\t\t\teUp = regUp.eUp;\r\n\t\t\teLo = regLo.eUp;\r\n\r\n\t\t\tif (eUp.Dst !== eLo.Dst) {\r\n\t\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\r\n\t\t\t\tif (Sweep.checkForLeftSplice(tess, regUp)) {\r\n\t\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\r\n\t\t\t\t\t * we no longer need it (since these edges are needed only for\r\n\t\t\t\t\t * vertices which otherwise have no right-going edges).\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (regLo.fixUpperEdge) {\r\n\t\t\t\t\t\tSweep.deleteRegion(tess, regLo);\r\n\t\t\t\t\t\ttess.mesh.delete(eLo);\r\n\t\t\t\t\t\tregLo = Sweep.regionBelow(regUp);\r\n\t\t\t\t\t\teLo = regLo.eUp;\r\n\t\t\t\t\t} else if (regUp.fixUpperEdge) {\r\n\t\t\t\t\t\tSweep.deleteRegion(tess, regUp);\r\n\t\t\t\t\t\ttess.mesh.delete(eUp);\r\n\t\t\t\t\t\tregUp = Sweep.regionAbove(regLo);\r\n\t\t\t\t\t\teUp = regUp.eUp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (eUp.Org !== eLo.Org) {\r\n\t\t\t\tif (\r\n\t\t\t\t\teUp.Dst !== eLo.Dst &&\r\n\t\t\t\t\t!regUp.fixUpperEdge &&\r\n\t\t\t\t\t!regLo.fixUpperEdge &&\r\n\t\t\t\t\t(eUp.Dst === tess.event || eLo.Dst === tess.event)\r\n\t\t\t\t) {\r\n\t\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\r\n\t\t\t\t\t * as the intersection location.  To make this possible, it requires\r\n\t\t\t\t\t * that tess->event lie between the upper and lower edges, and also\r\n\t\t\t\t\t * that neither of these is marked fixUpperEdge (since in the worst\r\n\t\t\t\t\t * case it might splice one of these edges into tess->event, and\r\n\t\t\t\t\t * violate the invariant that fixable edges are the only right-going\r\n\t\t\t\t\t * edge from their associated vertex).\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (Sweep.checkForIntersect(tess, regUp)) {\r\n\t\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\r\n\t\t\t\t\t * may violate the dictionary edge ordering.  Check and correct this.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tSweep.checkForRightSplice(tess, regUp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (eUp.Org === eLo.Org && eUp.Dst === eLo.Dst) {\r\n\t\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\r\n\t\t\t\tSweep.addWinding(eLo, eUp);\r\n\t\t\t\tSweep.deleteRegion(tess, regUp);\r\n\t\t\t\ttess.mesh.delete(eUp);\r\n\t\t\t\tregUp = Sweep.regionAbove(regLo);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\r\n\tstatic connectRightVertex(tess, regUp, eBottomLeft) {\r\n\t\t/*\r\n\t\t * Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\r\n\t\t * to the unprocessed portion of the mesh.  Since there are no right-going\r\n\t\t * edges, two regions (one above vEvent and one below) are being merged\r\n\t\t * into one.  \"regUp\" is the upper of these two regions.\r\n\t\t *\r\n\t\t * There are two reasons for doing this (adding a right-going edge):\r\n\t\t *  - if the two regions being merged are \"inside\", we must add an edge\r\n\t\t *    to keep them separated (the combined region would not be monotone).\r\n\t\t *  - in any case, we must leave some record of vEvent in the dictionary,\r\n\t\t *    so that we can merge vEvent with features that we have not seen yet.\r\n\t\t *    For example, maybe there is a vertical edge which passes just to\r\n\t\t *    the right of vEvent; we would like to splice vEvent into this edge.\r\n\t\t *\r\n\t\t * However, we don't want to connect vEvent to just any vertex.  We don''t\r\n\t\t * want the new edge to cross any other edges; otherwise we will create\r\n\t\t * intersection vertices even when the input data had no self-intersections.\r\n\t\t * (This is a bad thing; if the user's input data has no intersections,\r\n\t\t * we don't want to generate any false intersections ourselves.)\r\n\t\t *\r\n\t\t * Our eventual goal is to connect vEvent to the leftmost unprocessed\r\n\t\t * vertex of the combined region (the union of regUp and regLo).\r\n\t\t * But because of unseen vertices with all right-going edges, and also\r\n\t\t * new vertices which may be created by edge intersections, we don''t\r\n\t\t * know where that leftmost unprocessed vertex is.  In the meantime, we\r\n\t\t * connect vEvent to the closest vertex of either chain, and mark the region\r\n\t\t * as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\r\n\t\t * to the next processed vertex on the boundary of the combined region.\r\n\t\t * Quite possibly the vertex we connected to will turn out to be the\r\n\t\t * closest one, in which case we won''t need to make any changes.\r\n\t\t */\r\n\t\tvar eNew;\r\n\t\tvar eTopLeft = eBottomLeft.Onext;\r\n\t\tvar regLo = Sweep.regionBelow(regUp);\r\n\t\tvar eUp = regUp.eUp;\r\n\t\tvar eLo = regLo.eUp;\r\n\t\tvar degenerate = false;\r\n\r\n\t\tif (eUp.Dst !== eLo.Dst) {\r\n\t\t\tSweep.checkForIntersect(tess, regUp);\r\n\t\t}\r\n\r\n\t\t/* Possible new degeneracies: upper or lower edge of regUp may pass\r\n\t\t * through vEvent, or may coincide with new intersection vertex\r\n\t\t */\r\n\t\tif (Geom.vertEq(eUp.Org, tess.event)) {\r\n\t\t\ttess.mesh.splice(eTopLeft.Oprev, eUp);\r\n\t\t\tregUp = Sweep.topLeftRegion(tess, regUp);\r\n\t\t\teTopLeft = Sweep.regionBelow(regUp).eUp;\r\n\t\t\tSweep.finishLeftRegions(tess, Sweep.regionBelow(regUp), regLo);\r\n\t\t\tdegenerate = true;\r\n\t\t}\r\n\t\tif (Geom.vertEq(eLo.Org, tess.event)) {\r\n\t\t\ttess.mesh.splice(eBottomLeft, eLo.Oprev);\r\n\t\t\teBottomLeft = Sweep.finishLeftRegions(tess, regLo, null);\r\n\t\t\tdegenerate = true;\r\n\t\t}\r\n\t\tif (degenerate) {\r\n\t\t\tSweep.addRightEdges(\r\n\t\t\t\ttess,\r\n\t\t\t\tregUp,\r\n\t\t\t\teBottomLeft.Onext,\r\n\t\t\t\teTopLeft,\r\n\t\t\t\teTopLeft,\r\n\t\t\t\ttrue,\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\r\n\t\t * Connect to the closer of eLo->Org, eUp->Org.\r\n\t\t */\r\n\t\tif (Geom.vertLeq(eLo.Org, eUp.Org)) {\r\n\t\t\teNew = eLo.Oprev;\r\n\t\t} else {\r\n\t\t\teNew = eUp;\r\n\t\t}\r\n\t\teNew = tess.mesh.connect(eBottomLeft.Lprev, eNew);\r\n\r\n\t\t/* Prevent cleanup, otherwise eNew might disappear before we've even\r\n\t\t * had a chance to mark it as a temporary edge.\r\n\t\t */\r\n\t\tSweep.addRightEdges(tess, regUp, eNew, eNew.Onext, eNew.Onext, false);\r\n\t\teNew.Sym.activeRegion.fixUpperEdge = true;\r\n\t\tSweep.walkDirtyRegions(tess, regUp);\r\n\t}\r\n\r\n\t/* Because vertices at exactly the same location are merged together\r\n\t * before we process the sweep event, some degenerate cases can't occur.\r\n\t * However if someone eventually makes the modifications required to\r\n\t * merge features which are close together, the cases below marked\r\n\t * TOLERANCE_NONZERO will be useful.  They were debugged before the\r\n\t * code to merge identical vertices in the main loop was added.\r\n\t */\r\n\t//#define TOLERANCE_NONZERO\tFALSE\r\n\r\n\t//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\r\n\tstatic connectLeftDegenerate(tess, regUp, vEvent) {\r\n\t\t/*\r\n\t\t * The event vertex lies exacty on an already-processed edge or vertex.\r\n\t\t * Adding the new vertex involves splicing it into the already-processed\r\n\t\t * part of the mesh.\r\n\t\t */\r\n\t\tvar e, eTopLeft, eTopRight, eLast;\r\n\t\tvar reg;\r\n\r\n\t\te = regUp.eUp;\r\n\t\tif (Geom.vertEq(e.Org, vEvent)) {\r\n\t\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\r\n\t\t\t * for e->Org to be pulled from the queue\r\n\t\t\t */\r\n\t\t\tassert(false /*TOLERANCE_NONZERO*/);\r\n\t\t\tSweep.spliceMergeVertices(tess, e, vEvent.anEdge);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!Geom.vertEq(e.Dst, vEvent)) {\r\n\t\t\t/* General case -- splice vEvent into edge e which passes through it */\r\n\t\t\ttess.mesh.splitEdge(e.Sym);\r\n\t\t\tif (regUp.fixUpperEdge) {\r\n\t\t\t\t/* This edge was fixable -- delete unused portion of original edge */\r\n\t\t\t\ttess.mesh.delete(e.Onext);\r\n\t\t\t\tregUp.fixUpperEdge = false;\r\n\t\t\t}\r\n\t\t\ttess.mesh.splice(vEvent.anEdge, e);\r\n\t\t\tSweep.sweepEvent(tess, vEvent); /* recurse */\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/* vEvent coincides with e->Dst, which has already been processed.\r\n\t\t * Splice in the additional right-going edges.\r\n\t\t */\r\n\t\tassert(false /*TOLERANCE_NONZERO*/);\r\n\t\tregUp = Sweep.topRightRegion(regUp);\r\n\t\treg = Sweep.regionBelow(regUp);\r\n\t\teTopRight = reg.eUp.Sym;\r\n\t\teTopLeft = eLast = eTopRight.Onext;\r\n\t\tif (reg.fixUpperEdge) {\r\n\t\t\t/* Here e->Dst has only a single fixable edge going right.\r\n\t\t\t * We can delete it since now we have some real right-going edges.\r\n\t\t\t */\r\n\t\t\tassert(eTopLeft !== eTopRight); /* there are some left edges too */\r\n\t\t\tSweep.deleteRegion(tess, reg);\r\n\t\t\ttess.mesh.delete(eTopRight);\r\n\t\t\teTopRight = eTopLeft.Oprev;\r\n\t\t}\r\n\t\ttess.mesh.splice(vEvent.anEdge, eTopRight);\r\n\t\tif (!Geom.edgeGoesLeft(eTopLeft)) {\r\n\t\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\r\n\t\t\teTopLeft = null;\r\n\t\t}\r\n\t\tSweep.addRightEdges(\r\n\t\t\ttess,\r\n\t\t\tregUp,\r\n\t\t\teTopRight.Onext,\r\n\t\t\teLast,\r\n\t\t\teTopLeft,\r\n\t\t\ttrue,\r\n\t\t);\r\n\t}\r\n\r\n\t//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\r\n\tstatic connectLeftVertex(tess, vEvent) {\r\n\t\t/*\r\n\t\t * Purpose: connect a \"left\" vertex (one where both edges go right)\r\n\t\t * to the processed portion of the mesh.  Let R be the active region\r\n\t\t * containing vEvent, and let U and L be the upper and lower edge\r\n\t\t * chains of R.  There are two possibilities:\r\n\t\t *\r\n\t\t * - the normal case: split R into two regions, by connecting vEvent to\r\n\t\t *   the rightmost vertex of U or L lying to the left of the sweep line\r\n\t\t *\r\n\t\t * - the degenerate case: if vEvent is close enough to U or L, we\r\n\t\t *   merge vEvent into that edge chain.  The subcases are:\r\n\t\t *\t- merging with the rightmost vertex of U or L\r\n\t\t *\t- merging with the active edge of U or L\r\n\t\t *\t- merging with an already-processed portion of U or L\r\n\t\t */\r\n\t\tvar regUp, regLo, reg;\r\n\t\tvar eUp, eLo, eNew;\r\n\t\tvar tmp = new ActiveRegion();\r\n\r\n\t\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\r\n\r\n\t\t/* Get a pointer to the active region containing vEvent */\r\n\t\ttmp.eUp = vEvent.anEdge.Sym; /* tessDictListSearch */\r\n\t\t/* __GL_DICTLISTKEY */ regUp = tess.dict.search(tmp).key;\r\n\t\tregLo = Sweep.regionBelow(regUp);\r\n\t\tif (!regLo) {\r\n\t\t\t// This may happen if the input polygon is coplanar.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\teUp = regUp.eUp;\r\n\t\teLo = regLo.eUp;\r\n\r\n\t\t/* Try merging with U or L first */\r\n\t\tif (Geom.edgeSign(eUp.Dst, vEvent, eUp.Org) === 0.0) {\r\n\t\t\tSweep.connectLeftDegenerate(tess, regUp, vEvent);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/* Connect vEvent to rightmost processed vertex of either chain.\r\n\t\t * e->Dst is the vertex that we will connect to vEvent.\r\n\t\t */\r\n\t\treg = Geom.vertLeq(eLo.Dst, eUp.Dst) ? regUp : regLo;\r\n\r\n\t\tif (regUp.inside || reg.fixUpperEdge) {\r\n\t\t\tif (reg === regUp) {\r\n\t\t\t\teNew = tess.mesh.connect(vEvent.anEdge.Sym, eUp.Lnext);\r\n\t\t\t} else {\r\n\t\t\t\tvar tempHalfEdge = tess.mesh.connect(eLo.Dnext, vEvent.anEdge);\r\n\t\t\t\teNew = tempHalfEdge.Sym;\r\n\t\t\t}\r\n\t\t\tif (reg.fixUpperEdge) {\r\n\t\t\t\tSweep.fixUpperEdge(tess, reg, eNew);\r\n\t\t\t} else {\r\n\t\t\t\tSweep.computeWinding(\r\n\t\t\t\t\ttess,\r\n\t\t\t\t\tSweep.addRegionBelow(tess, regUp, eNew),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tSweep.sweepEvent(tess, vEvent);\r\n\t\t} else {\r\n\t\t\t/* The new vertex is in a region which does not belong to the polygon.\r\n\t\t\t * We don''t need to connect this vertex to the rest of the mesh.\r\n\t\t\t */\r\n\t\t\tSweep.addRightEdges(\r\n\t\t\t\ttess,\r\n\t\t\t\tregUp,\r\n\t\t\t\tvEvent.anEdge,\r\n\t\t\t\tvEvent.anEdge,\r\n\t\t\t\tnull,\r\n\t\t\t\ttrue,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\r\n\tstatic sweepEvent(tess, vEvent) {\r\n\t\t/*\r\n\t\t * Does everything necessary when the sweep line crosses a vertex.\r\n\t\t * Updates the mesh and the edge dictionary.\r\n\t\t */\r\n\r\n\t\ttess.event = vEvent; /* for access in EdgeLeq() */\r\n\t\tSweep.debugEvent(tess);\r\n\r\n\t\t/* Check if this vertex is the right endpoint of an edge that is\r\n\t\t * already in the dictionary.  In this case we don't need to waste\r\n\t\t * time searching for the location to insert new edges.\r\n\t\t */\r\n\t\tvar e = vEvent.anEdge;\r\n\t\twhile (e.activeRegion === null) {\r\n\t\t\te = e.Onext;\r\n\t\t\tif (e === vEvent.anEdge) {\r\n\t\t\t\t/* All edges go right -- not incident to any processed edges */\r\n\t\t\t\tSweep.connectLeftVertex(tess, vEvent);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Processing consists of two phases: first we \"finish\" all the\r\n\t\t * active regions where both the upper and lower edges terminate\r\n\t\t * at vEvent (ie. vEvent is closing off these regions).\r\n\t\t * We mark these faces \"inside\" or \"outside\" the polygon according\r\n\t\t * to their winding number, and delete the edges from the dictionary.\r\n\t\t * This takes care of all the left-going edges from vEvent.\r\n\t\t */\r\n\t\tvar regUp = Sweep.topLeftRegion(tess, e.activeRegion);\r\n\t\tassert(regUp !== null);\r\n\t\t//\tif (regUp == NULL) longjmp(tess->env,1);\r\n\t\tvar reg = Sweep.regionBelow(regUp);\r\n\t\tvar eTopLeft = reg.eUp;\r\n\t\tvar eBottomLeft = Sweep.finishLeftRegions(tess, reg, null);\r\n\r\n\t\t/* Next we process all the right-going edges from vEvent.  This\r\n\t\t * involves adding the edges to the dictionary, and creating the\r\n\t\t * associated \"active regions\" which record information about the\r\n\t\t * regions between adjacent dictionary edges.\r\n\t\t */\r\n\t\tif (eBottomLeft.Onext === eTopLeft) {\r\n\t\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\r\n\t\t\tSweep.connectRightVertex(tess, regUp, eBottomLeft);\r\n\t\t} else {\r\n\t\t\tSweep.addRightEdges(\r\n\t\t\t\ttess,\r\n\t\t\t\tregUp,\r\n\t\t\t\teBottomLeft.Onext,\r\n\t\t\t\teTopLeft,\r\n\t\t\t\teTopLeft,\r\n\t\t\t\ttrue,\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/* Make the sentinel coordinates big enough that they will never be\r\n\t * merged with real input features.\r\n\t */\r\n\r\n\t//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\r\n\tstatic addSentinel(tess, smin, smax, t) {\r\n\t\t/*\r\n\t\t * We add two sentinel edges above and below all other edges,\r\n\t\t * to avoid special cases at the top and bottom.\r\n\t\t */\r\n\t\tvar reg = new ActiveRegion();\r\n\t\tvar e = tess.mesh.makeEdge();\r\n\t\t//\tif (e == NULL) longjmp(tess->env,1);\r\n\r\n\t\te.Org.s = smax;\r\n\t\te.Org.t = t;\r\n\t\te.Dst.s = smin;\r\n\t\te.Dst.t = t;\r\n\t\ttess.event = e.Dst; /* initialize it */\r\n\r\n\t\treg.eUp = e;\r\n\t\treg.windingNumber = 0;\r\n\t\treg.inside = false;\r\n\t\treg.fixUpperEdge = false;\r\n\t\treg.sentinel = true;\r\n\t\treg.dirty = false;\r\n\t\treg.nodeUp = tess.dict.insert(reg);\r\n\t\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\r\n\t}\r\n\r\n\t//static void InitEdgeDict( TESStesselator *tess )\r\n\tstatic initEdgeDict(tess) {\r\n\t\t/*\r\n\t\t * We maintain an ordering of edge intersections with the sweep line.\r\n\t\t * This order is maintained in a dynamic dictionary.\r\n\t\t */\r\n\t\ttess.dict = new Dict(tess, Sweep.edgeLeq);\r\n\t\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\r\n\r\n\t\tvar w = tess.bmax[0] - tess.bmin[0];\r\n\t\tvar h = tess.bmax[1] - tess.bmin[1];\r\n\r\n\t\tvar smin = tess.bmin[0] - w;\r\n\t\tvar smax = tess.bmax[0] + w;\r\n\t\tvar tmin = tess.bmin[1] - h;\r\n\t\tvar tmax = tess.bmax[1] + h;\r\n\r\n\t\tSweep.addSentinel(tess, smin, smax, tmin);\r\n\t\tSweep.addSentinel(tess, smin, smax, tmax);\r\n\t}\r\n\r\n\tstatic doneEdgeDict(tess) {\r\n\t\tvar reg;\r\n\t\tvar fixedEdges = 0;\r\n\r\n\t\twhile ((reg = tess.dict.min().key) !== null) {\r\n\t\t\t/*\r\n\t\t\t * At the end of all processing, the dictionary should contain\r\n\t\t\t * only the two sentinel edges, plus at most one \"fixable\" edge\r\n\t\t\t * created by ConnectRightVertex().\r\n\t\t\t */\r\n\t\t\tif (!reg.sentinel) {\r\n\t\t\t\tassert(reg.fixUpperEdge);\r\n\t\t\t\tassert(++fixedEdges === 1);\r\n\t\t\t}\r\n\t\t\tassert(reg.windingNumber === 0);\r\n\t\t\tSweep.deleteRegion(tess, reg);\r\n\t\t\t/*    tessMeshDelete( reg->eUp );*/\r\n\t\t}\r\n\t\t//\tdictDeleteDict( &tess->alloc, tess->dict );\r\n\t}\r\n\r\n\tstatic removeDegenerateEdges(tess) {\r\n\t\t/*\r\n\t\t * Remove zero-length edges, and contours with fewer than 3 vertices.\r\n\t\t */\r\n\t\tvar e, eNext, eLnext;\r\n\t\tvar eHead = tess.mesh.eHead;\r\n\r\n\t\t/*LINTED*/\r\n\t\tfor (e = eHead.next; e !== eHead; e = eNext) {\r\n\t\t\teNext = e.next;\r\n\t\t\teLnext = e.Lnext;\r\n\r\n\t\t\tif (Geom.vertEq(e.Org, e.Dst) && e.Lnext.Lnext !== e) {\r\n\t\t\t\t/* Zero-length edge, contour has at least 3 edges */\r\n\t\t\t\tSweep.spliceMergeVertices(tess, eLnext, e); /* deletes e->Org */\r\n\t\t\t\ttess.mesh.delete(e); /* e is a self-loop */\r\n\t\t\t\te = eLnext;\r\n\t\t\t\teLnext = e.Lnext;\r\n\t\t\t}\r\n\t\t\tif (eLnext.Lnext === e) {\r\n\t\t\t\t/* Degenerate contour (one or two edges) */\r\n\t\t\t\tif (eLnext !== e) {\r\n\t\t\t\t\tif (eLnext === eNext || eLnext === eNext.Sym) {\r\n\t\t\t\t\t\teNext = eNext.next;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttess.mesh.delete(eLnext);\r\n\t\t\t\t}\r\n\t\t\t\tif (e === eNext || e === eNext.Sym) {\r\n\t\t\t\t\teNext = eNext.next;\r\n\t\t\t\t}\r\n\t\t\t\ttess.mesh.delete(e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstatic initPriorityQ(tess) {\r\n\t\t/*\r\n\t\t * Insert all vertices into the priority queue which determines the\r\n\t\t * order in which vertices cross the sweep line.\r\n\t\t */\r\n\t\tvar pq;\r\n\t\tvar v, vHead;\r\n\t\tvar vertexCount = 0;\r\n\r\n\t\tvHead = tess.mesh.vHead;\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\tvertexCount++;\r\n\t\t}\r\n\t\t/* Make sure there is enough space for sentinels. */\r\n\t\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\r\n\r\n\t\tpq = tess.pq = new PriorityQ(vertexCount, Geom.vertLeq);\r\n\t\t//\tif (pq == NULL) return 0;\r\n\r\n\t\tvHead = tess.mesh.vHead;\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\tv.pqHandle = pq.insert(v);\r\n\t\t\t//\t\tif (v.pqHandle == INV_HANDLE)\r\n\t\t\t//\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (v !== vHead) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tpq.init();\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tstatic donePriorityQ(tess) {\r\n\t\ttess.pq = null;\r\n\t}\r\n\r\n\tstatic removeDegenerateFaces(tess, mesh) {\r\n\t\t/*\r\n\t\t * Delete any degenerate faces with only two edges.  WalkDirtyRegions()\r\n\t\t * will catch almost all of these, but it won't catch degenerate faces\r\n\t\t * produced by splice operations on already-processed edges.\r\n\t\t * The two places this can happen are in FinishLeftRegions(), when\r\n\t\t * we splice in a \"temporary\" edge produced by ConnectRightVertex(),\r\n\t\t * and in CheckForLeftSplice(), where we splice already-processed\r\n\t\t * edges to ensure that our dictionary invariants are not violated\r\n\t\t * by numerical errors.\r\n\t\t *\r\n\t\t * In both these cases it is *very* dangerous to delete the offending\r\n\t\t * edge at the time, since one of the routines further up the stack\r\n\t\t * will sometimes be keeping a pointer to that edge.\r\n\t\t */\r\n\t\tvar f, fNext;\r\n\t\tvar e;\r\n\r\n\t\t/*LINTED*/\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = fNext) {\r\n\t\t\tfNext = f.next;\r\n\t\t\te = f.anEdge;\r\n\t\t\tassert(e.Lnext !== e);\r\n\r\n\t\t\tif (e.Lnext.Lnext === e) {\r\n\t\t\t\t/* A face with only two edges */\r\n\t\t\t\tSweep.addWinding(e.Onext, e);\r\n\t\t\t\ttess.mesh.delete(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tstatic computeInterior(tess) {\r\n\t\t/*\r\n\t\t * tessComputeInterior( tess ) computes the planar arrangement specified\r\n\t\t * by the given contours, and further subdivides this arrangement\r\n\t\t * into regions.  Each region is marked \"inside\" if it belongs\r\n\t\t * to the polygon, according to the rule given by tess->windingRule.\r\n\t\t * Each interior region is guaranteed be monotone.\r\n\t\t */\r\n\t\tvar v, vNext;\r\n\r\n\t\t/* Each vertex defines an event for our sweep line.  Start by inserting\r\n\t\t * all the vertices in a priority queue.  Events are processed in\r\n\t\t * lexicographic order, ie.\r\n\t\t *\r\n\t\t *\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\r\n\t\t */\r\n\t\tSweep.removeDegenerateEdges(tess);\r\n\t\tif (!Sweep.initPriorityQ(tess)) return false; /* if error */\r\n\t\tSweep.initEdgeDict(tess);\r\n\r\n\t\twhile ((v = tess.pq.extractMin()) !== null) {\r\n\t\t\tfor (;;) {\r\n\t\t\t\tvNext = tess.pq.min();\r\n\t\t\t\tif (vNext === null || !Geom.vertEq(vNext, v)) break;\r\n\r\n\t\t\t\t/* Merge together all vertices at exactly the same location.\r\n\t\t\t\t * This is more efficient than processing them one at a time,\r\n\t\t\t\t * simplifies the code (see ConnectLeftDegenerate), and is also\r\n\t\t\t\t * important for correct handling of certain degenerate cases.\r\n\t\t\t\t * For example, suppose there are two identical edges A and B\r\n\t\t\t\t * that belong to different contours (so without this code they would\r\n\t\t\t\t * be processed by separate sweep events).  Suppose another edge C\r\n\t\t\t\t * crosses A and B from above.  When A is processed, we split it\r\n\t\t\t\t * at its intersection point with C.  However this also splits C,\r\n\t\t\t\t * so when we insert B we may compute a slightly different\r\n\t\t\t\t * intersection point.  This might leave two edges with a small\r\n\t\t\t\t * gap between them.  This kind of error is especially obvious\r\n\t\t\t\t * when using boundary extraction (TESS_BOUNDARY_ONLY).\r\n\t\t\t\t */\r\n\t\t\t\tvNext = tess.pq.extractMin();\r\n\t\t\t\tSweep.spliceMergeVertices(tess, v.anEdge, vNext.anEdge);\r\n\t\t\t}\r\n\t\t\tSweep.sweepEvent(tess, v);\r\n\t\t}\r\n\r\n\t\t/* Set tess->event for debugging purposes */\r\n\t\ttess.event = tess.dict.min().key.eUp.Org;\r\n\t\tSweep.debugEvent(tess);\r\n\t\tSweep.doneEdgeDict(tess);\r\n\t\tSweep.donePriorityQ(tess);\r\n\r\n\t\tif (!Sweep.removeDegenerateFaces(tess, tess.mesh)) return false;\r\n\t\ttess.mesh.check();\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n"],"names":[],"mappings":"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}
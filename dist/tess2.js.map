{"version":3,"file":"tess2.js","sources":["../src/tess2.js"],"sourcesContent":["/*\r\n ** SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)\r\n ** Copyright (C) [dates of first publication] Silicon Graphics, Inc.\r\n ** All Rights Reserved.\r\n **\r\n ** Permission is hereby granted, free of charge, to any person obtaining a copy\r\n ** of this software and associated documentation files (the \"Software\"), to deal\r\n ** in the Software without restriction, including without limitation the rights\r\n ** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n ** of the Software, and to permit persons to whom the Software is furnished to do so,\r\n ** subject to the following conditions:\r\n **\r\n ** The above copyright notice including the dates of first publication and either this\r\n ** permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be\r\n ** included in all copies or substantial portions of the Software.\r\n **\r\n ** THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n ** INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n ** PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC.\r\n ** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\r\n ** OR OTHER DEALINGS IN THE SOFTWARE.\r\n **\r\n ** Except as contained in this notice, the name of Silicon Graphics, Inc. shall not\r\n ** be used in advertising or otherwise to promote the sale, use or other dealings in\r\n ** this Software without prior written authorization from Silicon Graphics, Inc.\r\n */\r\n/*\r\n ** Author: Mikko Mononen, Aug 2013.\r\n ** TS-version: Timoshenko Konstantin, Mart 2020.\r\n ** The code is based on GLU libtess by Eric Veach, July 1994\r\n */\r\n\r\nimport {WINDING} from \"./constants\";\r\n\r\n\"use strict\";\r\n\r\n/* Public API */\r\n\r\nvar Tess2 = {};\r\nvar Geom = {};\r\n\r\nexport default Tess2;\r\n\r\nTess2.WINDING_ODD = 0;\r\nTess2.WINDING_NONZERO = 1;\r\nTess2.WINDING_POSITIVE = 2;\r\nTess2.WINDING_NEGATIVE = 3;\r\nTess2.WINDING_ABS_GEQ_TWO = 4;\r\n\r\nTess2.POLYGONS = 0;\r\nTess2.CONNECTED_POLYGONS = 1;\r\nTess2.BOUNDARY_CONTOURS = 2;\r\n\r\nTess2.tesselate = function(opts) {\r\n\tvar debug = opts.debug || false;\r\n\tvar tess = new Tesselator();\r\n\tfor (var i = 0; i < opts.contours.length; i++) {\r\n\t\ttess.addContour(opts.vertexSize || 2, opts.contours[i]);\r\n\t}\r\n\ttess.tesselate(\r\n\t\topts.windingRule || Tess2.WINDING_ODD,\r\n\t\topts.elementType || Tess2.POLYGONS,\r\n\t\topts.polySize || 3,\r\n\t\topts.vertexSize || 2,\r\n\t\topts.normal || [0, 0, 1],\r\n\t);\r\n\treturn {\r\n\t\tvertices: tess.vertices,\r\n\t\tvertexIndices: tess.vertexIndices,\r\n\t\tvertexCount: tess.vertexCount,\r\n\t\telements: tess.elements,\r\n\t\telementCount: tess.elementCount,\r\n\t\tmesh: debug ? tess.mesh : undefined,\r\n\t};\r\n};\r\n\r\n/* Internal */\r\n\r\nvar assert = function(cond) {\r\n\tif (!cond) {\r\n\t\tthrow \"Assertion Failed!\";\r\n\t}\r\n};\r\n\r\n/* The mesh structure is similar in spirit, notation, and operations\r\n * to the \"quad-edge\" structure (see L. Guibas and J. Stolfi, Primitives\r\n * for the manipulation of general subdivisions and the computation of\r\n * Voronoi diagrams, ACM Transactions on Graphics, 4(2):74-123, April 1985).\r\n * For a simplified description, see the course notes for CS348a,\r\n * \"Mathematical Foundations of Computer Graphics\", available at the\r\n * Stanford bookstore (and taught during the fall quarter).\r\n * The implementation also borrows a tiny subset of the graph-based approach\r\n * use in Mantyla's Geometric Work Bench (see M. Mantyla, An Introduction\r\n * to Sold Modeling, Computer Science Press, Rockville, Maryland, 1988).\r\n *\r\n * The fundamental data structure is the \"half-edge\".  Two half-edges\r\n * go together to make an edge, but they point in opposite directions.\r\n * Each half-edge has a pointer to its mate (the \"symmetric\" half-edge Sym),\r\n * its origin vertex (Org), the face on its left side (Lface), and the\r\n * adjacent half-edges in the CCW direction around the origin vertex\r\n * (Onext) and around the left face (Lnext).  There is also a \"next\"\r\n * pointer for the global edge list (see below).\r\n *\r\n * The notation used for mesh navigation:\r\n *  Sym   = the mate of a half-edge (same edge, but opposite direction)\r\n *  Onext = edge CCW around origin vertex (keep same origin)\r\n *  Dnext = edge CCW around destination vertex (keep same dest)\r\n *  Lnext = edge CCW around left face (dest becomes new origin)\r\n *  Rnext = edge CCW around right face (origin becomes new dest)\r\n *\r\n * \"prev\" means to substitute CW for CCW in the definitions above.\r\n *\r\n * The mesh keeps global lists of all vertices, faces, and edges,\r\n * stored as doubly-linked circular lists with a dummy header node.\r\n * The mesh stores pointers to these dummy headers (vHead, fHead, eHead).\r\n *\r\n * The circular edge list is special; since half-edges always occur\r\n * in pairs (e and e->Sym), each half-edge stores a pointer in only\r\n * one direction.  Starting at eHead and following the e->next pointers\r\n * will visit each *edge* once (ie. e or e->Sym, but not both).\r\n * e->Sym stores a pointer in the opposite direction, thus it is\r\n * always true that e->Sym->next->Sym->next == e.\r\n *\r\n * Each vertex has a pointer to next and previous vertices in the\r\n * circular list, and a pointer to a half-edge with this vertex as\r\n * the origin (NULL if this is the dummy header).  There is also a\r\n * field \"data\" for client data.\r\n *\r\n * Each face has a pointer to the next and previous faces in the\r\n * circular list, and a pointer to a half-edge with this face as\r\n * the left face (NULL if this is the dummy header).  There is also\r\n * a field \"data\" for client data.\r\n *\r\n * Note that what we call a \"face\" is really a loop; faces may consist\r\n * of more than one loop (ie. not simply connected), but there is no\r\n * record of this in the data structure.  The mesh may consist of\r\n * several disconnected regions, so it may not be possible to visit\r\n * the entire mesh by starting at a half-edge and traversing the edge\r\n * structure.\r\n *\r\n * The mesh does NOT support isolated vertices; a vertex is deleted along\r\n * with its last edge.  Similarly when two faces are merged, one of the\r\n * faces is deleted (see tessMeshDelete below).  For mesh operations,\r\n * all face (loop) and vertex pointers must not be NULL.  However, once\r\n * mesh manipulation is finished, TESSmeshZapFace can be used to delete\r\n * faces of the mesh, one at a time.  All external faces can be \"zapped\"\r\n * before the mesh is returned to the client; then a NULL face indicates\r\n * a region which is not part of the output polygon.\r\n */\r\n\r\nfunction TESSvertex() {\r\n\tthis.next = null; /* next vertex (never NULL) */\r\n\tthis.prev = null; /* previous vertex (never NULL) */\r\n\tthis.anEdge = null; /* a half-edge with this origin */\r\n\r\n\t/* Internal data (keep hidden) */\r\n\tthis.coords = [0, 0, 0]; /* vertex location in 3D */\r\n\tthis.s = 0.0;\r\n\tthis.t = 0.0; /* projection onto the sweep plane */\r\n\tthis.pqHandle = 0; /* to allow deletion from priority queue */\r\n\tthis.n = 0; /* to allow identify unique vertices */\r\n\tthis.idx = 0; /* to allow map result to original verts */\r\n}\r\n\r\nfunction TESSface() {\r\n\tthis.next = null; /* next face (never NULL) */\r\n\tthis.prev = null; /* previous face (never NULL) */\r\n\tthis.anEdge = null; /* a half edge with this left face */\r\n\r\n\t/* Internal data (keep hidden) */\r\n\tthis.trail = null; /* \"stack\" for conversion to strips */\r\n\tthis.n = 0; /* to allow identiy unique faces */\r\n\tthis.marked = false; /* flag for conversion to strips */\r\n\tthis.inside = false; /* this face is in the polygon interior */\r\n}\r\n\r\nfunction TESShalfEdge(side) {\r\n\tthis.next = null; /* doubly-linked list (prev==Sym->next) */\r\n\tthis.Sym = null; /* same edge, opposite direction */\r\n\tthis.Onext = null; /* next edge CCW around origin */\r\n\tthis.Lnext = null; /* next edge CCW around left face */\r\n\tthis.Org = null; /* origin vertex (Overtex too long) */\r\n\tthis.Lface = null; /* left face */\r\n\r\n\t/* Internal data (keep hidden) */\r\n\tthis.activeRegion = null; /* a region with this upper edge (sweep.c) */\r\n\tthis.winding = 0; /* change in winding number when crossing\r\n\t\t\t\t\t\t\t\t\t   from the right face to the left face */\r\n\tthis.side = side;\r\n}\r\n\r\nTESShalfEdge.prototype = {\r\n\tget Rface() {\r\n\t\treturn this.Sym.Lface;\r\n\t},\r\n\tset Rface(v) {\r\n\t\tthis.Sym.Lface = v;\r\n\t},\r\n\tget Dst() {\r\n\t\treturn this.Sym.Org;\r\n\t},\r\n\tset Dst(v) {\r\n\t\tthis.Sym.Org = v;\r\n\t},\r\n\tget Oprev() {\r\n\t\treturn this.Sym.Lnext;\r\n\t},\r\n\tset Oprev(v) {\r\n\t\tthis.Sym.Lnext = v;\r\n\t},\r\n\tget Lprev() {\r\n\t\treturn this.Onext.Sym;\r\n\t},\r\n\tset Lprev(v) {\r\n\t\tthis.Onext.Sym = v;\r\n\t},\r\n\tget Dprev() {\r\n\t\treturn this.Lnext.Sym;\r\n\t},\r\n\tset Dprev(v) {\r\n\t\tthis.Lnext.Sym = v;\r\n\t},\r\n\tget Rprev() {\r\n\t\treturn this.Sym.Onext;\r\n\t},\r\n\tset Rprev(v) {\r\n\t\tthis.Sym.Onext = v;\r\n\t},\r\n\tget Dnext() {\r\n\t\treturn /*this.Rprev*/ this.Sym.Onext.Sym;\r\n\t} /* 3 pointers */,\r\n\tset Dnext(v) {\r\n\t\t/*this.Rprev*/ this.Sym.Onext.Sym = v;\r\n\t} /* 3 pointers */,\r\n\tget Rnext() {\r\n\t\treturn /*this.Oprev*/ this.Sym.Lnext.Sym;\r\n\t} /* 3 pointers */,\r\n\tset Rnext(v) {\r\n\t\t/*this.Oprev*/ this.Sym.Lnext.Sym = v;\r\n\t} /* 3 pointers */,\r\n};\r\n\r\nfunction TESSmesh() {\r\n\tvar v = new TESSvertex();\r\n\tvar f = new TESSface();\r\n\tvar e = new TESShalfEdge(0);\r\n\tvar eSym = new TESShalfEdge(1);\r\n\r\n\tv.next = v.prev = v;\r\n\tv.anEdge = null;\r\n\r\n\tf.next = f.prev = f;\r\n\tf.anEdge = null;\r\n\tf.trail = null;\r\n\tf.marked = false;\r\n\tf.inside = false;\r\n\r\n\te.next = e;\r\n\te.Sym = eSym;\r\n\te.Onext = null;\r\n\te.Lnext = null;\r\n\te.Org = null;\r\n\te.Lface = null;\r\n\te.winding = 0;\r\n\te.activeRegion = null;\r\n\r\n\teSym.next = eSym;\r\n\teSym.Sym = e;\r\n\teSym.Onext = null;\r\n\teSym.Lnext = null;\r\n\teSym.Org = null;\r\n\teSym.Lface = null;\r\n\teSym.winding = 0;\r\n\teSym.activeRegion = null;\r\n\r\n\tthis.vHead = v; /* dummy header for vertex list */\r\n\tthis.fHead = f; /* dummy header for face list */\r\n\tthis.eHead = e; /* dummy header for edge list */\r\n\tthis.eHeadSym = eSym; /* and its symmetric counterpart */\r\n}\r\n\r\n/* The mesh operations below have three motivations: completeness,\r\n * convenience, and efficiency.  The basic mesh operations are MakeEdge,\r\n * Splice, and Delete.  All the other edge operations can be implemented\r\n * in terms of these.  The other operations are provided for convenience\r\n * and/or efficiency.\r\n *\r\n * When a face is split or a vertex is added, they are inserted into the\r\n * global list *before* the existing vertex or face (ie. e->Org or e->Lface).\r\n * This makes it easier to process all vertices or faces in the global lists\r\n * without worrying about processing the same data twice.  As a convenience,\r\n * when a face is split, the \"inside\" flag is copied from the old face.\r\n * Other internal data (v->data, v->activeRegion, f->data, f->marked,\r\n * f->trail, e->winding) is set to zero.\r\n *\r\n * ********************** Basic Edge Operations **************************\r\n *\r\n * tessMeshMakeEdge( mesh ) creates one edge, two vertices, and a loop.\r\n * The loop (face) consists of the two new half-edges.\r\n *\r\n * tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\r\n * mesh connectivity and topology.  It changes the mesh so that\r\n *  eOrg->Onext <- OLD( eDst->Onext )\r\n *  eDst->Onext <- OLD( eOrg->Onext )\r\n * where OLD(...) means the value before the meshSplice operation.\r\n *\r\n * This can have two effects on the vertex structure:\r\n *  - if eOrg->Org != eDst->Org, the two vertices are merged together\r\n *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\r\n * In both cases, eDst->Org is changed and eOrg->Org is untouched.\r\n *\r\n * Similarly (and independently) for the face structure,\r\n *  - if eOrg->Lface == eDst->Lface, one loop is split into two\r\n *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\r\n * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\r\n *\r\n * tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\r\n * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\r\n * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\r\n * the newly created loop will contain eDel->Dst.  If the deletion of eDel\r\n * would create isolated vertices, those are deleted as well.\r\n *\r\n * ********************** Other Edge Operations **************************\r\n *\r\n * tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\r\n * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\r\n * eOrg and eNew will have the same left face.\r\n *\r\n * tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\r\n * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\r\n * eOrg and eNew will have the same left face.\r\n *\r\n * tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\r\n * to eDst->Org, and returns the corresponding half-edge eNew.\r\n * If eOrg->Lface == eDst->Lface, this splits one loop into two,\r\n * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\r\n * loops are merged into one, and the loop eDst->Lface is destroyed.\r\n *\r\n * ************************ Other Operations *****************************\r\n *\r\n * tessMeshNewMesh() creates a new mesh with no edges, no vertices,\r\n * and no loops (what we usually call a \"face\").\r\n *\r\n * tessMeshUnion( mesh1, mesh2 ) forms the union of all structures in\r\n * both meshes, and returns the new mesh (the old meshes are destroyed).\r\n *\r\n * tessMeshDeleteMesh( mesh ) will free all storage for any valid mesh.\r\n *\r\n * tessMeshZapFace( fZap ) destroys a face and removes it from the\r\n * global face list.  All edges of fZap will have a NULL pointer as their\r\n * left face.  Any edges which also have a NULL pointer as their right face\r\n * are deleted entirely (along with any isolated vertices this produces).\r\n * An entire mesh can be deleted by zapping its faces, one at a time,\r\n * in any order.  Zapped faces cannot be used in further mesh operations!\r\n *\r\n * tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\r\n */\r\n\r\nTESSmesh.prototype = {\r\n\t/* MakeEdge creates a new pair of half-edges which form their own loop.\r\n\t * No vertex or face structures are allocated, but these must be assigned\r\n\t * before the current edge operation is completed.\r\n\t */\r\n\t//static TESShalfEdge *MakeEdge( TESSmesh* mesh, TESShalfEdge *eNext )\r\n\tmakeEdge_: function(eNext) {\r\n\t\tvar e = new TESShalfEdge(0);\r\n\t\tvar eSym = new TESShalfEdge(1);\r\n\r\n\t\t/* Make sure eNext points to the first edge of the edge pair */\r\n\t\tif (eNext.Sym.side < eNext.side) {\r\n\t\t\teNext = eNext.Sym;\r\n\t\t}\r\n\r\n\t\t/* Insert in circular doubly-linked list before eNext.\r\n\t\t * Note that the prev pointer is stored in Sym->next.\r\n\t\t */\r\n\t\tvar ePrev = eNext.Sym.next;\r\n\t\teSym.next = ePrev;\r\n\t\tePrev.Sym.next = e;\r\n\t\te.next = eNext;\r\n\t\teNext.Sym.next = eSym;\r\n\r\n\t\te.Sym = eSym;\r\n\t\te.Onext = e;\r\n\t\te.Lnext = eSym;\r\n\t\te.Org = null;\r\n\t\te.Lface = null;\r\n\t\te.winding = 0;\r\n\t\te.activeRegion = null;\r\n\r\n\t\teSym.Sym = e;\r\n\t\teSym.Onext = eSym;\r\n\t\teSym.Lnext = e;\r\n\t\teSym.Org = null;\r\n\t\teSym.Lface = null;\r\n\t\teSym.winding = 0;\r\n\t\teSym.activeRegion = null;\r\n\r\n\t\treturn e;\r\n\t},\r\n\r\n\t/* Splice( a, b ) is best described by the Guibas/Stolfi paper or the\r\n\t * CS348a notes (see mesh.h).  Basically it modifies the mesh so that\r\n\t * a->Onext and b->Onext are exchanged.  This can have various effects\r\n\t * depending on whether a and b belong to different face or vertex rings.\r\n\t * For more explanation see tessMeshSplice() below.\r\n\t */\r\n\t// static void Splice( TESShalfEdge *a, TESShalfEdge *b )\r\n\tsplice_: function(a, b) {\r\n\t\tvar aOnext = a.Onext;\r\n\t\tvar bOnext = b.Onext;\r\n\t\taOnext.Sym.Lnext = b;\r\n\t\tbOnext.Sym.Lnext = a;\r\n\t\ta.Onext = bOnext;\r\n\t\tb.Onext = aOnext;\r\n\t},\r\n\r\n\t/* MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the\r\n\t * origin of all edges in the vertex loop to which eOrig belongs. \"vNext\" gives\r\n\t * a place to insert the new vertex in the global vertex list.  We insert\r\n\t * the new vertex *before* vNext so that algorithms which walk the vertex\r\n\t * list will not see the newly created vertices.\r\n\t */\r\n\t//static void MakeVertex( TESSvertex *newVertex, TESShalfEdge *eOrig, TESSvertex *vNext )\r\n\tmakeVertex_: function(newVertex, eOrig, vNext) {\r\n\t\tvar vNew = newVertex;\r\n\t\tassert(vNew !== null);\r\n\r\n\t\t/* insert in circular doubly-linked list before vNext */\r\n\t\tvar vPrev = vNext.prev;\r\n\t\tvNew.prev = vPrev;\r\n\t\tvPrev.next = vNew;\r\n\t\tvNew.next = vNext;\r\n\t\tvNext.prev = vNew;\r\n\r\n\t\tvNew.anEdge = eOrig;\r\n\t\t/* leave coords, s, t undefined */\r\n\r\n\t\t/* fix other edges on this vertex loop */\r\n\t\tvar e = eOrig;\r\n\t\tdo {\r\n\t\t\te.Org = vNew;\r\n\t\t\te = e.Onext;\r\n\t\t} while (e !== eOrig);\r\n\t},\r\n\r\n\t/* MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left\r\n\t * face of all edges in the face loop to which eOrig belongs.  \"fNext\" gives\r\n\t * a place to insert the new face in the global face list.  We insert\r\n\t * the new face *before* fNext so that algorithms which walk the face\r\n\t * list will not see the newly created faces.\r\n\t */\r\n\t// static void MakeFace( TESSface *newFace, TESShalfEdge *eOrig, TESSface *fNext )\r\n\tmakeFace_: function(newFace, eOrig, fNext) {\r\n\t\tvar fNew = newFace;\r\n\t\tassert(fNew !== null);\r\n\r\n\t\t/* insert in circular doubly-linked list before fNext */\r\n\t\tvar fPrev = fNext.prev;\r\n\t\tfNew.prev = fPrev;\r\n\t\tfPrev.next = fNew;\r\n\t\tfNew.next = fNext;\r\n\t\tfNext.prev = fNew;\r\n\r\n\t\tfNew.anEdge = eOrig;\r\n\t\tfNew.trail = null;\r\n\t\tfNew.marked = false;\r\n\r\n\t\t/* The new face is marked \"inside\" if the old one was.  This is a\r\n\t\t * convenience for the common case where a face has been split in two.\r\n\t\t */\r\n\t\tfNew.inside = fNext.inside;\r\n\r\n\t\t/* fix other edges on this face loop */\r\n\t\tvar e = eOrig;\r\n\t\tdo {\r\n\t\t\te.Lface = fNew;\r\n\t\t\te = e.Lnext;\r\n\t\t} while (e !== eOrig);\r\n\t},\r\n\r\n\t/* KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),\r\n\t * and removes from the global edge list.\r\n\t */\r\n\t//static void KillEdge( TESSmesh *mesh, TESShalfEdge *eDel )\r\n\tkillEdge_: function(eDel) {\r\n\t\t/* Half-edges are allocated in pairs, see EdgePair above */\r\n\t\tif (eDel.Sym.side < eDel.side) {\r\n\t\t\teDel = eDel.Sym;\r\n\t\t}\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar eNext = eDel.next;\r\n\t\tvar ePrev = eDel.Sym.next;\r\n\t\teNext.Sym.next = ePrev;\r\n\t\tePrev.Sym.next = eNext;\r\n\t},\r\n\r\n\t/* KillVertex( vDel ) destroys a vertex and removes it from the global\r\n\t * vertex list.  It updates the vertex loop to point to a given new vertex.\r\n\t */\r\n\t//static void KillVertex( TESSmesh *mesh, TESSvertex *vDel, TESSvertex *newOrg )\r\n\tkillVertex_: function(vDel, newOrg) {\r\n\t\tvar eStart = vDel.anEdge;\r\n\t\t/* change the origin of all affected edges */\r\n\t\tvar e = eStart;\r\n\t\tdo {\r\n\t\t\te.Org = newOrg;\r\n\t\t\te = e.Onext;\r\n\t\t} while (e !== eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar vPrev = vDel.prev;\r\n\t\tvar vNext = vDel.next;\r\n\t\tvNext.prev = vPrev;\r\n\t\tvPrev.next = vNext;\r\n\t},\r\n\r\n\t/* KillFace( fDel ) destroys a face and removes it from the global face\r\n\t * list.  It updates the face loop to point to a given new face.\r\n\t */\r\n\t//static void KillFace( TESSmesh *mesh, TESSface *fDel, TESSface *newLface )\r\n\tkillFace_: function(fDel, newLface) {\r\n\t\tvar eStart = fDel.anEdge;\r\n\r\n\t\t/* change the left face of all affected edges */\r\n\t\tvar e = eStart;\r\n\t\tdo {\r\n\t\t\te.Lface = newLface;\r\n\t\t\te = e.Lnext;\r\n\t\t} while (e !== eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tvar fPrev = fDel.prev;\r\n\t\tvar fNext = fDel.next;\r\n\t\tfNext.prev = fPrev;\r\n\t\tfPrev.next = fNext;\r\n\t},\r\n\r\n\t/****************** Basic Edge Operations **********************/\r\n\r\n\t/* tessMeshMakeEdge creates one edge, two vertices, and a loop (face).\r\n\t * The loop consists of the two new half-edges.\r\n\t */\r\n\t//TESShalfEdge *tessMeshMakeEdge( TESSmesh *mesh )\r\n\tmakeEdge: function() {\r\n\t\tvar newVertex1 = new TESSvertex();\r\n\t\tvar newVertex2 = new TESSvertex();\r\n\t\tvar newFace = new TESSface();\r\n\t\tvar e = this.makeEdge_(this.eHead);\r\n\t\tthis.makeVertex_(newVertex1, e, this.vHead);\r\n\t\tthis.makeVertex_(newVertex2, e.Sym, this.vHead);\r\n\t\tthis.makeFace_(newFace, e, this.fHead);\r\n\t\treturn e;\r\n\t},\r\n\r\n\t/* tessMeshSplice( eOrg, eDst ) is the basic operation for changing the\r\n\t * mesh connectivity and topology.  It changes the mesh so that\r\n\t *\teOrg->Onext <- OLD( eDst->Onext )\r\n\t *\teDst->Onext <- OLD( eOrg->Onext )\r\n\t * where OLD(...) means the value before the meshSplice operation.\r\n\t *\r\n\t * This can have two effects on the vertex structure:\r\n\t *  - if eOrg->Org != eDst->Org, the two vertices are merged together\r\n\t *  - if eOrg->Org == eDst->Org, the origin is split into two vertices\r\n\t * In both cases, eDst->Org is changed and eOrg->Org is untouched.\r\n\t *\r\n\t * Similarly (and independently) for the face structure,\r\n\t *  - if eOrg->Lface == eDst->Lface, one loop is split into two\r\n\t *  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one\r\n\t * In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.\r\n\t *\r\n\t * Some special cases:\r\n\t * If eDst == eOrg, the operation has no effect.\r\n\t * If eDst == eOrg->Lnext, the new face will have a single edge.\r\n\t * If eDst == eOrg->Lprev, the old face will have a single edge.\r\n\t * If eDst == eOrg->Onext, the new vertex will have a single edge.\r\n\t * If eDst == eOrg->Oprev, the old vertex will have a single edge.\r\n\t */\r\n\t//int tessMeshSplice( TESSmesh* mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst )\r\n\tsplice: function(eOrg, eDst) {\r\n\t\tvar joiningLoops = false;\r\n\t\tvar joiningVertices = false;\r\n\r\n\t\tif (eOrg === eDst) return;\r\n\r\n\t\tif (eDst.Org !== eOrg.Org) {\r\n\t\t\t/* We are merging two disjoint vertices -- destroy eDst->Org */\r\n\t\t\tjoiningVertices = true;\r\n\t\t\tthis.killVertex_(eDst.Org, eOrg.Org);\r\n\t\t}\r\n\t\tif (eDst.Lface !== eOrg.Lface) {\r\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDst.Lface, eOrg.Lface);\r\n\t\t}\r\n\r\n\t\t/* Change the edge structure */\r\n\t\tthis.splice_(eDst, eOrg);\r\n\r\n\t\tif (!joiningVertices) {\r\n\t\t\tvar newVertex = new TESSvertex();\r\n\r\n\t\t\t/* We split one vertex into two -- the new vertex is eDst->Org.\r\n\t\t\t * Make sure the old vertex points to a valid half-edge.\r\n\t\t\t */\r\n\t\t\tthis.makeVertex_(newVertex, eDst, eOrg.Org);\r\n\t\t\teOrg.Org.anEdge = eOrg;\r\n\t\t}\r\n\t\tif (!joiningLoops) {\r\n\t\t\tvar newFace = new TESSface();\r\n\r\n\t\t\t/* We split one loop into two -- the new loop is eDst->Lface.\r\n\t\t\t * Make sure the old face points to a valid half-edge.\r\n\t\t\t */\r\n\t\t\tthis.makeFace_(newFace, eDst, eOrg.Lface);\r\n\t\t\teOrg.Lface.anEdge = eOrg;\r\n\t\t}\r\n\t},\r\n\r\n\t/* tessMeshDelete( eDel ) removes the edge eDel.  There are several cases:\r\n\t * if (eDel->Lface != eDel->Rface), we join two loops into one; the loop\r\n\t * eDel->Lface is deleted.  Otherwise, we are splitting one loop into two;\r\n\t * the newly created loop will contain eDel->Dst.  If the deletion of eDel\r\n\t * would create isolated vertices, those are deleted as well.\r\n\t *\r\n\t * This function could be implemented as two calls to tessMeshSplice\r\n\t * plus a few calls to memFree, but this would allocate and delete\r\n\t * unnecessary vertices and faces.\r\n\t */\r\n\t//int tessMeshDelete( TESSmesh *mesh, TESShalfEdge *eDel )\r\n\tdelete: function(eDel) {\r\n\t\tvar eDelSym = eDel.Sym;\r\n\t\tvar joiningLoops = false;\r\n\r\n\t\t/* First step: disconnect the origin vertex eDel->Org.  We make all\r\n\t\t * changes to get a consistent mesh in this \"intermediate\" state.\r\n\t\t */\r\n\t\tif (eDel.Lface !== eDel.Rface) {\r\n\t\t\t/* We are joining two loops into one -- remove the left face */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDel.Lface, eDel.Rface);\r\n\t\t}\r\n\r\n\t\tif (eDel.Onext === eDel) {\r\n\t\t\tthis.killVertex_(eDel.Org, null);\r\n\t\t} else {\r\n\t\t\t/* Make sure that eDel->Org and eDel->Rface point to valid half-edges */\r\n\t\t\teDel.Rface.anEdge = eDel.Oprev;\r\n\t\t\teDel.Org.anEdge = eDel.Onext;\r\n\r\n\t\t\tthis.splice_(eDel, eDel.Oprev);\r\n\t\t\tif (!joiningLoops) {\r\n\t\t\t\tvar newFace = new TESSface();\r\n\r\n\t\t\t\t/* We are splitting one loop into two -- create a new loop for eDel. */\r\n\t\t\t\tthis.makeFace_(newFace, eDel, eDel.Lface);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Claim: the mesh is now in a consistent state, except that eDel->Org\r\n\t\t * may have been deleted.  Now we disconnect eDel->Dst.\r\n\t\t */\r\n\t\tif (eDelSym.Onext === eDelSym) {\r\n\t\t\tthis.killVertex_(eDelSym.Org, null);\r\n\t\t\tthis.killFace_(eDelSym.Lface, null);\r\n\t\t} else {\r\n\t\t\t/* Make sure that eDel->Dst and eDel->Lface point to valid half-edges */\r\n\t\t\teDel.Lface.anEdge = eDelSym.Oprev;\r\n\t\t\teDelSym.Org.anEdge = eDelSym.Onext;\r\n\t\t\tthis.splice_(eDelSym, eDelSym.Oprev);\r\n\t\t}\r\n\r\n\t\t/* Any isolated vertices or faces have already been freed. */\r\n\t\tthis.killEdge_(eDel);\r\n\t},\r\n\r\n\t/******************** Other Edge Operations **********************/\r\n\r\n\t/* All these routines can be implemented with the basic edge\r\n\t * operations above.  They are provided for convenience and efficiency.\r\n\t */\r\n\r\n\t/* tessMeshAddEdgeVertex( eOrg ) creates a new edge eNew such that\r\n\t * eNew == eOrg->Lnext, and eNew->Dst is a newly created vertex.\r\n\t * eOrg and eNew will have the same left face.\r\n\t */\r\n\t// TESShalfEdge *tessMeshAddEdgeVertex( TESSmesh *mesh, TESShalfEdge *eOrg );\r\n\taddEdgeVertex: function(eOrg) {\r\n\t\tvar eNew = this.makeEdge_(eOrg);\r\n\t\tvar eNewSym = eNew.Sym;\r\n\r\n\t\t/* Connect the new edge appropriately */\r\n\t\tthis.splice_(eNew, eOrg.Lnext);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teNew.Org = eOrg.Dst;\r\n\r\n\t\tvar newVertex = new TESSvertex();\r\n\t\tthis.makeVertex_(newVertex, eNewSym, eNew.Org);\r\n\r\n\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\r\n\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshSplitEdge( eOrg ) splits eOrg into two edges eOrg and eNew,\r\n\t * such that eNew == eOrg->Lnext.  The new vertex is eOrg->Dst == eNew->Org.\r\n\t * eOrg and eNew will have the same left face.\r\n\t */\r\n\t// TESShalfEdge *tessMeshSplitEdge( TESSmesh *mesh, TESShalfEdge *eOrg );\r\n\tsplitEdge: function(eOrg, eDst) {\r\n\t\tvar tempHalfEdge = this.addEdgeVertex(eOrg);\r\n\t\tvar eNew = tempHalfEdge.Sym;\r\n\r\n\t\t/* Disconnect eOrg from eOrg->Dst and connect it to eNew->Org */\r\n\t\tthis.splice_(eOrg.Sym, eOrg.Sym.Oprev);\r\n\t\tthis.splice_(eOrg.Sym, eNew);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teOrg.Dst = eNew.Org;\r\n\t\teNew.Dst.anEdge = eNew.Sym; /* may have pointed to eOrg->Sym */\r\n\t\teNew.Rface = eOrg.Rface;\r\n\t\teNew.winding = eOrg.winding; /* copy old winding information */\r\n\t\teNew.Sym.winding = eOrg.Sym.winding;\r\n\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshConnect( eOrg, eDst ) creates a new edge from eOrg->Dst\r\n\t * to eDst->Org, and returns the corresponding half-edge eNew.\r\n\t * If eOrg->Lface == eDst->Lface, this splits one loop into two,\r\n\t * and the newly created loop is eNew->Lface.  Otherwise, two disjoint\r\n\t * loops are merged into one, and the loop eDst->Lface is destroyed.\r\n\t *\r\n\t * If (eOrg == eDst), the new face will have only two edges.\r\n\t * If (eOrg->Lnext == eDst), the old face is reduced to a single edge.\r\n\t * If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.\r\n\t */\r\n\r\n\t// TESShalfEdge *tessMeshConnect( TESSmesh *mesh, TESShalfEdge *eOrg, TESShalfEdge *eDst );\r\n\tconnect: function(eOrg, eDst) {\r\n\t\tvar joiningLoops = false;\r\n\t\tvar eNew = this.makeEdge_(eOrg);\r\n\t\tvar eNewSym = eNew.Sym;\r\n\r\n\t\tif (eDst.Lface !== eOrg.Lface) {\r\n\t\t\t/* We are connecting two disjoint loops -- destroy eDst->Lface */\r\n\t\t\tjoiningLoops = true;\r\n\t\t\tthis.killFace_(eDst.Lface, eOrg.Lface);\r\n\t\t}\r\n\r\n\t\t/* Connect the new edge appropriately */\r\n\t\tthis.splice_(eNew, eOrg.Lnext);\r\n\t\tthis.splice_(eNewSym, eDst);\r\n\r\n\t\t/* Set the vertex and face information */\r\n\t\teNew.Org = eOrg.Dst;\r\n\t\teNewSym.Org = eDst.Org;\r\n\t\teNew.Lface = eNewSym.Lface = eOrg.Lface;\r\n\r\n\t\t/* Make sure the old face points to a valid half-edge */\r\n\t\teOrg.Lface.anEdge = eNewSym;\r\n\r\n\t\tif (!joiningLoops) {\r\n\t\t\tvar newFace = new TESSface();\r\n\t\t\t/* We split one loop into two -- the new loop is eNew->Lface */\r\n\t\t\tthis.makeFace_(newFace, eNew, eOrg.Lface);\r\n\t\t}\r\n\t\treturn eNew;\r\n\t},\r\n\r\n\t/* tessMeshZapFace( fZap ) destroys a face and removes it from the\r\n\t * global face list.  All edges of fZap will have a NULL pointer as their\r\n\t * left face.  Any edges which also have a NULL pointer as their right face\r\n\t * are deleted entirely (along with any isolated vertices this produces).\r\n\t * An entire mesh can be deleted by zapping its faces, one at a time,\r\n\t * in any order.  Zapped faces cannot be used in further mesh operations!\r\n\t */\r\n\tzapFace: function(fZap) {\r\n\t\tvar eStart = fZap.anEdge;\r\n\t\tvar e, eNext, eSym;\r\n\t\tvar fPrev, fNext;\r\n\r\n\t\t/* walk around face, deleting edges whose right face is also NULL */\r\n\t\teNext = eStart.Lnext;\r\n\t\tdo {\r\n\t\t\te = eNext;\r\n\t\t\teNext = e.Lnext;\r\n\r\n\t\t\te.Lface = null;\r\n\t\t\tif (e.Rface === null) {\r\n\t\t\t\t/* delete the edge -- see TESSmeshDelete above */\r\n\r\n\t\t\t\tif (e.Onext === e) {\r\n\t\t\t\t\tthis.killVertex_(e.Org, null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/* Make sure that e->Org points to a valid half-edge */\r\n\t\t\t\t\te.Org.anEdge = e.Onext;\r\n\t\t\t\t\tthis.splice_(e, e.Oprev);\r\n\t\t\t\t}\r\n\t\t\t\teSym = e.Sym;\r\n\t\t\t\tif (eSym.Onext === eSym) {\r\n\t\t\t\t\tthis.killVertex_(eSym.Org, null);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t/* Make sure that eSym->Org points to a valid half-edge */\r\n\t\t\t\t\teSym.Org.anEdge = eSym.Onext;\r\n\t\t\t\t\tthis.splice_(eSym, eSym.Oprev);\r\n\t\t\t\t}\r\n\t\t\t\tthis.killEdge_(e);\r\n\t\t\t}\r\n\t\t} while (e != eStart);\r\n\r\n\t\t/* delete from circular doubly-linked list */\r\n\t\tfPrev = fZap.prev;\r\n\t\tfNext = fZap.next;\r\n\t\tfNext.prev = fPrev;\r\n\t\tfPrev.next = fNext;\r\n\t},\r\n\r\n\tcountFaceVerts_: function(f) {\r\n\t\tvar eCur = f.anEdge;\r\n\t\tvar n = 0;\r\n\t\tdo {\r\n\t\t\tn++;\r\n\t\t\teCur = eCur.Lnext;\r\n\t\t} while (eCur !== f.anEdge);\r\n\t\treturn n;\r\n\t},\r\n\r\n\t//int tessMeshMergeConvexFaces( TESSmesh *mesh, int maxVertsPerFace )\r\n\tmergeConvexFaces: function(maxVertsPerFace) {\r\n\t\tvar f;\r\n\t\tvar eCur, eNext, eSym;\r\n\t\tvar vStart;\r\n\t\tvar curNv, symNv;\r\n\r\n\t\tfor (f = this.fHead.next; f !== this.fHead; f = f.next) {\r\n\t\t\t// Skip faces which are outside the result.\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\teCur = f.anEdge;\r\n\t\t\tvStart = eCur.Org;\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\teNext = eCur.Lnext;\r\n\t\t\t\teSym = eCur.Sym;\r\n\r\n\t\t\t\t// Try to merge if the neighbour face is valid.\r\n\t\t\t\tif (eSym && eSym.Lface && eSym.Lface.inside) {\r\n\t\t\t\t\t// Try to merge the neighbour faces if the resulting polygons\r\n\t\t\t\t\t// does not exceed maximum number of vertices.\r\n\t\t\t\t\tcurNv = this.countFaceVerts_(f);\r\n\t\t\t\t\tsymNv = this.countFaceVerts_(eSym.Lface);\r\n\t\t\t\t\tif (curNv + symNv - 2 <= maxVertsPerFace) {\r\n\t\t\t\t\t\t// Merge if the resulting poly is convex.\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tGeom.vertCCW(\r\n\t\t\t\t\t\t\t\teCur.Lprev.Org,\r\n\t\t\t\t\t\t\t\teCur.Org,\r\n\t\t\t\t\t\t\t\teSym.Lnext.Lnext.Org,\r\n\t\t\t\t\t\t\t) &&\r\n\t\t\t\t\t\t\tGeom.vertCCW(\r\n\t\t\t\t\t\t\t\teSym.Lprev.Org,\r\n\t\t\t\t\t\t\t\teSym.Org,\r\n\t\t\t\t\t\t\t\teCur.Lnext.Lnext.Org,\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\teNext = eSym.Lnext;\r\n\t\t\t\t\t\t\tthis.delete(eSym);\r\n\t\t\t\t\t\t\teCur = null;\r\n\t\t\t\t\t\t\teSym = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (eCur && eCur.Lnext.Org === vStart) break;\r\n\r\n\t\t\t\t// Continue to next edge.\r\n\t\t\t\teCur = eNext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\t/* tessMeshCheckMesh( mesh ) checks a mesh for self-consistency.\r\n\t */\r\n\tcheck: function() {\r\n\t\tvar fHead = this.fHead;\r\n\t\tvar vHead = this.vHead;\r\n\t\tvar eHead = this.eHead;\r\n\t\tvar f, fPrev, v, vPrev, e, ePrev;\r\n\r\n\t\tfPrev = fHead;\r\n\t\tfor (fPrev = fHead; (f = fPrev.next) !== fHead; fPrev = f) {\r\n\t\t\tassert(f.prev === fPrev);\r\n\t\t\te = f.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tassert(e.Sym !== e);\r\n\t\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t\t\tassert(e.Lface === f);\r\n\t\t\t\te = e.Lnext;\r\n\t\t\t} while (e !== f.anEdge);\r\n\t\t}\r\n\t\tassert(f.prev === fPrev && f.anEdge === null);\r\n\r\n\t\tvPrev = vHead;\r\n\t\tfor (vPrev = vHead; (v = vPrev.next) !== vHead; vPrev = v) {\r\n\t\t\tassert(v.prev === vPrev);\r\n\t\t\te = v.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tassert(e.Sym !== e);\r\n\t\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t\t\tassert(e.Org === v);\r\n\t\t\t\te = e.Onext;\r\n\t\t\t} while (e !== v.anEdge);\r\n\t\t}\r\n\t\tassert(v.prev === vPrev && v.anEdge === null);\r\n\r\n\t\tePrev = eHead;\r\n\t\tfor (ePrev = eHead; (e = ePrev.next) !== eHead; ePrev = e) {\r\n\t\t\tassert(e.Sym.next === ePrev.Sym);\r\n\t\t\tassert(e.Sym !== e);\r\n\t\t\tassert(e.Sym.Sym === e);\r\n\t\t\tassert(e.Org !== null);\r\n\t\t\tassert(e.Dst !== null);\r\n\t\t\tassert(e.Lnext.Onext.Sym === e);\r\n\t\t\tassert(e.Onext.Sym.Lnext === e);\r\n\t\t}\r\n\t\tassert(\r\n\t\t\te.Sym.next === ePrev.Sym &&\r\n\t\t\t\te.Sym === this.eHeadSym &&\r\n\t\t\t\te.Sym.Sym === e &&\r\n\t\t\t\te.Org === null &&\r\n\t\t\t\te.Dst === null &&\r\n\t\t\t\te.Lface === null &&\r\n\t\t\t\te.Rface === null,\r\n\t\t);\r\n\t},\r\n};\r\n\r\nGeom.vertEq = function(u, v) {\r\n\treturn u.s === v.s && u.t === v.t;\r\n};\r\n\r\n/* Returns TRUE if u is lexicographically <= v. */\r\nGeom.vertLeq = function(u, v) {\r\n\treturn u.s < v.s || (u.s === v.s && u.t <= v.t);\r\n};\r\n\r\n/* Versions of VertLeq, EdgeSign, EdgeEval with s and t transposed. */\r\nGeom.transLeq = function(u, v) {\r\n\treturn u.t < v.t || (u.t === v.t && u.s <= v.s);\r\n};\r\n\r\nGeom.edgeGoesLeft = function(e) {\r\n\treturn Geom.vertLeq(e.Dst, e.Org);\r\n};\r\n\r\nGeom.edgeGoesRight = function(e) {\r\n\treturn Geom.vertLeq(e.Org, e.Dst);\r\n};\r\n\r\nGeom.vertL1dist = function(u, v) {\r\n\treturn Math.abs(u.s - v.s) + Math.abs(u.t - v.t);\r\n};\r\n\r\n//TESSreal tesedgeEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\nGeom.edgeEval = function(u, v, w) {\r\n\t/* Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),\r\n\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\r\n\t * Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.\r\n\t * If uw is vertical (and thus passes thru v), the result is zero.\r\n\t *\r\n\t * The calculation is extremely accurate and stable, even when v\r\n\t * is very close to u or w.  In particular if we set v->t = 0 and\r\n\t * let r be the negated result (this evaluates (uw)(v->s)), then\r\n\t * r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).\r\n\t */\r\n\tassert(Geom.vertLeq(u, v) && Geom.vertLeq(v, w));\r\n\r\n\tvar gapL = v.s - u.s;\r\n\tvar gapR = w.s - v.s;\r\n\r\n\tif (gapL + gapR > 0.0) {\r\n\t\tif (gapL < gapR) {\r\n\t\t\treturn v.t - u.t + (u.t - w.t) * (gapL / (gapL + gapR));\r\n\t\t} else {\r\n\t\t\treturn v.t - w.t + (w.t - u.t) * (gapR / (gapL + gapR));\r\n\t\t}\r\n\t}\r\n\t/* vertical line */\r\n\treturn 0.0;\r\n};\r\n\r\n//TESSreal tesedgeSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\nGeom.edgeSign = function(u, v, w) {\r\n\t/* Returns a number whose sign matches EdgeEval(u,v,w) but which\r\n\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\r\n\t * as v is above, on, or below the edge uw.\r\n\t */\r\n\tassert(Geom.vertLeq(u, v) && Geom.vertLeq(v, w));\r\n\r\n\tvar gapL = v.s - u.s;\r\n\tvar gapR = w.s - v.s;\r\n\r\n\tif (gapL + gapR > 0.0) {\r\n\t\treturn (v.t - w.t) * gapL + (v.t - u.t) * gapR;\r\n\t}\r\n\t/* vertical line */\r\n\treturn 0.0;\r\n};\r\n\r\n/***********************************************************************\r\n * Define versions of EdgeSign, EdgeEval with s and t transposed.\r\n */\r\n\r\n//TESSreal testransEval( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\nGeom.transEval = function(u, v, w) {\r\n\t/* Given three vertices u,v,w such that TransLeq(u,v) && TransLeq(v,w),\r\n\t * evaluates the t-coord of the edge uw at the s-coord of the vertex v.\r\n\t * Returns v->s - (uw)(v->t), ie. the signed distance from uw to v.\r\n\t * If uw is vertical (and thus passes thru v), the result is zero.\r\n\t *\r\n\t * The calculation is extremely accurate and stable, even when v\r\n\t * is very close to u or w.  In particular if we set v->s = 0 and\r\n\t * let r be the negated result (this evaluates (uw)(v->t)), then\r\n\t * r is guaranteed to satisfy MIN(u->s,w->s) <= r <= MAX(u->s,w->s).\r\n\t */\r\n\tassert(Geom.transLeq(u, v) && Geom.transLeq(v, w));\r\n\r\n\tvar gapL = v.t - u.t;\r\n\tvar gapR = w.t - v.t;\r\n\r\n\tif (gapL + gapR > 0.0) {\r\n\t\tif (gapL < gapR) {\r\n\t\t\treturn v.s - u.s + (u.s - w.s) * (gapL / (gapL + gapR));\r\n\t\t} else {\r\n\t\t\treturn v.s - w.s + (w.s - u.s) * (gapR / (gapL + gapR));\r\n\t\t}\r\n\t}\r\n\t/* vertical line */\r\n\treturn 0.0;\r\n};\r\n\r\n//TESSreal testransSign( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\nGeom.transSign = function(u, v, w) {\r\n\t/* Returns a number whose sign matches TransEval(u,v,w) but which\r\n\t * is cheaper to evaluate.  Returns > 0, == 0 , or < 0\r\n\t * as v is above, on, or below the edge uw.\r\n\t */\r\n\tassert(Geom.transLeq(u, v) && Geom.transLeq(v, w));\r\n\r\n\tvar gapL = v.t - u.t;\r\n\tvar gapR = w.t - v.t;\r\n\r\n\tif (gapL + gapR > 0.0) {\r\n\t\treturn (v.s - w.s) * gapL + (v.s - u.s) * gapR;\r\n\t}\r\n\t/* vertical line */\r\n\treturn 0.0;\r\n};\r\n\r\n//int tesvertCCW( TESSvertex *u, TESSvertex *v, TESSvertex *w )\r\nGeom.vertCCW = function(u, v, w) {\r\n\t/* For almost-degenerate situations, the results are not reliable.\r\n\t * Unless the floating-point arithmetic can be performed without\r\n\t * rounding errors, *any* implementation will give incorrect results\r\n\t * on some degenerate inputs, so the client must have some way to\r\n\t * handle this situation.\r\n\t */\r\n\treturn u.s * (v.t - w.t) + v.s * (w.t - u.t) + w.s * (u.t - v.t) >= 0.0;\r\n};\r\n\r\n/* Given parameters a,x,b,y returns the value (b*x+a*y)/(a+b),\r\n * or (x+y)/2 if a==b==0.  It requires that a,b >= 0, and enforces\r\n * this in the rare case that one argument is slightly negative.\r\n * The implementation is extremely stable numerically.\r\n * In particular it guarantees that the result r satisfies\r\n * MIN(x,y) <= r <= MAX(x,y), and the results are very accurate\r\n * even when a and b differ greatly in magnitude.\r\n */\r\nGeom.interpolate = function(a, x, b, y) {\r\n\treturn (\r\n\t\t(a = a < 0 ? 0 : a),\r\n\t\t(b = b < 0 ? 0 : b),\r\n\t\ta <= b\r\n\t\t\t? b === 0\r\n\t\t\t\t? (x + y) / 2\r\n\t\t\t\t: x + (y - x) * (a / (a + b))\r\n\t\t\t: y + (x - y) * (b / (a + b))\r\n\t);\r\n};\r\n\r\n/*\r\n\t#ifndef FOR_TRITE_TEST_PROGRAM\r\n\t#define Interpolate(a,x,b,y)\tRealInterpolate(a,x,b,y)\r\n\t#else\r\n\r\n\t// Claim: the ONLY property the sweep algorithm relies on is that\r\n\t// MIN(x,y) <= r <= MAX(x,y).  This is a nasty way to test that.\r\n\t#include <stdlib.h>\r\n\textern int RandomInterpolate;\r\n\r\n\tdouble Interpolate( double a, double x, double b, double y)\r\n\t{\r\n\t\tprintf(\"*********************%d\\n\",RandomInterpolate);\r\n\t\tif( RandomInterpolate ) {\r\n\t\t\ta = 1.2 * drand48() - 0.1;\r\n\t\t\ta = (a < 0) ? 0 : ((a > 1) ? 1 : a);\r\n\t\t\tb = 1.0 - a;\r\n\t\t}\r\n\t\treturn RealInterpolate(a,x,b,y);\r\n\t}\r\n\t#endif*/\r\n\r\nGeom.intersect = function(o1, d1, o2, d2, v) {\r\n\t/* Given edges (o1,d1) and (o2,d2), compute their point of intersection.\r\n\t * The computed point is guaranteed to lie in the intersection of the\r\n\t * bounding rectangles defined by each edge.\r\n\t */\r\n\tvar z1, z2;\r\n\tvar t;\r\n\r\n\t/* This is certainly not the most efficient way to find the intersection\r\n\t * of two line segments, but it is very numerically stable.\r\n\t *\r\n\t * Strategy: find the two middle vertices in the VertLeq ordering,\r\n\t * and interpolate the intersection s-value from these.  Then repeat\r\n\t * using the TransLeq ordering to find the intersection t-value.\r\n\t */\r\n\r\n\tif (!Geom.vertLeq(o1, d1)) {\r\n\t\tt = o1;\r\n\t\to1 = d1;\r\n\t\td1 = t;\r\n\t} //swap( o1, d1 ); }\r\n\tif (!Geom.vertLeq(o2, d2)) {\r\n\t\tt = o2;\r\n\t\to2 = d2;\r\n\t\td2 = t;\r\n\t} //swap( o2, d2 ); }\r\n\tif (!Geom.vertLeq(o1, o2)) {\r\n\t\tt = o1;\r\n\t\to1 = o2;\r\n\t\to2 = t;\r\n\t\tt = d1;\r\n\t\td1 = d2;\r\n\t\td2 = t;\r\n\t} //swap( o1, o2 ); swap( d1, d2 ); }\r\n\r\n\tif (!Geom.vertLeq(o2, d1)) {\r\n\t\t/* Technically, no intersection -- do our best */\r\n\t\tv.s = (o2.s + d1.s) / 2;\r\n\t} else if (Geom.vertLeq(d1, d2)) {\r\n\t\t/* Interpolate between o2 and d1 */\r\n\t\tz1 = Geom.edgeEval(o1, o2, d1);\r\n\t\tz2 = Geom.edgeEval(o2, d1, d2);\r\n\t\tif (z1 + z2 < 0) {\r\n\t\t\tz1 = -z1;\r\n\t\t\tz2 = -z2;\r\n\t\t}\r\n\t\tv.s = Geom.interpolate(z1, o2.s, z2, d1.s);\r\n\t} else {\r\n\t\t/* Interpolate between o2 and d2 */\r\n\t\tz1 = Geom.edgeSign(o1, o2, d1);\r\n\t\tz2 = -Geom.edgeSign(o1, d2, d1);\r\n\t\tif (z1 + z2 < 0) {\r\n\t\t\tz1 = -z1;\r\n\t\t\tz2 = -z2;\r\n\t\t}\r\n\t\tv.s = Geom.interpolate(z1, o2.s, z2, d2.s);\r\n\t}\r\n\r\n\t/* Now repeat the process for t */\r\n\r\n\tif (!Geom.transLeq(o1, d1)) {\r\n\t\tt = o1;\r\n\t\to1 = d1;\r\n\t\td1 = t;\r\n\t} //swap( o1, d1 ); }\r\n\tif (!Geom.transLeq(o2, d2)) {\r\n\t\tt = o2;\r\n\t\to2 = d2;\r\n\t\td2 = t;\r\n\t} //swap( o2, d2 ); }\r\n\tif (!Geom.transLeq(o1, o2)) {\r\n\t\tt = o1;\r\n\t\to1 = o2;\r\n\t\to2 = t;\r\n\t\tt = d1;\r\n\t\td1 = d2;\r\n\t\td2 = t;\r\n\t} //swap( o1, o2 ); swap( d1, d2 ); }\r\n\r\n\tif (!Geom.transLeq(o2, d1)) {\r\n\t\t/* Technically, no intersection -- do our best */\r\n\t\tv.t = (o2.t + d1.t) / 2;\r\n\t} else if (Geom.transLeq(d1, d2)) {\r\n\t\t/* Interpolate between o2 and d1 */\r\n\t\tz1 = Geom.transEval(o1, o2, d1);\r\n\t\tz2 = Geom.transEval(o2, d1, d2);\r\n\t\tif (z1 + z2 < 0) {\r\n\t\t\tz1 = -z1;\r\n\t\t\tz2 = -z2;\r\n\t\t}\r\n\t\tv.t = Geom.interpolate(z1, o2.t, z2, d1.t);\r\n\t} else {\r\n\t\t/* Interpolate between o2 and d2 */\r\n\t\tz1 = Geom.transSign(o1, o2, d1);\r\n\t\tz2 = -Geom.transSign(o1, d2, d1);\r\n\t\tif (z1 + z2 < 0) {\r\n\t\t\tz1 = -z1;\r\n\t\t\tz2 = -z2;\r\n\t\t}\r\n\t\tv.t = Geom.interpolate(z1, o2.t, z2, d2.t);\r\n\t}\r\n};\r\n\r\nfunction DictNode() {\r\n\tthis.key = null;\r\n\tthis.next = null;\r\n\tthis.prev = null;\r\n}\r\n\r\nfunction Dict(frame, leq) {\r\n\tthis.head = new DictNode();\r\n\tthis.head.next = this.head;\r\n\tthis.head.prev = this.head;\r\n\tthis.frame = frame;\r\n\tthis.leq = leq;\r\n}\r\n\r\nDict.prototype = {\r\n\tmin: function() {\r\n\t\treturn this.head.next;\r\n\t},\r\n\r\n\tmax: function() {\r\n\t\treturn this.head.prev;\r\n\t},\r\n\r\n\tinsert: function(k) {\r\n\t\treturn this.insertBefore(this.head, k);\r\n\t},\r\n\r\n\tsearch: function(key) {\r\n\t\t/* Search returns the node with the smallest key greater than or equal\r\n\t\t * to the given key.  If there is no such key, returns a node whose\r\n\t\t * key is NULL.  Similarly, Succ(Max(d)) has a NULL key, etc.\r\n\t\t */\r\n\t\tvar node = this.head;\r\n\t\tdo {\r\n\t\t\tnode = node.next;\r\n\t\t} while (node.key !== null && !this.leq(this.frame, key, node.key));\r\n\r\n\t\treturn node;\r\n\t},\r\n\r\n\tinsertBefore: function(node, key) {\r\n\t\tdo {\r\n\t\t\tnode = node.prev;\r\n\t\t} while (node.key !== null && !this.leq(this.frame, node.key, key));\r\n\r\n\t\tvar newNode = new DictNode();\r\n\t\tnewNode.key = key;\r\n\t\tnewNode.next = node.next;\r\n\t\tnode.next.prev = newNode;\r\n\t\tnewNode.prev = node;\r\n\t\tnode.next = newNode;\r\n\r\n\t\treturn newNode;\r\n\t},\r\n\r\n\tdelete: function(node) {\r\n\t\tnode.next.prev = node.prev;\r\n\t\tnode.prev.next = node.next;\r\n\t},\r\n};\r\n\r\nfunction PQnode() {\r\n\tthis.handle = null;\r\n}\r\n\r\nfunction PQhandleElem() {\r\n\tthis.key = null;\r\n\tthis.node = null;\r\n}\r\n\r\nfunction PriorityQ(size, leq) {\r\n\tthis.size = 0;\r\n\tthis.max = size;\r\n\r\n\tthis.nodes = [];\r\n\tthis.nodes.length = size + 1;\r\n\tvar i;\r\n\r\n\tfor (i = 0; i < this.nodes.length; i++) this.nodes[i] = new PQnode();\r\n\r\n\tthis.handles = [];\r\n\tthis.handles.length = size + 1;\r\n\tfor (i = 0; i < this.handles.length; i++)\r\n\t\tthis.handles[i] = new PQhandleElem();\r\n\r\n\tthis.initialized = false;\r\n\tthis.freeList = 0;\r\n\tthis.leq = leq;\r\n\r\n\tthis.nodes[1].handle = 1; /* so that Minimum() returns NULL */\r\n\tthis.handles[1].key = null;\r\n}\r\n\r\nPriorityQ.prototype = {\r\n\tfloatDown_: function(curr) {\r\n\t\tvar n = this.nodes;\r\n\t\tvar h = this.handles;\r\n\t\tvar hCurr, hChild;\r\n\t\tvar child;\r\n\r\n\t\thCurr = n[curr].handle;\r\n\t\tfor (;;) {\r\n\t\t\tchild = curr << 1;\r\n\t\t\tif (\r\n\t\t\t\tchild < this.size &&\r\n\t\t\t\tthis.leq(h[n[child + 1].handle].key, h[n[child].handle].key)\r\n\t\t\t) {\r\n\t\t\t\t++child;\r\n\t\t\t}\r\n\r\n\t\t\tassert(child <= this.max);\r\n\r\n\t\t\thChild = n[child].handle;\r\n\t\t\tif (child > this.size || this.leq(h[hCurr].key, h[hChild].key)) {\r\n\t\t\t\tn[curr].handle = hCurr;\r\n\t\t\t\th[hCurr].node = curr;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tn[curr].handle = hChild;\r\n\t\t\th[hChild].node = curr;\r\n\t\t\tcurr = child;\r\n\t\t}\r\n\t},\r\n\r\n\tfloatUp_: function(curr) {\r\n\t\tvar n = this.nodes;\r\n\t\tvar h = this.handles;\r\n\t\tvar hCurr, hParent;\r\n\t\tvar parent;\r\n\r\n\t\thCurr = n[curr].handle;\r\n\t\tfor (;;) {\r\n\t\t\tparent = curr >> 1;\r\n\t\t\thParent = n[parent].handle;\r\n\t\t\tif (parent === 0 || this.leq(h[hParent].key, h[hCurr].key)) {\r\n\t\t\t\tn[curr].handle = hCurr;\r\n\t\t\t\th[hCurr].node = curr;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tn[curr].handle = hParent;\r\n\t\t\th[hParent].node = curr;\r\n\t\t\tcurr = parent;\r\n\t\t}\r\n\t},\r\n\r\n\tinit: function() {\r\n\t\t/* This method of building a heap is O(n), rather than O(n lg n). */\r\n\t\tfor (var i = this.size; i >= 1; --i) {\r\n\t\t\tthis.floatDown_(i);\r\n\t\t}\r\n\t\tthis.initialized = true;\r\n\t},\r\n\r\n\tmin: function() {\r\n\t\treturn this.handles[this.nodes[1].handle].key;\r\n\t},\r\n\r\n\t/* really pqHeapInsert */\r\n\t/* returns INV_HANDLE iff out of memory */\r\n\t//PQhandle pqHeapInsert( TESSalloc* alloc, PriorityQHeap *pq, PQkey keyNew )\r\n\tinsert: function(keyNew) {\r\n\t\tvar curr;\r\n\t\tvar free;\r\n\r\n\t\tcurr = ++this.size;\r\n\t\tif (curr * 2 > this.max) {\r\n\t\t\tthis.max *= 2;\r\n\t\t\tvar i;\r\n\t\t\tvar s;\r\n\t\t\ts = this.nodes.length;\r\n\t\t\tthis.nodes.length = this.max + 1;\r\n\t\t\tfor (i = s; i < this.nodes.length; i++)\r\n\t\t\t\tthis.nodes[i] = new PQnode();\r\n\r\n\t\t\ts = this.handles.length;\r\n\t\t\tthis.handles.length = this.max + 1;\r\n\t\t\tfor (i = s; i < this.handles.length; i++)\r\n\t\t\t\tthis.handles[i] = new PQhandleElem();\r\n\t\t}\r\n\r\n\t\tif (this.freeList === 0) {\r\n\t\t\tfree = curr;\r\n\t\t} else {\r\n\t\t\tfree = this.freeList;\r\n\t\t\tthis.freeList = this.handles[free].node;\r\n\t\t}\r\n\r\n\t\tthis.nodes[curr].handle = free;\r\n\t\tthis.handles[free].node = curr;\r\n\t\tthis.handles[free].key = keyNew;\r\n\r\n\t\tif (this.initialized) {\r\n\t\t\tthis.floatUp_(curr);\r\n\t\t}\r\n\t\treturn free;\r\n\t},\r\n\r\n\t//PQkey pqHeapExtractMin( PriorityQHeap *pq )\r\n\textractMin: function() {\r\n\t\tvar n = this.nodes;\r\n\t\tvar h = this.handles;\r\n\t\tvar hMin = n[1].handle;\r\n\t\tvar min = h[hMin].key;\r\n\r\n\t\tif (this.size > 0) {\r\n\t\t\tn[1].handle = n[this.size].handle;\r\n\t\t\th[n[1].handle].node = 1;\r\n\r\n\t\t\th[hMin].key = null;\r\n\t\t\th[hMin].node = this.freeList;\r\n\t\t\tthis.freeList = hMin;\r\n\r\n\t\t\t--this.size;\r\n\t\t\tif (this.size > 0) {\r\n\t\t\t\tthis.floatDown_(1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn min;\r\n\t},\r\n\r\n\tdelete: function(hCurr) {\r\n\t\tvar n = this.nodes;\r\n\t\tvar h = this.handles;\r\n\t\tvar curr;\r\n\r\n\t\tassert(hCurr >= 1 && hCurr <= this.max && h[hCurr].key !== null);\r\n\r\n\t\tcurr = h[hCurr].node;\r\n\t\tn[curr].handle = n[this.size].handle;\r\n\t\th[n[curr].handle].node = curr;\r\n\r\n\t\t--this.size;\r\n\t\tif (curr <= this.size) {\r\n\t\t\tif (\r\n\t\t\t\tcurr <= 1 ||\r\n\t\t\t\tthis.leq(h[n[curr >> 1].handle].key, h[n[curr].handle].key)\r\n\t\t\t) {\r\n\t\t\t\tthis.floatDown_(curr);\r\n\t\t\t} else {\r\n\t\t\t\tthis.floatUp_(curr);\r\n\t\t\t}\r\n\t\t}\r\n\t\th[hCurr].key = null;\r\n\t\th[hCurr].node = this.freeList;\r\n\t\tthis.freeList = hCurr;\r\n\t},\r\n};\r\n\r\n/* For each pair of adjacent edges crossing the sweep line, there is\r\n * an ActiveRegion to represent the region between them.  The active\r\n * regions are kept in sorted order in a dynamic dictionary.  As the\r\n * sweep line crosses each vertex, we update the affected regions.\r\n */\r\n\r\nfunction ActiveRegion() {\r\n\tthis.eUp = null; /* upper edge, directed right to left */\r\n\tthis.nodeUp = null; /* dictionary node corresponding to eUp */\r\n\tthis.windingNumber = 0;\r\n\t/* used to determine which regions are\r\n\t * inside the polygon */\r\n\tthis.inside = false; /* is this region inside the polygon? */\r\n\tthis.sentinel = false; /* marks fake edges at t = +/-infinity */\r\n\tthis.dirty = false;\r\n\t/* marks regions where the upper or lower\r\n\t * edge has changed, but we haven't checked\r\n\t * whether they intersect yet */\r\n\tthis.fixUpperEdge = false;\r\n\t/* marks temporary edges introduced when\r\n\t * we process a \"right vertex\" (one without\r\n\t * any edges leaving to the right) */\r\n}\r\n\r\nvar Sweep = {};\r\n\r\nSweep.regionBelow = function(r) {\r\n\treturn r.nodeUp.prev.key;\r\n};\r\n\r\nSweep.regionAbove = function(r) {\r\n\treturn r.nodeUp.next.key;\r\n};\r\n\r\nSweep.debugEvent = function(tess) {\r\n\t// empty\r\n};\r\n\r\n/*\r\n * Invariants for the Edge Dictionary.\r\n * - each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)\r\n *   at any valid location of the sweep event\r\n * - if EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2\r\n *   share a common endpoint\r\n * - for each e, e->Dst has been processed, but not e->Org\r\n * - each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)\r\n *   where \"event\" is the current sweep line event.\r\n * - no edge e has zero length\r\n *\r\n * Invariants for the Mesh (the processed portion).\r\n * - the portion of the mesh left of the sweep line is a planar graph,\r\n *   ie. there is *some* way to embed it in the plane\r\n * - no processed edge has zero length\r\n * - no two processed vertices have identical coordinates\r\n * - each \"inside\" region is monotone, ie. can be broken into two chains\r\n *   of monotonically increasing vertices according to VertLeq(v1,v2)\r\n *   - a non-invariant: these chains may intersect (very slightly)\r\n *\r\n * Invariants for the Sweep.\r\n * - if none of the edges incident to the event vertex have an activeRegion\r\n *   (ie. none of these edges are in the edge dictionary), then the vertex\r\n *   has only right-going edges.\r\n * - if an edge is marked \"fixUpperEdge\" (it is a temporary edge introduced\r\n *   by ConnectRightVertex), then it is the only right-going edge from\r\n *   its associated vertex.  (This says that these edges exist only\r\n *   when it is necessary.)\r\n */\r\n\r\n/* When we merge two edges into one, we need to compute the combined\r\n * winding of the new edge.\r\n */\r\nSweep.addWinding = function(eDst, eSrc) {\r\n\teDst.winding += eSrc.winding;\r\n\teDst.Sym.winding += eSrc.Sym.winding;\r\n};\r\n\r\n//static int EdgeLeq( TESStesselator *tess, ActiveRegion *reg1, ActiveRegion *reg2 )\r\nSweep.edgeLeq = function(tess, reg1, reg2) {\r\n\t/*\r\n\t * Both edges must be directed from right to left (this is the canonical\r\n\t * direction for the upper edge of each region).\r\n\t *\r\n\t * The strategy is to evaluate a \"t\" value for each edge at the\r\n\t * current sweep line position, given by tess->event.  The calculations\r\n\t * are designed to be very stable, but of course they are not perfect.\r\n\t *\r\n\t * Special case: if both edge destinations are at the sweep event,\r\n\t * we sort the edges by slope (they would otherwise compare equally).\r\n\t */\r\n\tvar ev = tess.event;\r\n\tvar t1, t2;\r\n\r\n\tvar e1 = reg1.eUp;\r\n\tvar e2 = reg2.eUp;\r\n\r\n\tif (e1.Dst === ev) {\r\n\t\tif (e2.Dst === ev) {\r\n\t\t\t/* Two edges right of the sweep line which meet at the sweep event.\r\n\t\t\t * Sort them by slope.\r\n\t\t\t */\r\n\t\t\tif (Geom.vertLeq(e1.Org, e2.Org)) {\r\n\t\t\t\treturn Geom.edgeSign(e2.Dst, e1.Org, e2.Org) <= 0;\r\n\t\t\t}\r\n\t\t\treturn Geom.edgeSign(e1.Dst, e2.Org, e1.Org) >= 0;\r\n\t\t}\r\n\t\treturn Geom.edgeSign(e2.Dst, ev, e2.Org) <= 0;\r\n\t}\r\n\tif (e2.Dst === ev) {\r\n\t\treturn Geom.edgeSign(e1.Dst, ev, e1.Org) >= 0;\r\n\t}\r\n\r\n\t/* General case - compute signed distance *from* e1, e2 to event */\r\n\tvar t1 = Geom.edgeEval(e1.Dst, ev, e1.Org);\r\n\tvar t2 = Geom.edgeEval(e2.Dst, ev, e2.Org);\r\n\treturn t1 >= t2;\r\n};\r\n\r\n//static void DeleteRegion( TESStesselator *tess, ActiveRegion *reg )\r\nSweep.deleteRegion = function(tess, reg) {\r\n\tif (reg.fixUpperEdge) {\r\n\t\t/* It was created with zero winding number, so it better be\r\n\t\t * deleted with zero winding number (ie. it better not get merged\r\n\t\t * with a real edge).\r\n\t\t */\r\n\t\tassert(reg.eUp.winding === 0);\r\n\t}\r\n\treg.eUp.activeRegion = null;\r\n\ttess.dict.delete(reg.nodeUp);\r\n};\r\n\r\n//static int FixUpperEdge( TESStesselator *tess, ActiveRegion *reg, TESShalfEdge *newEdge )\r\nSweep.fixUpperEdge = function(tess, reg, newEdge) {\r\n\t/*\r\n\t * Replace an upper edge which needs fixing (see ConnectRightVertex).\r\n\t */\r\n\tassert(reg.fixUpperEdge);\r\n\ttess.mesh.delete(reg.eUp);\r\n\treg.fixUpperEdge = false;\r\n\treg.eUp = newEdge;\r\n\tnewEdge.activeRegion = reg;\r\n};\r\n\r\n//static ActiveRegion *TopLeftRegion( TESStesselator *tess, ActiveRegion *reg )\r\nSweep.topLeftRegion = function(tess, reg) {\r\n\tvar org = reg.eUp.Org;\r\n\tvar e;\r\n\r\n\t/* Find the region above the uppermost edge with the same origin */\r\n\tdo {\r\n\t\treg = Sweep.regionAbove(reg);\r\n\t} while (reg.eUp.Org === org);\r\n\r\n\t/* If the edge above was a temporary edge introduced by ConnectRightVertex,\r\n\t * now is the time to fix it.\r\n\t */\r\n\tif (reg.fixUpperEdge) {\r\n\t\te = tess.mesh.connect(Sweep.regionBelow(reg).eUp.Sym, reg.eUp.Lnext);\r\n\t\tif (e === null) return null;\r\n\t\tSweep.fixUpperEdge(tess, reg, e);\r\n\t\treg = Sweep.regionAbove(reg);\r\n\t}\r\n\treturn reg;\r\n};\r\n\r\n//static ActiveRegion *TopRightRegion( ActiveRegion *reg )\r\nSweep.topRightRegion = function(reg) {\r\n\tvar dst = reg.eUp.Dst;\r\n\t/* Find the region above the uppermost edge with the same destination */\r\n\tdo {\r\n\t\treg = Sweep.regionAbove(reg);\r\n\t} while (reg.eUp.Dst === dst);\r\n\treturn reg;\r\n};\r\n\r\n//static ActiveRegion *AddRegionBelow( TESStesselator *tess, ActiveRegion *regAbove, TESShalfEdge *eNewUp )\r\nSweep.addRegionBelow = function(tess, regAbove, eNewUp) {\r\n\t/*\r\n\t * Add a new active region to the sweep line, *somewhere* below \"regAbove\"\r\n\t * (according to where the new edge belongs in the sweep-line dictionary).\r\n\t * The upper edge of the new region will be \"eNewUp\".\r\n\t * Winding number and \"inside\" flag are not updated.\r\n\t */\r\n\tvar regNew = new ActiveRegion();\r\n\tregNew.eUp = eNewUp;\r\n\tregNew.nodeUp = tess.dict.insertBefore(regAbove.nodeUp, regNew);\r\n\t//\tif (regNew->nodeUp == NULL) longjmp(tess->env,1);\r\n\tregNew.fixUpperEdge = false;\r\n\tregNew.sentinel = false;\r\n\tregNew.dirty = false;\r\n\r\n\teNewUp.activeRegion = regNew;\r\n\treturn regNew;\r\n};\r\n\r\n//static int IsWindingInside( TESStesselator *tess, int n )\r\nSweep.isWindingInside = function(tess, n) {\r\n\tswitch (tess.windingRule) {\r\n\t\tcase Tess2.WINDING_ODD:\r\n\t\t\treturn (n & 1) !== 0;\r\n\t\tcase Tess2.WINDING_NONZERO:\r\n\t\t\treturn n !== 0;\r\n\t\tcase Tess2.WINDING_POSITIVE:\r\n\t\t\treturn n > 0;\r\n\t\tcase Tess2.WINDING_NEGATIVE:\r\n\t\t\treturn n < 0;\r\n\t\tcase Tess2.WINDING_ABS_GEQ_TWO:\r\n\t\t\treturn n >= 2 || n <= -2;\r\n\t}\r\n\tassert(false);\r\n\treturn false;\r\n};\r\n\r\n//static void ComputeWinding( TESStesselator *tess, ActiveRegion *reg )\r\nSweep.computeWinding = function(tess, reg) {\r\n\treg.windingNumber = Sweep.regionAbove(reg).windingNumber + reg.eUp.winding;\r\n\treg.inside = Sweep.isWindingInside(tess, reg.windingNumber);\r\n};\r\n\r\n//static void FinishRegion( TESStesselator *tess, ActiveRegion *reg )\r\nSweep.finishRegion = function(tess, reg) {\r\n\t/*\r\n\t * Delete a region from the sweep line.  This happens when the upper\r\n\t * and lower chains of a region meet (at a vertex on the sweep line).\r\n\t * The \"inside\" flag is copied to the appropriate mesh face (we could\r\n\t * not do this before -- since the structure of the mesh is always\r\n\t * changing, this face may not have even existed until now).\r\n\t */\r\n\tvar e = reg.eUp;\r\n\tvar f = e.Lface;\r\n\r\n\tf.inside = reg.inside;\r\n\tf.anEdge = e; /* optimization for tessMeshTessellateMonoRegion() */\r\n\tSweep.deleteRegion(tess, reg);\r\n};\r\n\r\n//static TESShalfEdge *FinishLeftRegions( TESStesselator *tess, ActiveRegion *regFirst, ActiveRegion *regLast )\r\nSweep.finishLeftRegions = function(tess, regFirst, regLast) {\r\n\t/*\r\n\t * We are given a vertex with one or more left-going edges.  All affected\r\n\t * edges should be in the edge dictionary.  Starting at regFirst->eUp,\r\n\t * we walk down deleting all regions where both edges have the same\r\n\t * origin vOrg.  At the same time we copy the \"inside\" flag from the\r\n\t * active region to the face, since at this point each face will belong\r\n\t * to at most one region (this was not necessarily true until this point\r\n\t * in the sweep).  The walk stops at the region above regLast; if regLast\r\n\t * is NULL we walk as far as possible.  At the same time we relink the\r\n\t * mesh if necessary, so that the ordering of edges around vOrg is the\r\n\t * same as in the dictionary.\r\n\t */\r\n\tvar e, ePrev;\r\n\tvar reg = null;\r\n\tvar regPrev = regFirst;\r\n\tvar ePrev = regFirst.eUp;\r\n\twhile (regPrev !== regLast) {\r\n\t\tregPrev.fixUpperEdge = false; /* placement was OK */\r\n\t\treg = Sweep.regionBelow(regPrev);\r\n\t\te = reg.eUp;\r\n\t\tif (e.Org != ePrev.Org) {\r\n\t\t\tif (!reg.fixUpperEdge) {\r\n\t\t\t\t/* Remove the last left-going edge.  Even though there are no further\r\n\t\t\t\t * edges in the dictionary with this origin, there may be further\r\n\t\t\t\t * such edges in the mesh (if we are adding left edges to a vertex\r\n\t\t\t\t * that has already been processed).  Thus it is important to call\r\n\t\t\t\t * FinishRegion rather than just DeleteRegion.\r\n\t\t\t\t */\r\n\t\t\t\tSweep.finishRegion(tess, regPrev);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t/* If the edge below was a temporary edge introduced by\r\n\t\t\t * ConnectRightVertex, now is the time to fix it.\r\n\t\t\t */\r\n\t\t\te = tess.mesh.connect(ePrev.Lprev, e.Sym);\r\n\t\t\t//\t\t\tif (e == NULL) longjmp(tess->env,1);\r\n\t\t\tSweep.fixUpperEdge(tess, reg, e);\r\n\t\t}\r\n\r\n\t\t/* Relink edges so that ePrev->Onext == e */\r\n\t\tif (ePrev.Onext !== e) {\r\n\t\t\ttess.mesh.splice(e.Oprev, e);\r\n\t\t\ttess.mesh.splice(ePrev, e);\r\n\t\t}\r\n\t\tSweep.finishRegion(tess, regPrev); /* may change reg->eUp */\r\n\t\tePrev = reg.eUp;\r\n\t\tregPrev = reg;\r\n\t}\r\n\treturn ePrev;\r\n};\r\n\r\n//static void AddRightEdges( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eFirst, TESShalfEdge *eLast, TESShalfEdge *eTopLeft, int cleanUp )\r\nSweep.addRightEdges = function(tess, regUp, eFirst, eLast, eTopLeft, cleanUp) {\r\n\t/*\r\n\t * Purpose: insert right-going edges into the edge dictionary, and update\r\n\t * winding numbers and mesh connectivity appropriately.  All right-going\r\n\t * edges share a common origin vOrg.  Edges are inserted CCW starting at\r\n\t * eFirst; the last edge inserted is eLast->Oprev.  If vOrg has any\r\n\t * left-going edges already processed, then eTopLeft must be the edge\r\n\t * such that an imaginary upward vertical segment from vOrg would be\r\n\t * contained between eTopLeft->Oprev and eTopLeft; otherwise eTopLeft\r\n\t * should be NULL.\r\n\t */\r\n\tvar reg, regPrev;\r\n\tvar e, ePrev;\r\n\tvar firstTime = true;\r\n\r\n\t/* Insert the new right-going edges in the dictionary */\r\n\te = eFirst;\r\n\tdo {\r\n\t\tassert(Geom.vertLeq(e.Org, e.Dst));\r\n\t\tSweep.addRegionBelow(tess, regUp, e.Sym);\r\n\t\te = e.Onext;\r\n\t} while (e !== eLast);\r\n\r\n\t/* Walk *all* right-going edges from e->Org, in the dictionary order,\r\n\t * updating the winding numbers of each region, and re-linking the mesh\r\n\t * edges to match the dictionary ordering (if necessary).\r\n\t */\r\n\tif (eTopLeft === null) {\r\n\t\teTopLeft = Sweep.regionBelow(regUp).eUp.Rprev;\r\n\t}\r\n\tregPrev = regUp;\r\n\tePrev = eTopLeft;\r\n\tfor (;;) {\r\n\t\treg = Sweep.regionBelow(regPrev);\r\n\t\te = reg.eUp.Sym;\r\n\t\tif (e.Org !== ePrev.Org) break;\r\n\r\n\t\tif (e.Onext !== ePrev) {\r\n\t\t\t/* Unlink e from its current position, and relink below ePrev */\r\n\t\t\ttess.mesh.splice(e.Oprev, e);\r\n\t\t\ttess.mesh.splice(ePrev.Oprev, e);\r\n\t\t}\r\n\t\t/* Compute the winding number and \"inside\" flag for the new regions */\r\n\t\treg.windingNumber = regPrev.windingNumber - e.winding;\r\n\t\treg.inside = Sweep.isWindingInside(tess, reg.windingNumber);\r\n\r\n\t\t/* Check for two outgoing edges with same slope -- process these\r\n\t\t * before any intersection tests (see example in tessComputeInterior).\r\n\t\t */\r\n\t\tregPrev.dirty = true;\r\n\t\tif (!firstTime && Sweep.checkForRightSplice(tess, regPrev)) {\r\n\t\t\tSweep.addWinding(e, ePrev);\r\n\t\t\tSweep.deleteRegion(tess, regPrev);\r\n\t\t\ttess.mesh.delete(ePrev);\r\n\t\t}\r\n\t\tfirstTime = false;\r\n\t\tregPrev = reg;\r\n\t\tePrev = e;\r\n\t}\r\n\tregPrev.dirty = true;\r\n\tassert(regPrev.windingNumber - e.winding === reg.windingNumber);\r\n\r\n\tif (cleanUp) {\r\n\t\t/* Check for intersections between newly adjacent edges. */\r\n\t\tSweep.walkDirtyRegions(tess, regPrev);\r\n\t}\r\n};\r\n\r\n//static void SpliceMergeVertices( TESStesselator *tess, TESShalfEdge *e1, TESShalfEdge *e2 )\r\nSweep.spliceMergeVertices = function(tess, e1, e2) {\r\n\t/*\r\n\t * Two vertices with idential coordinates are combined into one.\r\n\t * e1->Org is kept, while e2->Org is discarded.\r\n\t */\r\n\ttess.mesh.splice(e1, e2);\r\n};\r\n\r\n//static void VertexWeights( TESSvertex *isect, TESSvertex *org, TESSvertex *dst, TESSreal *weights )\r\nSweep.vertexWeights = function(isect, org, dst) {\r\n\t/*\r\n\t * Find some weights which describe how the intersection vertex is\r\n\t * a linear combination of \"org\" and \"dest\".  Each of the two edges\r\n\t * which generated \"isect\" is allocated 50% of the weight; each edge\r\n\t * splits the weight between its org and dst according to the\r\n\t * relative distance to \"isect\".\r\n\t */\r\n\tvar t1 = Geom.vertL1dist(org, isect);\r\n\tvar t2 = Geom.vertL1dist(dst, isect);\r\n\tvar w0 = (0.5 * t2) / (t1 + t2);\r\n\tvar w1 = (0.5 * t1) / (t1 + t2);\r\n\tisect.coords[0] += w0 * org.coords[0] + w1 * dst.coords[0];\r\n\tisect.coords[1] += w0 * org.coords[1] + w1 * dst.coords[1];\r\n\tisect.coords[2] += w0 * org.coords[2] + w1 * dst.coords[2];\r\n};\r\n\r\n//static void GetIntersectData( TESStesselator *tess, TESSvertex *isect, TESSvertex *orgUp, TESSvertex *dstUp, TESSvertex *orgLo, TESSvertex *dstLo )\r\nSweep.getIntersectData = function(tess, isect, orgUp, dstUp, orgLo, dstLo) {\r\n\t/*\r\n\t * We've computed a new intersection point, now we need a \"data\" pointer\r\n\t * from the user so that we can refer to this new vertex in the\r\n\t * rendering callbacks.\r\n\t */\r\n\tisect.coords[0] = isect.coords[1] = isect.coords[2] = 0;\r\n\tisect.idx = -1;\r\n\tSweep.vertexWeights(isect, orgUp, dstUp);\r\n\tSweep.vertexWeights(isect, orgLo, dstLo);\r\n};\r\n\r\n//static int CheckForRightSplice( TESStesselator *tess, ActiveRegion *regUp )\r\nSweep.checkForRightSplice = function(tess, regUp) {\r\n\t/*\r\n\t * Check the upper and lower edge of \"regUp\", to make sure that the\r\n\t * eUp->Org is above eLo, or eLo->Org is below eUp (depending on which\r\n\t * origin is leftmost).\r\n\t *\r\n\t * The main purpose is to splice right-going edges with the same\r\n\t * dest vertex and nearly identical slopes (ie. we can't distinguish\r\n\t * the slopes numerically).  However the splicing can also help us\r\n\t * to recover from numerical errors.  For example, suppose at one\r\n\t * point we checked eUp and eLo, and decided that eUp->Org is barely\r\n\t * above eLo.  Then later, we split eLo into two edges (eg. from\r\n\t * a splice operation like this one).  This can change the result of\r\n\t * our test so that now eUp->Org is incident to eLo, or barely below it.\r\n\t * We must correct this condition to maintain the dictionary invariants.\r\n\t *\r\n\t * One possibility is to check these edges for intersection again\r\n\t * (ie. CheckForIntersect).  This is what we do if possible.  However\r\n\t * CheckForIntersect requires that tess->event lies between eUp and eLo,\r\n\t * so that it has something to fall back on when the intersection\r\n\t * calculation gives us an unusable answer.  So, for those cases where\r\n\t * we can't check for intersection, this routine fixes the problem\r\n\t * by just splicing the offending vertex into the other edge.\r\n\t * This is a guaranteed solution, no matter how degenerate things get.\r\n\t * Basically this is a combinatorial solution to a numerical problem.\r\n\t */\r\n\tvar regLo = Sweep.regionBelow(regUp);\r\n\tvar eUp = regUp.eUp;\r\n\tvar eLo = regLo.eUp;\r\n\r\n\tif (Geom.vertLeq(eUp.Org, eLo.Org)) {\r\n\t\tif (Geom.edgeSign(eLo.Dst, eUp.Org, eLo.Org) > 0) return false;\r\n\r\n\t\t/* eUp->Org appears to be below eLo */\r\n\t\tif (!Geom.vertEq(eUp.Org, eLo.Org)) {\r\n\t\t\t/* Splice eUp->Org into eLo */\r\n\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\ttess.mesh.splice(eUp, eLo.Oprev);\r\n\t\t\tregUp.dirty = regLo.dirty = true;\r\n\t\t} else if (eUp.Org !== eLo.Org) {\r\n\t\t\t/* merge the two vertices, discarding eUp->Org */\r\n\t\t\ttess.pq.delete(eUp.Org.pqHandle);\r\n\t\t\tSweep.spliceMergeVertices(tess, eLo.Oprev, eUp);\r\n\t\t}\r\n\t} else {\r\n\t\tif (Geom.edgeSign(eUp.Dst, eLo.Org, eUp.Org) < 0) return false;\r\n\r\n\t\t/* eLo->Org appears to be above eUp, so splice eLo->Org into eUp */\r\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\ttess.mesh.splice(eLo.Oprev, eUp);\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n//static int CheckForLeftSplice( TESStesselator *tess, ActiveRegion *regUp )\r\nSweep.checkForLeftSplice = function(tess, regUp) {\r\n\t/*\r\n\t * Check the upper and lower edge of \"regUp\", to make sure that the\r\n\t * eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which\r\n\t * destination is rightmost).\r\n\t *\r\n\t * Theoretically, this should always be true.  However, splitting an edge\r\n\t * into two pieces can change the results of previous tests.  For example,\r\n\t * suppose at one point we checked eUp and eLo, and decided that eUp->Dst\r\n\t * is barely above eLo.  Then later, we split eLo into two edges (eg. from\r\n\t * a splice operation like this one).  This can change the result of\r\n\t * the test so that now eUp->Dst is incident to eLo, or barely below it.\r\n\t * We must correct this condition to maintain the dictionary invariants\r\n\t * (otherwise new edges might get inserted in the wrong place in the\r\n\t * dictionary, and bad stuff will happen).\r\n\t *\r\n\t * We fix the problem by just splicing the offending vertex into the\r\n\t * other edge.\r\n\t */\r\n\tvar regLo = Sweep.regionBelow(regUp);\r\n\tvar eUp = regUp.eUp;\r\n\tvar eLo = regLo.eUp;\r\n\tvar e;\r\n\r\n\tassert(!Geom.vertEq(eUp.Dst, eLo.Dst));\r\n\r\n\tif (Geom.vertLeq(eUp.Dst, eLo.Dst)) {\r\n\t\tif (Geom.edgeSign(eUp.Dst, eLo.Dst, eUp.Org) < 0) return false;\r\n\r\n\t\t/* eLo->Dst is above eUp, so splice eLo->Dst into eUp */\r\n\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\te = tess.mesh.splitEdge(eUp);\r\n\t\ttess.mesh.splice(eLo.Sym, e);\r\n\t\te.Lface.inside = regUp.inside;\r\n\t} else {\r\n\t\tif (Geom.edgeSign(eLo.Dst, eUp.Dst, eLo.Org) > 0) return false;\r\n\r\n\t\t/* eUp->Dst is below eLo, so splice eUp->Dst into eLo */\r\n\t\tregUp.dirty = regLo.dirty = true;\r\n\t\te = tess.mesh.splitEdge(eLo);\r\n\t\ttess.mesh.splice(eUp.Lnext, eLo.Sym);\r\n\t\te.Rface.inside = regUp.inside;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n//static int CheckForIntersect( TESStesselator *tess, ActiveRegion *regUp )\r\nSweep.checkForIntersect = function(tess, regUp) {\r\n\t/*\r\n\t * Check the upper and lower edges of the given region to see if\r\n\t * they intersect.  If so, create the intersection and add it\r\n\t * to the data structures.\r\n\t *\r\n\t * Returns TRUE if adding the new intersection resulted in a recursive\r\n\t * call to AddRightEdges(); in this case all \"dirty\" regions have been\r\n\t * checked for intersections, and possibly regUp has been deleted.\r\n\t */\r\n\tvar regLo = Sweep.regionBelow(regUp);\r\n\tvar eUp = regUp.eUp;\r\n\tvar eLo = regLo.eUp;\r\n\tvar orgUp = eUp.Org;\r\n\tvar orgLo = eLo.Org;\r\n\tvar dstUp = eUp.Dst;\r\n\tvar dstLo = eLo.Dst;\r\n\tvar tMinUp, tMaxLo;\r\n\tvar isect = new TESSvertex(),\r\n\t\torgMin;\r\n\tvar e;\r\n\r\n\tassert(!Geom.vertEq(dstLo, dstUp));\r\n\tassert(Geom.edgeSign(dstUp, tess.event, orgUp) <= 0);\r\n\tassert(Geom.edgeSign(dstLo, tess.event, orgLo) >= 0);\r\n\tassert(orgUp !== tess.event && orgLo !== tess.event);\r\n\tassert(!regUp.fixUpperEdge && !regLo.fixUpperEdge);\r\n\r\n\tif (orgUp === orgLo) return false; /* right endpoints are the same */\r\n\r\n\ttMinUp = Math.min(orgUp.t, dstUp.t);\r\n\ttMaxLo = Math.max(orgLo.t, dstLo.t);\r\n\tif (tMinUp > tMaxLo) return false; /* t ranges do not overlap */\r\n\r\n\tif (Geom.vertLeq(orgUp, orgLo)) {\r\n\t\tif (Geom.edgeSign(dstLo, orgUp, orgLo) > 0) return false;\r\n\t} else {\r\n\t\tif (Geom.edgeSign(dstUp, orgLo, orgUp) < 0) return false;\r\n\t}\r\n\r\n\t/* At this point the edges intersect, at least marginally */\r\n\tSweep.debugEvent(tess);\r\n\r\n\tGeom.intersect(dstUp, orgUp, dstLo, orgLo, isect);\r\n\t/* The following properties are guaranteed: */\r\n\tassert(Math.min(orgUp.t, dstUp.t) <= isect.t);\r\n\tassert(isect.t <= Math.max(orgLo.t, dstLo.t));\r\n\tassert(Math.min(dstLo.s, dstUp.s) <= isect.s);\r\n\tassert(isect.s <= Math.max(orgLo.s, orgUp.s));\r\n\r\n\tif (Geom.vertLeq(isect, tess.event)) {\r\n\t\t/* The intersection point lies slightly to the left of the sweep line,\r\n\t\t * so move it until it''s slightly to the right of the sweep line.\r\n\t\t * (If we had perfect numerical precision, this would never happen\r\n\t\t * in the first place).  The easiest and safest thing to do is\r\n\t\t * replace the intersection by tess->event.\r\n\t\t */\r\n\t\tisect.s = tess.event.s;\r\n\t\tisect.t = tess.event.t;\r\n\t}\r\n\t/* Similarly, if the computed intersection lies to the right of the\r\n\t * rightmost origin (which should rarely happen), it can cause\r\n\t * unbelievable inefficiency on sufficiently degenerate inputs.\r\n\t * (If you have the test program, try running test54.d with the\r\n\t * \"X zoom\" option turned on).\r\n\t */\r\n\torgMin = Geom.vertLeq(orgUp, orgLo) ? orgUp : orgLo;\r\n\tif (Geom.vertLeq(orgMin, isect)) {\r\n\t\tisect.s = orgMin.s;\r\n\t\tisect.t = orgMin.t;\r\n\t}\r\n\r\n\tif (Geom.vertEq(isect, orgUp) || Geom.vertEq(isect, orgLo)) {\r\n\t\t/* Easy case -- intersection at one of the right endpoints */\r\n\t\tSweep.checkForRightSplice(tess, regUp);\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (\r\n\t\t(!Geom.vertEq(dstUp, tess.event) &&\r\n\t\t\tGeom.edgeSign(dstUp, tess.event, isect) >= 0) ||\r\n\t\t(!Geom.vertEq(dstLo, tess.event) &&\r\n\t\t\tGeom.edgeSign(dstLo, tess.event, isect) <= 0)\r\n\t) {\r\n\t\t/* Very unusual -- the new upper or lower edge would pass on the\r\n\t\t * wrong side of the sweep event, or through it.  This can happen\r\n\t\t * due to very small numerical errors in the intersection calculation.\r\n\t\t */\r\n\t\tif (dstLo === tess.event) {\r\n\t\t\t/* Splice dstLo into eUp, and process the new region(s) */\r\n\t\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\t\ttess.mesh.splice(eLo.Sym, eUp);\r\n\t\t\tregUp = Sweep.topLeftRegion(tess, regUp);\r\n\t\t\t//\t\t\tif (regUp == NULL) longjmp(tess->env,1);\r\n\t\t\teUp = Sweep.regionBelow(regUp).eUp;\r\n\t\t\tSweep.finishLeftRegions(tess, Sweep.regionBelow(regUp), regLo);\r\n\t\t\tSweep.addRightEdges(tess, regUp, eUp.Oprev, eUp, eUp, true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (dstUp === tess.event) {\r\n\t\t\t/* Splice dstUp into eLo, and process the new region(s) */\r\n\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\ttess.mesh.splice(eUp.Lnext, eLo.Oprev);\r\n\t\t\tregLo = regUp;\r\n\t\t\tregUp = Sweep.topRightRegion(regUp);\r\n\t\t\te = Sweep.regionBelow(regUp).eUp.Rprev;\r\n\t\t\tregLo.eUp = eLo.Oprev;\r\n\t\t\teLo = Sweep.finishLeftRegions(tess, regLo, null);\r\n\t\t\tSweep.addRightEdges(tess, regUp, eLo.Onext, eUp.Rprev, e, true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t/* Special case: called from ConnectRightVertex.  If either\r\n\t\t * edge passes on the wrong side of tess->event, split it\r\n\t\t * (and wait for ConnectRightVertex to splice it appropriately).\r\n\t\t */\r\n\t\tif (Geom.edgeSign(dstUp, tess.event, isect) >= 0) {\r\n\t\t\tSweep.regionAbove(regUp).dirty = regUp.dirty = true;\r\n\t\t\ttess.mesh.splitEdge(eUp.Sym);\r\n\t\t\teUp.Org.s = tess.event.s;\r\n\t\t\teUp.Org.t = tess.event.t;\r\n\t\t}\r\n\t\tif (Geom.edgeSign(dstLo, tess.event, isect) <= 0) {\r\n\t\t\tregUp.dirty = regLo.dirty = true;\r\n\t\t\ttess.mesh.splitEdge(eLo.Sym);\r\n\t\t\teLo.Org.s = tess.event.s;\r\n\t\t\teLo.Org.t = tess.event.t;\r\n\t\t}\r\n\t\t/* leave the rest for ConnectRightVertex */\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/* General case -- split both edges, splice into new vertex.\r\n\t * When we do the splice operation, the order of the arguments is\r\n\t * arbitrary as far as correctness goes.  However, when the operation\r\n\t * creates a new face, the work done is proportional to the size of\r\n\t * the new face.  We expect the faces in the processed part of\r\n\t * the mesh (ie. eUp->Lface) to be smaller than the faces in the\r\n\t * unprocessed original contours (which will be eLo->Oprev->Lface).\r\n\t */\r\n\ttess.mesh.splitEdge(eUp.Sym);\r\n\ttess.mesh.splitEdge(eLo.Sym);\r\n\ttess.mesh.splice(eLo.Oprev, eUp);\r\n\teUp.Org.s = isect.s;\r\n\teUp.Org.t = isect.t;\r\n\teUp.Org.pqHandle = tess.pq.insert(eUp.Org);\r\n\tSweep.getIntersectData(tess, eUp.Org, orgUp, dstUp, orgLo, dstLo);\r\n\tSweep.regionAbove(regUp).dirty = regUp.dirty = regLo.dirty = true;\r\n\treturn false;\r\n};\r\n\r\n//static void WalkDirtyRegions( TESStesselator *tess, ActiveRegion *regUp )\r\nSweep.walkDirtyRegions = function(tess, regUp) {\r\n\t/*\r\n\t * When the upper or lower edge of any region changes, the region is\r\n\t * marked \"dirty\".  This routine walks through all the dirty regions\r\n\t * and makes sure that the dictionary invariants are satisfied\r\n\t * (see the comments at the beginning of this file).  Of course\r\n\t * new dirty regions can be created as we make changes to restore\r\n\t * the invariants.\r\n\t */\r\n\tvar regLo = Sweep.regionBelow(regUp);\r\n\tvar eUp, eLo;\r\n\r\n\tfor (;;) {\r\n\t\t/* Find the lowest dirty region (we walk from the bottom up). */\r\n\t\twhile (regLo.dirty) {\r\n\t\t\tregUp = regLo;\r\n\t\t\tregLo = Sweep.regionBelow(regLo);\r\n\t\t}\r\n\t\tif (!regUp.dirty) {\r\n\t\t\tregLo = regUp;\r\n\t\t\tregUp = Sweep.regionAbove(regUp);\r\n\t\t\tif (regUp === null || !regUp.dirty) {\r\n\t\t\t\t/* We've walked all the dirty regions */\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tregUp.dirty = false;\r\n\t\teUp = regUp.eUp;\r\n\t\teLo = regLo.eUp;\r\n\r\n\t\tif (eUp.Dst !== eLo.Dst) {\r\n\t\t\t/* Check that the edge ordering is obeyed at the Dst vertices. */\r\n\t\t\tif (Sweep.checkForLeftSplice(tess, regUp)) {\r\n\t\t\t\t/* If the upper or lower edge was marked fixUpperEdge, then\r\n\t\t\t\t * we no longer need it (since these edges are needed only for\r\n\t\t\t\t * vertices which otherwise have no right-going edges).\r\n\t\t\t\t */\r\n\t\t\t\tif (regLo.fixUpperEdge) {\r\n\t\t\t\t\tSweep.deleteRegion(tess, regLo);\r\n\t\t\t\t\ttess.mesh.delete(eLo);\r\n\t\t\t\t\tregLo = Sweep.regionBelow(regUp);\r\n\t\t\t\t\teLo = regLo.eUp;\r\n\t\t\t\t} else if (regUp.fixUpperEdge) {\r\n\t\t\t\t\tSweep.deleteRegion(tess, regUp);\r\n\t\t\t\t\ttess.mesh.delete(eUp);\r\n\t\t\t\t\tregUp = Sweep.regionAbove(regLo);\r\n\t\t\t\t\teUp = regUp.eUp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (eUp.Org !== eLo.Org) {\r\n\t\t\tif (\r\n\t\t\t\teUp.Dst !== eLo.Dst &&\r\n\t\t\t\t!regUp.fixUpperEdge &&\r\n\t\t\t\t!regLo.fixUpperEdge &&\r\n\t\t\t\t(eUp.Dst === tess.event || eLo.Dst === tess.event)\r\n\t\t\t) {\r\n\t\t\t\t/* When all else fails in CheckForIntersect(), it uses tess->event\r\n\t\t\t\t * as the intersection location.  To make this possible, it requires\r\n\t\t\t\t * that tess->event lie between the upper and lower edges, and also\r\n\t\t\t\t * that neither of these is marked fixUpperEdge (since in the worst\r\n\t\t\t\t * case it might splice one of these edges into tess->event, and\r\n\t\t\t\t * violate the invariant that fixable edges are the only right-going\r\n\t\t\t\t * edge from their associated vertex).\r\n\t\t\t\t */\r\n\t\t\t\tif (Sweep.checkForIntersect(tess, regUp)) {\r\n\t\t\t\t\t/* WalkDirtyRegions() was called recursively; we're done */\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* Even though we can't use CheckForIntersect(), the Org vertices\r\n\t\t\t\t * may violate the dictionary edge ordering.  Check and correct this.\r\n\t\t\t\t */\r\n\t\t\t\tSweep.checkForRightSplice(tess, regUp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (eUp.Org === eLo.Org && eUp.Dst === eLo.Dst) {\r\n\t\t\t/* A degenerate loop consisting of only two edges -- delete it. */\r\n\t\t\tSweep.addWinding(eLo, eUp);\r\n\t\t\tSweep.deleteRegion(tess, regUp);\r\n\t\t\ttess.mesh.delete(eUp);\r\n\t\t\tregUp = Sweep.regionAbove(regLo);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n//static void ConnectRightVertex( TESStesselator *tess, ActiveRegion *regUp, TESShalfEdge *eBottomLeft )\r\nSweep.connectRightVertex = function(tess, regUp, eBottomLeft) {\r\n\t/*\r\n\t * Purpose: connect a \"right\" vertex vEvent (one where all edges go left)\r\n\t * to the unprocessed portion of the mesh.  Since there are no right-going\r\n\t * edges, two regions (one above vEvent and one below) are being merged\r\n\t * into one.  \"regUp\" is the upper of these two regions.\r\n\t *\r\n\t * There are two reasons for doing this (adding a right-going edge):\r\n\t *  - if the two regions being merged are \"inside\", we must add an edge\r\n\t *    to keep them separated (the combined region would not be monotone).\r\n\t *  - in any case, we must leave some record of vEvent in the dictionary,\r\n\t *    so that we can merge vEvent with features that we have not seen yet.\r\n\t *    For example, maybe there is a vertical edge which passes just to\r\n\t *    the right of vEvent; we would like to splice vEvent into this edge.\r\n\t *\r\n\t * However, we don't want to connect vEvent to just any vertex.  We don''t\r\n\t * want the new edge to cross any other edges; otherwise we will create\r\n\t * intersection vertices even when the input data had no self-intersections.\r\n\t * (This is a bad thing; if the user's input data has no intersections,\r\n\t * we don't want to generate any false intersections ourselves.)\r\n\t *\r\n\t * Our eventual goal is to connect vEvent to the leftmost unprocessed\r\n\t * vertex of the combined region (the union of regUp and regLo).\r\n\t * But because of unseen vertices with all right-going edges, and also\r\n\t * new vertices which may be created by edge intersections, we don''t\r\n\t * know where that leftmost unprocessed vertex is.  In the meantime, we\r\n\t * connect vEvent to the closest vertex of either chain, and mark the region\r\n\t * as \"fixUpperEdge\".  This flag says to delete and reconnect this edge\r\n\t * to the next processed vertex on the boundary of the combined region.\r\n\t * Quite possibly the vertex we connected to will turn out to be the\r\n\t * closest one, in which case we won''t need to make any changes.\r\n\t */\r\n\tvar eNew;\r\n\tvar eTopLeft = eBottomLeft.Onext;\r\n\tvar regLo = Sweep.regionBelow(regUp);\r\n\tvar eUp = regUp.eUp;\r\n\tvar eLo = regLo.eUp;\r\n\tvar degenerate = false;\r\n\r\n\tif (eUp.Dst !== eLo.Dst) {\r\n\t\tSweep.checkForIntersect(tess, regUp);\r\n\t}\r\n\r\n\t/* Possible new degeneracies: upper or lower edge of regUp may pass\r\n\t * through vEvent, or may coincide with new intersection vertex\r\n\t */\r\n\tif (Geom.vertEq(eUp.Org, tess.event)) {\r\n\t\ttess.mesh.splice(eTopLeft.Oprev, eUp);\r\n\t\tregUp = Sweep.topLeftRegion(tess, regUp);\r\n\t\teTopLeft = Sweep.regionBelow(regUp).eUp;\r\n\t\tSweep.finishLeftRegions(tess, Sweep.regionBelow(regUp), regLo);\r\n\t\tdegenerate = true;\r\n\t}\r\n\tif (Geom.vertEq(eLo.Org, tess.event)) {\r\n\t\ttess.mesh.splice(eBottomLeft, eLo.Oprev);\r\n\t\teBottomLeft = Sweep.finishLeftRegions(tess, regLo, null);\r\n\t\tdegenerate = true;\r\n\t}\r\n\tif (degenerate) {\r\n\t\tSweep.addRightEdges(\r\n\t\t\ttess,\r\n\t\t\tregUp,\r\n\t\t\teBottomLeft.Onext,\r\n\t\t\teTopLeft,\r\n\t\t\teTopLeft,\r\n\t\t\ttrue,\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Non-degenerate situation -- need to add a temporary, fixable edge.\r\n\t * Connect to the closer of eLo->Org, eUp->Org.\r\n\t */\r\n\tif (Geom.vertLeq(eLo.Org, eUp.Org)) {\r\n\t\teNew = eLo.Oprev;\r\n\t} else {\r\n\t\teNew = eUp;\r\n\t}\r\n\teNew = tess.mesh.connect(eBottomLeft.Lprev, eNew);\r\n\r\n\t/* Prevent cleanup, otherwise eNew might disappear before we've even\r\n\t * had a chance to mark it as a temporary edge.\r\n\t */\r\n\tSweep.addRightEdges(tess, regUp, eNew, eNew.Onext, eNew.Onext, false);\r\n\teNew.Sym.activeRegion.fixUpperEdge = true;\r\n\tSweep.walkDirtyRegions(tess, regUp);\r\n};\r\n\r\n/* Because vertices at exactly the same location are merged together\r\n * before we process the sweep event, some degenerate cases can't occur.\r\n * However if someone eventually makes the modifications required to\r\n * merge features which are close together, the cases below marked\r\n * TOLERANCE_NONZERO will be useful.  They were debugged before the\r\n * code to merge identical vertices in the main loop was added.\r\n */\r\n//#define TOLERANCE_NONZERO\tFALSE\r\n\r\n//static void ConnectLeftDegenerate( TESStesselator *tess, ActiveRegion *regUp, TESSvertex *vEvent )\r\nSweep.connectLeftDegenerate = function(tess, regUp, vEvent) {\r\n\t/*\r\n\t * The event vertex lies exacty on an already-processed edge or vertex.\r\n\t * Adding the new vertex involves splicing it into the already-processed\r\n\t * part of the mesh.\r\n\t */\r\n\tvar e, eTopLeft, eTopRight, eLast;\r\n\tvar reg;\r\n\r\n\te = regUp.eUp;\r\n\tif (Geom.vertEq(e.Org, vEvent)) {\r\n\t\t/* e->Org is an unprocessed vertex - just combine them, and wait\r\n\t\t * for e->Org to be pulled from the queue\r\n\t\t */\r\n\t\tassert(false /*TOLERANCE_NONZERO*/);\r\n\t\tSweep.spliceMergeVertices(tess, e, vEvent.anEdge);\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!Geom.vertEq(e.Dst, vEvent)) {\r\n\t\t/* General case -- splice vEvent into edge e which passes through it */\r\n\t\ttess.mesh.splitEdge(e.Sym);\r\n\t\tif (regUp.fixUpperEdge) {\r\n\t\t\t/* This edge was fixable -- delete unused portion of original edge */\r\n\t\t\ttess.mesh.delete(e.Onext);\r\n\t\t\tregUp.fixUpperEdge = false;\r\n\t\t}\r\n\t\ttess.mesh.splice(vEvent.anEdge, e);\r\n\t\tSweep.sweepEvent(tess, vEvent); /* recurse */\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* vEvent coincides with e->Dst, which has already been processed.\r\n\t * Splice in the additional right-going edges.\r\n\t */\r\n\tassert(false /*TOLERANCE_NONZERO*/);\r\n\tregUp = Sweep.topRightRegion(regUp);\r\n\treg = Sweep.regionBelow(regUp);\r\n\teTopRight = reg.eUp.Sym;\r\n\teTopLeft = eLast = eTopRight.Onext;\r\n\tif (reg.fixUpperEdge) {\r\n\t\t/* Here e->Dst has only a single fixable edge going right.\r\n\t\t * We can delete it since now we have some real right-going edges.\r\n\t\t */\r\n\t\tassert(eTopLeft !== eTopRight); /* there are some left edges too */\r\n\t\tSweep.deleteRegion(tess, reg);\r\n\t\ttess.mesh.delete(eTopRight);\r\n\t\teTopRight = eTopLeft.Oprev;\r\n\t}\r\n\ttess.mesh.splice(vEvent.anEdge, eTopRight);\r\n\tif (!Geom.edgeGoesLeft(eTopLeft)) {\r\n\t\t/* e->Dst had no left-going edges -- indicate this to AddRightEdges() */\r\n\t\teTopLeft = null;\r\n\t}\r\n\tSweep.addRightEdges(tess, regUp, eTopRight.Onext, eLast, eTopLeft, true);\r\n};\r\n\r\n//static void ConnectLeftVertex( TESStesselator *tess, TESSvertex *vEvent )\r\nSweep.connectLeftVertex = function(tess, vEvent) {\r\n\t/*\r\n\t * Purpose: connect a \"left\" vertex (one where both edges go right)\r\n\t * to the processed portion of the mesh.  Let R be the active region\r\n\t * containing vEvent, and let U and L be the upper and lower edge\r\n\t * chains of R.  There are two possibilities:\r\n\t *\r\n\t * - the normal case: split R into two regions, by connecting vEvent to\r\n\t *   the rightmost vertex of U or L lying to the left of the sweep line\r\n\t *\r\n\t * - the degenerate case: if vEvent is close enough to U or L, we\r\n\t *   merge vEvent into that edge chain.  The subcases are:\r\n\t *\t- merging with the rightmost vertex of U or L\r\n\t *\t- merging with the active edge of U or L\r\n\t *\t- merging with an already-processed portion of U or L\r\n\t */\r\n\tvar regUp, regLo, reg;\r\n\tvar eUp, eLo, eNew;\r\n\tvar tmp = new ActiveRegion();\r\n\r\n\t/* assert( vEvent->anEdge->Onext->Onext == vEvent->anEdge ); */\r\n\r\n\t/* Get a pointer to the active region containing vEvent */\r\n\ttmp.eUp = vEvent.anEdge.Sym; /* tessDictListSearch */\r\n\t/* __GL_DICTLISTKEY */ regUp = tess.dict.search(tmp).key;\r\n\tregLo = Sweep.regionBelow(regUp);\r\n\tif (!regLo) {\r\n\t\t// This may happen if the input polygon is coplanar.\r\n\t\treturn;\r\n\t}\r\n\teUp = regUp.eUp;\r\n\teLo = regLo.eUp;\r\n\r\n\t/* Try merging with U or L first */\r\n\tif (Geom.edgeSign(eUp.Dst, vEvent, eUp.Org) === 0.0) {\r\n\t\tSweep.connectLeftDegenerate(tess, regUp, vEvent);\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Connect vEvent to rightmost processed vertex of either chain.\r\n\t * e->Dst is the vertex that we will connect to vEvent.\r\n\t */\r\n\treg = Geom.vertLeq(eLo.Dst, eUp.Dst) ? regUp : regLo;\r\n\r\n\tif (regUp.inside || reg.fixUpperEdge) {\r\n\t\tif (reg === regUp) {\r\n\t\t\teNew = tess.mesh.connect(vEvent.anEdge.Sym, eUp.Lnext);\r\n\t\t} else {\r\n\t\t\tvar tempHalfEdge = tess.mesh.connect(eLo.Dnext, vEvent.anEdge);\r\n\t\t\teNew = tempHalfEdge.Sym;\r\n\t\t}\r\n\t\tif (reg.fixUpperEdge) {\r\n\t\t\tSweep.fixUpperEdge(tess, reg, eNew);\r\n\t\t} else {\r\n\t\t\tSweep.computeWinding(tess, Sweep.addRegionBelow(tess, regUp, eNew));\r\n\t\t}\r\n\t\tSweep.sweepEvent(tess, vEvent);\r\n\t} else {\r\n\t\t/* The new vertex is in a region which does not belong to the polygon.\r\n\t\t * We don''t need to connect this vertex to the rest of the mesh.\r\n\t\t */\r\n\t\tSweep.addRightEdges(\r\n\t\t\ttess,\r\n\t\t\tregUp,\r\n\t\t\tvEvent.anEdge,\r\n\t\t\tvEvent.anEdge,\r\n\t\t\tnull,\r\n\t\t\ttrue,\r\n\t\t);\r\n\t}\r\n};\r\n\r\n//static void SweepEvent( TESStesselator *tess, TESSvertex *vEvent )\r\nSweep.sweepEvent = function(tess, vEvent) {\r\n\t/*\r\n\t * Does everything necessary when the sweep line crosses a vertex.\r\n\t * Updates the mesh and the edge dictionary.\r\n\t */\r\n\r\n\ttess.event = vEvent; /* for access in EdgeLeq() */\r\n\tSweep.debugEvent(tess);\r\n\r\n\t/* Check if this vertex is the right endpoint of an edge that is\r\n\t * already in the dictionary.  In this case we don't need to waste\r\n\t * time searching for the location to insert new edges.\r\n\t */\r\n\tvar e = vEvent.anEdge;\r\n\twhile (e.activeRegion === null) {\r\n\t\te = e.Onext;\r\n\t\tif (e === vEvent.anEdge) {\r\n\t\t\t/* All edges go right -- not incident to any processed edges */\r\n\t\t\tSweep.connectLeftVertex(tess, vEvent);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t/* Processing consists of two phases: first we \"finish\" all the\r\n\t * active regions where both the upper and lower edges terminate\r\n\t * at vEvent (ie. vEvent is closing off these regions).\r\n\t * We mark these faces \"inside\" or \"outside\" the polygon according\r\n\t * to their winding number, and delete the edges from the dictionary.\r\n\t * This takes care of all the left-going edges from vEvent.\r\n\t */\r\n\tvar regUp = Sweep.topLeftRegion(tess, e.activeRegion);\r\n\tassert(regUp !== null);\r\n\t//\tif (regUp == NULL) longjmp(tess->env,1);\r\n\tvar reg = Sweep.regionBelow(regUp);\r\n\tvar eTopLeft = reg.eUp;\r\n\tvar eBottomLeft = Sweep.finishLeftRegions(tess, reg, null);\r\n\r\n\t/* Next we process all the right-going edges from vEvent.  This\r\n\t * involves adding the edges to the dictionary, and creating the\r\n\t * associated \"active regions\" which record information about the\r\n\t * regions between adjacent dictionary edges.\r\n\t */\r\n\tif (eBottomLeft.Onext === eTopLeft) {\r\n\t\t/* No right-going edges -- add a temporary \"fixable\" edge */\r\n\t\tSweep.connectRightVertex(tess, regUp, eBottomLeft);\r\n\t} else {\r\n\t\tSweep.addRightEdges(\r\n\t\t\ttess,\r\n\t\t\tregUp,\r\n\t\t\teBottomLeft.Onext,\r\n\t\t\teTopLeft,\r\n\t\t\teTopLeft,\r\n\t\t\ttrue,\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/* Make the sentinel coordinates big enough that they will never be\r\n * merged with real input features.\r\n */\r\n\r\n//static void AddSentinel( TESStesselator *tess, TESSreal smin, TESSreal smax, TESSreal t )\r\nSweep.addSentinel = function(tess, smin, smax, t) {\r\n\t/*\r\n\t * We add two sentinel edges above and below all other edges,\r\n\t * to avoid special cases at the top and bottom.\r\n\t */\r\n\tvar reg = new ActiveRegion();\r\n\tvar e = tess.mesh.makeEdge();\r\n\t//\tif (e == NULL) longjmp(tess->env,1);\r\n\r\n\te.Org.s = smax;\r\n\te.Org.t = t;\r\n\te.Dst.s = smin;\r\n\te.Dst.t = t;\r\n\ttess.event = e.Dst; /* initialize it */\r\n\r\n\treg.eUp = e;\r\n\treg.windingNumber = 0;\r\n\treg.inside = false;\r\n\treg.fixUpperEdge = false;\r\n\treg.sentinel = true;\r\n\treg.dirty = false;\r\n\treg.nodeUp = tess.dict.insert(reg);\r\n\t//\tif (reg->nodeUp == NULL) longjmp(tess->env,1);\r\n};\r\n\r\n//static void InitEdgeDict( TESStesselator *tess )\r\nSweep.initEdgeDict = function(tess) {\r\n\t/*\r\n\t * We maintain an ordering of edge intersections with the sweep line.\r\n\t * This order is maintained in a dynamic dictionary.\r\n\t */\r\n\ttess.dict = new Dict(tess, Sweep.edgeLeq);\r\n\t//\tif (tess->dict == NULL) longjmp(tess->env,1);\r\n\r\n\tvar w = tess.bmax[0] - tess.bmin[0];\r\n\tvar h = tess.bmax[1] - tess.bmin[1];\r\n\r\n\tvar smin = tess.bmin[0] - w;\r\n\tvar smax = tess.bmax[0] + w;\r\n\tvar tmin = tess.bmin[1] - h;\r\n\tvar tmax = tess.bmax[1] + h;\r\n\r\n\tSweep.addSentinel(tess, smin, smax, tmin);\r\n\tSweep.addSentinel(tess, smin, smax, tmax);\r\n};\r\n\r\nSweep.doneEdgeDict = function(tess) {\r\n\tvar reg;\r\n\tvar fixedEdges = 0;\r\n\r\n\twhile ((reg = tess.dict.min().key) !== null) {\r\n\t\t/*\r\n\t\t * At the end of all processing, the dictionary should contain\r\n\t\t * only the two sentinel edges, plus at most one \"fixable\" edge\r\n\t\t * created by ConnectRightVertex().\r\n\t\t */\r\n\t\tif (!reg.sentinel) {\r\n\t\t\tassert(reg.fixUpperEdge);\r\n\t\t\tassert(++fixedEdges === 1);\r\n\t\t}\r\n\t\tassert(reg.windingNumber === 0);\r\n\t\tSweep.deleteRegion(tess, reg);\r\n\t\t/*    tessMeshDelete( reg->eUp );*/\r\n\t}\r\n\t//\tdictDeleteDict( &tess->alloc, tess->dict );\r\n};\r\n\r\nSweep.removeDegenerateEdges = function(tess) {\r\n\t/*\r\n\t * Remove zero-length edges, and contours with fewer than 3 vertices.\r\n\t */\r\n\tvar e, eNext, eLnext;\r\n\tvar eHead = tess.mesh.eHead;\r\n\r\n\t/*LINTED*/\r\n\tfor (e = eHead.next; e !== eHead; e = eNext) {\r\n\t\teNext = e.next;\r\n\t\teLnext = e.Lnext;\r\n\r\n\t\tif (Geom.vertEq(e.Org, e.Dst) && e.Lnext.Lnext !== e) {\r\n\t\t\t/* Zero-length edge, contour has at least 3 edges */\r\n\t\t\tSweep.spliceMergeVertices(tess, eLnext, e); /* deletes e->Org */\r\n\t\t\ttess.mesh.delete(e); /* e is a self-loop */\r\n\t\t\te = eLnext;\r\n\t\t\teLnext = e.Lnext;\r\n\t\t}\r\n\t\tif (eLnext.Lnext === e) {\r\n\t\t\t/* Degenerate contour (one or two edges) */\r\n\t\t\tif (eLnext !== e) {\r\n\t\t\t\tif (eLnext === eNext || eLnext === eNext.Sym) {\r\n\t\t\t\t\teNext = eNext.next;\r\n\t\t\t\t}\r\n\t\t\t\ttess.mesh.delete(eLnext);\r\n\t\t\t}\r\n\t\t\tif (e === eNext || e === eNext.Sym) {\r\n\t\t\t\teNext = eNext.next;\r\n\t\t\t}\r\n\t\t\ttess.mesh.delete(e);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSweep.initPriorityQ = function(tess) {\r\n\t/*\r\n\t * Insert all vertices into the priority queue which determines the\r\n\t * order in which vertices cross the sweep line.\r\n\t */\r\n\tvar pq;\r\n\tvar v, vHead;\r\n\tvar vertexCount = 0;\r\n\r\n\tvHead = tess.mesh.vHead;\r\n\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\tvertexCount++;\r\n\t}\r\n\t/* Make sure there is enough space for sentinels. */\r\n\tvertexCount += 8; //MAX( 8, tess->alloc.extraVertices );\r\n\r\n\tpq = tess.pq = new PriorityQ(vertexCount, Geom.vertLeq);\r\n\t//\tif (pq == NULL) return 0;\r\n\r\n\tvHead = tess.mesh.vHead;\r\n\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\tv.pqHandle = pq.insert(v);\r\n\t\t//\t\tif (v.pqHandle == INV_HANDLE)\r\n\t\t//\t\t\tbreak;\r\n\t}\r\n\r\n\tif (v !== vHead) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpq.init();\r\n\r\n\treturn true;\r\n};\r\n\r\nSweep.donePriorityQ = function(tess) {\r\n\ttess.pq = null;\r\n};\r\n\r\nSweep.removeDegenerateFaces = function(tess, mesh) {\r\n\t/*\r\n\t * Delete any degenerate faces with only two edges.  WalkDirtyRegions()\r\n\t * will catch almost all of these, but it won't catch degenerate faces\r\n\t * produced by splice operations on already-processed edges.\r\n\t * The two places this can happen are in FinishLeftRegions(), when\r\n\t * we splice in a \"temporary\" edge produced by ConnectRightVertex(),\r\n\t * and in CheckForLeftSplice(), where we splice already-processed\r\n\t * edges to ensure that our dictionary invariants are not violated\r\n\t * by numerical errors.\r\n\t *\r\n\t * In both these cases it is *very* dangerous to delete the offending\r\n\t * edge at the time, since one of the routines further up the stack\r\n\t * will sometimes be keeping a pointer to that edge.\r\n\t */\r\n\tvar f, fNext;\r\n\tvar e;\r\n\r\n\t/*LINTED*/\r\n\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = fNext) {\r\n\t\tfNext = f.next;\r\n\t\te = f.anEdge;\r\n\t\tassert(e.Lnext !== e);\r\n\r\n\t\tif (e.Lnext.Lnext === e) {\r\n\t\t\t/* A face with only two edges */\r\n\t\t\tSweep.addWinding(e.Onext, e);\r\n\t\t\ttess.mesh.delete(e);\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nSweep.computeInterior = function(tess) {\r\n\t/*\r\n\t * tessComputeInterior( tess ) computes the planar arrangement specified\r\n\t * by the given contours, and further subdivides this arrangement\r\n\t * into regions.  Each region is marked \"inside\" if it belongs\r\n\t * to the polygon, according to the rule given by tess->windingRule.\r\n\t * Each interior region is guaranteed be monotone.\r\n\t */\r\n\tvar v, vNext;\r\n\r\n\t/* Each vertex defines an event for our sweep line.  Start by inserting\r\n\t * all the vertices in a priority queue.  Events are processed in\r\n\t * lexicographic order, ie.\r\n\t *\r\n\t *\te1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)\r\n\t */\r\n\tSweep.removeDegenerateEdges(tess);\r\n\tif (!Sweep.initPriorityQ(tess)) return false; /* if error */\r\n\tSweep.initEdgeDict(tess);\r\n\r\n\twhile ((v = tess.pq.extractMin()) !== null) {\r\n\t\tfor (;;) {\r\n\t\t\tvNext = tess.pq.min();\r\n\t\t\tif (vNext === null || !Geom.vertEq(vNext, v)) break;\r\n\r\n\t\t\t/* Merge together all vertices at exactly the same location.\r\n\t\t\t * This is more efficient than processing them one at a time,\r\n\t\t\t * simplifies the code (see ConnectLeftDegenerate), and is also\r\n\t\t\t * important for correct handling of certain degenerate cases.\r\n\t\t\t * For example, suppose there are two identical edges A and B\r\n\t\t\t * that belong to different contours (so without this code they would\r\n\t\t\t * be processed by separate sweep events).  Suppose another edge C\r\n\t\t\t * crosses A and B from above.  When A is processed, we split it\r\n\t\t\t * at its intersection point with C.  However this also splits C,\r\n\t\t\t * so when we insert B we may compute a slightly different\r\n\t\t\t * intersection point.  This might leave two edges with a small\r\n\t\t\t * gap between them.  This kind of error is especially obvious\r\n\t\t\t * when using boundary extraction (TESS_BOUNDARY_ONLY).\r\n\t\t\t */\r\n\t\t\tvNext = tess.pq.extractMin();\r\n\t\t\tSweep.spliceMergeVertices(tess, v.anEdge, vNext.anEdge);\r\n\t\t}\r\n\t\tSweep.sweepEvent(tess, v);\r\n\t}\r\n\r\n\t/* Set tess->event for debugging purposes */\r\n\ttess.event = tess.dict.min().key.eUp.Org;\r\n\tSweep.debugEvent(tess);\r\n\tSweep.doneEdgeDict(tess);\r\n\tSweep.donePriorityQ(tess);\r\n\r\n\tif (!Sweep.removeDegenerateFaces(tess, tess.mesh)) return false;\r\n\ttess.mesh.check();\r\n\r\n\treturn true;\r\n};\r\n\r\nfunction Tesselator() {\r\n\t/*** state needed for collecting the input data ***/\r\n\tthis.mesh = null; /* stores the input contours, and eventually\r\n\t\t\t\t\t\t\tthe tessellation itself */\r\n\r\n\t/*** state needed for projecting onto the sweep plane ***/\r\n\r\n\tthis.normal = [0.0, 0.0, 0.0]; /* user-specified normal (if provided) */\r\n\tthis.sUnit = [0.0, 0.0, 0.0]; /* unit vector in s-direction (debugging) */\r\n\tthis.tUnit = [0.0, 0.0, 0.0]; /* unit vector in t-direction (debugging) */\r\n\r\n\tthis.bmin = [0.0, 0.0];\r\n\tthis.bmax = [0.0, 0.0];\r\n\r\n\t/*** state needed for the line sweep ***/\r\n\tthis.windingRule =\r\n\t\tTess2.WINDING_ODD; /* rule for determining polygon interior */\r\n\r\n\tthis.dict = null; /* edge dictionary for sweep line */\r\n\tthis.pq = null; /* priority queue of vertex events */\r\n\tthis.event = null; /* current sweep event being processed */\r\n\r\n\tthis.vertexIndexCounter = 0;\r\n\r\n\tthis.vertices = [];\r\n\tthis.vertexIndices = [];\r\n\tthis.vertexCount = 0;\r\n\tthis.elements = [];\r\n\tthis.elementCount = 0;\r\n}\r\n\r\nTesselator.prototype = {\r\n\tdot_: function(u, v) {\r\n\t\treturn u[0] * v[0] + u[1] * v[1] + u[2] * v[2];\r\n\t},\r\n\r\n\tnormalize_: function(v) {\r\n\t\tvar len = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\r\n\t\tassert(len > 0.0);\r\n\t\tlen = Math.sqrt(len);\r\n\t\tv[0] /= len;\r\n\t\tv[1] /= len;\r\n\t\tv[2] /= len;\r\n\t},\r\n\r\n\tlongAxis_: function(v) {\r\n\t\tvar i = 0;\r\n\t\tif (Math.abs(v[1]) > Math.abs(v[0])) {\r\n\t\t\ti = 1;\r\n\t\t}\r\n\t\tif (Math.abs(v[2]) > Math.abs(v[i])) {\r\n\t\t\ti = 2;\r\n\t\t}\r\n\t\treturn i;\r\n\t},\r\n\r\n\tcomputeNormal_: function(norm) {\r\n\t\tvar v, v1, v2;\r\n\t\tvar c, tLen2, maxLen2;\r\n\t\tvar maxVal = [0, 0, 0],\r\n\t\t\tminVal = [0, 0, 0],\r\n\t\t\td1 = [0, 0, 0],\r\n\t\t\td2 = [0, 0, 0],\r\n\t\t\ttNorm = [0, 0, 0];\r\n\t\tvar maxVert = [null, null, null],\r\n\t\t\tminVert = [null, null, null];\r\n\t\tvar vHead = this.mesh.vHead;\r\n\t\tvar i;\r\n\r\n\t\tv = vHead.next;\r\n\t\tfor (i = 0; i < 3; ++i) {\r\n\t\t\tc = v.coords[i];\r\n\t\t\tminVal[i] = c;\r\n\t\t\tminVert[i] = v;\r\n\t\t\tmaxVal[i] = c;\r\n\t\t\tmaxVert[i] = v;\r\n\t\t}\r\n\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\tfor (i = 0; i < 3; ++i) {\r\n\t\t\t\tc = v.coords[i];\r\n\t\t\t\tif (c < minVal[i]) {\r\n\t\t\t\t\tminVal[i] = c;\r\n\t\t\t\t\tminVert[i] = v;\r\n\t\t\t\t}\r\n\t\t\t\tif (c > maxVal[i]) {\r\n\t\t\t\t\tmaxVal[i] = c;\r\n\t\t\t\t\tmaxVert[i] = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Find two vertices separated by at least 1/sqrt(3) of the maximum\r\n\t\t * distance between any two vertices\r\n\t\t */\r\n\t\ti = 0;\r\n\t\tif (maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {\r\n\t\t\ti = 1;\r\n\t\t}\r\n\t\tif (maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {\r\n\t\t\ti = 2;\r\n\t\t}\r\n\t\tif (minVal[i] >= maxVal[i]) {\r\n\t\t\t/* All vertices are the same -- normal doesn't matter */\r\n\t\t\tnorm[0] = 0;\r\n\t\t\tnorm[1] = 0;\r\n\t\t\tnorm[2] = 1;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t/* Look for a third vertex which forms the triangle with maximum area\r\n\t\t * (Length of normal == twice the triangle area)\r\n\t\t */\r\n\t\tmaxLen2 = 0;\r\n\t\tv1 = minVert[i];\r\n\t\tv2 = maxVert[i];\r\n\t\td1[0] = v1.coords[0] - v2.coords[0];\r\n\t\td1[1] = v1.coords[1] - v2.coords[1];\r\n\t\td1[2] = v1.coords[2] - v2.coords[2];\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\td2[0] = v.coords[0] - v2.coords[0];\r\n\t\t\td2[1] = v.coords[1] - v2.coords[1];\r\n\t\t\td2[2] = v.coords[2] - v2.coords[2];\r\n\t\t\ttNorm[0] = d1[1] * d2[2] - d1[2] * d2[1];\r\n\t\t\ttNorm[1] = d1[2] * d2[0] - d1[0] * d2[2];\r\n\t\t\ttNorm[2] = d1[0] * d2[1] - d1[1] * d2[0];\r\n\t\t\ttLen2 =\r\n\t\t\t\ttNorm[0] * tNorm[0] + tNorm[1] * tNorm[1] + tNorm[2] * tNorm[2];\r\n\t\t\tif (tLen2 > maxLen2) {\r\n\t\t\t\tmaxLen2 = tLen2;\r\n\t\t\t\tnorm[0] = tNorm[0];\r\n\t\t\t\tnorm[1] = tNorm[1];\r\n\t\t\t\tnorm[2] = tNorm[2];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (maxLen2 <= 0) {\r\n\t\t\t/* All points lie on a single line -- any decent normal will do */\r\n\t\t\tnorm[0] = norm[1] = norm[2] = 0;\r\n\t\t\tnorm[this.longAxis_(d1)] = 1;\r\n\t\t}\r\n\t},\r\n\r\n\tcheckOrientation_: function() {\r\n\t\tvar area;\r\n\t\tvar f,\r\n\t\t\tfHead = this.mesh.fHead;\r\n\t\tvar v,\r\n\t\t\tvHead = this.mesh.vHead;\r\n\t\tvar e;\r\n\r\n\t\t/* When we compute the normal automatically, we choose the orientation\r\n\t\t * so that the the sum of the signed areas of all contours is non-negative.\r\n\t\t */\r\n\t\tarea = 0;\r\n\t\tfor (f = fHead.next; f !== fHead; f = f.next) {\r\n\t\t\te = f.anEdge;\r\n\t\t\tif (e.winding <= 0) continue;\r\n\t\t\tdo {\r\n\t\t\t\tarea += (e.Org.s - e.Dst.s) * (e.Org.t + e.Dst.t);\r\n\t\t\t\te = e.Lnext;\r\n\t\t\t} while (e !== f.anEdge);\r\n\t\t}\r\n\t\tif (area < 0) {\r\n\t\t\t/* Reverse the orientation by flipping all the t-coordinates */\r\n\t\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\t\tv.t = -v.t;\r\n\t\t\t}\r\n\t\t\tthis.tUnit[0] = -this.tUnit[0];\r\n\t\t\tthis.tUnit[1] = -this.tUnit[1];\r\n\t\t\tthis.tUnit[2] = -this.tUnit[2];\r\n\t\t}\r\n\t},\r\n\r\n\t/*\t#ifdef FOR_TRITE_TEST_PROGRAM\r\n\t\t#include <stdlib.h>\r\n\t\textern int RandomSweep;\r\n\t\t#define S_UNIT_X\t(RandomSweep ? (2*drand48()-1) : 1.0)\r\n\t\t#define S_UNIT_Y\t(RandomSweep ? (2*drand48()-1) : 0.0)\r\n\t\t#else\r\n\t\t#if defined(SLANTED_SWEEP) */\r\n\t/* The \"feature merging\" is not intended to be complete.  There are\r\n\t * special cases where edges are nearly parallel to the sweep line\r\n\t * which are not implemented.  The algorithm should still behave\r\n\t * robustly (ie. produce a reasonable tesselation) in the presence\r\n\t * of such edges, however it may miss features which could have been\r\n\t * merged.  We could minimize this effect by choosing the sweep line\r\n\t * direction to be something unusual (ie. not parallel to one of the\r\n\t * coordinate axes).\r\n\t */\r\n\t/*\t#define S_UNIT_X\t(TESSreal)0.50941539564955385\t// Pre-normalized\r\n\t\t#define S_UNIT_Y\t(TESSreal)0.86052074622010633\r\n\t\t#else\r\n\t\t#define S_UNIT_X\t(TESSreal)1.0\r\n\t\t#define S_UNIT_Y\t(TESSreal)0.0\r\n\t\t#endif\r\n\t\t#endif*/\r\n\r\n\t/* Determine the polygon normal and project vertices onto the plane\r\n\t * of the polygon.\r\n\t */\r\n\tprojectPolygon_: function() {\r\n\t\tvar v,\r\n\t\t\tvHead = this.mesh.vHead;\r\n\t\tvar norm = [0, 0, 0];\r\n\t\tvar sUnit, tUnit;\r\n\t\tvar i,\r\n\t\t\tfirst,\r\n\t\t\tcomputedNormal = false;\r\n\r\n\t\tnorm[0] = this.normal[0];\r\n\t\tnorm[1] = this.normal[1];\r\n\t\tnorm[2] = this.normal[2];\r\n\t\tif (norm[0] === 0.0 && norm[1] === 0.0 && norm[2] === 0.0) {\r\n\t\t\tthis.computeNormal_(norm);\r\n\t\t\tcomputedNormal = true;\r\n\t\t}\r\n\t\tsUnit = this.sUnit;\r\n\t\ttUnit = this.tUnit;\r\n\t\ti = this.longAxis_(norm);\r\n\r\n\t\t/*\t#if defined(FOR_TRITE_TEST_PROGRAM) || defined(TRUE_PROJECT)\r\n\t\t\t// Choose the initial sUnit vector to be approximately perpendicular\r\n\t\t\t// to the normal.\r\n\t\t\t\r\n\t\t\tNormalize( norm );\r\n\r\n\t\t\tsUnit[i] = 0;\r\n\t\t\tsUnit[(i+1)%3] = S_UNIT_X;\r\n\t\t\tsUnit[(i+2)%3] = S_UNIT_Y;\r\n\r\n\t\t\t// Now make it exactly perpendicular \r\n\t\t\tw = Dot( sUnit, norm );\r\n\t\t\tsUnit[0] -= w * norm[0];\r\n\t\t\tsUnit[1] -= w * norm[1];\r\n\t\t\tsUnit[2] -= w * norm[2];\r\n\t\t\tNormalize( sUnit );\r\n\r\n\t\t\t// Choose tUnit so that (sUnit,tUnit,norm) form a right-handed frame \r\n\t\t\ttUnit[0] = norm[1]*sUnit[2] - norm[2]*sUnit[1];\r\n\t\t\ttUnit[1] = norm[2]*sUnit[0] - norm[0]*sUnit[2];\r\n\t\t\ttUnit[2] = norm[0]*sUnit[1] - norm[1]*sUnit[0];\r\n\t\t\tNormalize( tUnit );\r\n\t\t#else*/\r\n\t\t/* Project perpendicular to a coordinate axis -- better numerically */\r\n\t\tsUnit[i] = 0;\r\n\t\tsUnit[(i + 1) % 3] = 1.0;\r\n\t\tsUnit[(i + 2) % 3] = 0.0;\r\n\r\n\t\ttUnit[i] = 0;\r\n\t\ttUnit[(i + 1) % 3] = 0.0;\r\n\t\ttUnit[(i + 2) % 3] = norm[i] > 0 ? 1.0 : -1.0;\r\n\t\t//\t#endif\r\n\r\n\t\t/* Project the vertices onto the sweep plane */\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\tv.s = this.dot_(v.coords, sUnit);\r\n\t\t\tv.t = this.dot_(v.coords, tUnit);\r\n\t\t}\r\n\t\tif (computedNormal) {\r\n\t\t\tthis.checkOrientation_();\r\n\t\t}\r\n\r\n\t\t/* Compute ST bounds. */\r\n\t\tfirst = true;\r\n\t\tfor (v = vHead.next; v !== vHead; v = v.next) {\r\n\t\t\tif (first) {\r\n\t\t\t\tthis.bmin[0] = this.bmax[0] = v.s;\r\n\t\t\t\tthis.bmin[1] = this.bmax[1] = v.t;\r\n\t\t\t\tfirst = false;\r\n\t\t\t} else {\r\n\t\t\t\tif (v.s < this.bmin[0]) this.bmin[0] = v.s;\r\n\t\t\t\tif (v.s > this.bmax[0]) this.bmax[0] = v.s;\r\n\t\t\t\tif (v.t < this.bmin[1]) this.bmin[1] = v.t;\r\n\t\t\t\tif (v.t > this.bmax[1]) this.bmax[1] = v.t;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\taddWinding_: function(eDst, eSrc) {\r\n\t\teDst.winding += eSrc.winding;\r\n\t\teDst.Sym.winding += eSrc.Sym.winding;\r\n\t},\r\n\r\n\t/* tessMeshTessellateMonoRegion( face ) tessellates a monotone region\r\n\t * (what else would it do??)  The region must consist of a single\r\n\t * loop of half-edges (see mesh.h) oriented CCW.  \"Monotone\" in this\r\n\t * case means that any vertical line intersects the interior of the\r\n\t * region in a single interval.\r\n\t *\r\n\t * Tessellation consists of adding interior edges (actually pairs of\r\n\t * half-edges), to split the region into non-overlapping triangles.\r\n\t *\r\n\t * The basic idea is explained in Preparata and Shamos (which I don''t\r\n\t * have handy right now), although their implementation is more\r\n\t * complicated than this one.  The are two edge chains, an upper chain\r\n\t * and a lower chain.  We process all vertices from both chains in order,\r\n\t * from right to left.\r\n\t *\r\n\t * The algorithm ensures that the following invariant holds after each\r\n\t * vertex is processed: the untessellated region consists of two\r\n\t * chains, where one chain (say the upper) is a single edge, and\r\n\t * the other chain is concave.  The left vertex of the single edge\r\n\t * is always to the left of all vertices in the concave chain.\r\n\t *\r\n\t * Each step consists of adding the rightmost unprocessed vertex to one\r\n\t * of the two chains, and forming a fan of triangles from the rightmost\r\n\t * of two chain endpoints.  Determining whether we can add each triangle\r\n\t * to the fan is a simple orientation test.  By making the fan as large\r\n\t * as possible, we restore the invariant (check it yourself).\r\n\t */\r\n\t//\tint tessMeshTessellateMonoRegion( TESSmesh *mesh, TESSface *face )\r\n\ttessellateMonoRegion_: function(mesh, face) {\r\n\t\tvar up, lo;\r\n\r\n\t\t/* All edges are oriented CCW around the boundary of the region.\r\n\t\t * First, find the half-edge whose origin vertex is rightmost.\r\n\t\t * Since the sweep goes from left to right, face->anEdge should\r\n\t\t * be close to the edge we want.\r\n\t\t */\r\n\t\tup = face.anEdge;\r\n\t\tassert(up.Lnext !== up && up.Lnext.Lnext !== up);\r\n\r\n\t\tfor (; Geom.vertLeq(up.Dst, up.Org); up = up.Lprev);\r\n\t\tfor (; Geom.vertLeq(up.Org, up.Dst); up = up.Lnext);\r\n\t\tlo = up.Lprev;\r\n\r\n\t\twhile (up.Lnext !== lo) {\r\n\t\t\tif (Geom.vertLeq(up.Dst, lo.Org)) {\r\n\t\t\t\t/* up->Dst is on the left.  It is safe to form triangles from lo->Org.\r\n\t\t\t\t * The EdgeGoesLeft test guarantees progress even when some triangles\r\n\t\t\t\t * are CW, given that the upper and lower chains are truly monotone.\r\n\t\t\t\t */\r\n\t\t\t\twhile (\r\n\t\t\t\t\tlo.Lnext !== up &&\r\n\t\t\t\t\t(Geom.edgeGoesLeft(lo.Lnext) ||\r\n\t\t\t\t\t\tGeom.edgeSign(lo.Org, lo.Dst, lo.Lnext.Dst) <= 0.0)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar tempHalfEdge = mesh.connect(lo.Lnext, lo);\r\n\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\r\n\t\t\t\t\tlo = tempHalfEdge.Sym;\r\n\t\t\t\t}\r\n\t\t\t\tlo = lo.Lprev;\r\n\t\t\t} else {\r\n\t\t\t\t/* lo->Org is on the left.  We can make CCW triangles from up->Dst. */\r\n\t\t\t\twhile (\r\n\t\t\t\t\tlo.Lnext !== up &&\r\n\t\t\t\t\t(Geom.edgeGoesRight(up.Lprev) ||\r\n\t\t\t\t\t\tGeom.edgeSign(up.Dst, up.Org, up.Lprev.Org) >= 0.0)\r\n\t\t\t\t) {\r\n\t\t\t\t\tvar tempHalfEdge = mesh.connect(up, up.Lprev);\r\n\t\t\t\t\t//if (tempHalfEdge == NULL) return 0;\r\n\t\t\t\t\tup = tempHalfEdge.Sym;\r\n\t\t\t\t}\r\n\t\t\t\tup = up.Lnext;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Now lo->Org == up->Dst == the leftmost vertex.  The remaining region\r\n\t\t * can be tessellated in a fan from this leftmost vertex.\r\n\t\t */\r\n\t\tassert(lo.Lnext !== up);\r\n\t\twhile (lo.Lnext.Lnext !== up) {\r\n\t\t\tvar tempHalfEdge = mesh.connect(lo.Lnext, lo);\r\n\t\t\t//if (tempHalfEdge == NULL) return 0;\r\n\t\t\tlo = tempHalfEdge.Sym;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\t/* tessMeshTessellateInterior( mesh ) tessellates each region of\r\n\t * the mesh which is marked \"inside\" the polygon.  Each such region\r\n\t * must be monotone.\r\n\t */\r\n\t//int tessMeshTessellateInterior( TESSmesh *mesh )\r\n\ttessellateInterior_: function(mesh) {\r\n\t\tvar f, next;\r\n\r\n\t\t/*LINTED*/\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = next) {\r\n\t\t\t/* Make sure we don''t try to tessellate the new triangles. */\r\n\t\t\tnext = f.next;\r\n\t\t\tif (f.inside) {\r\n\t\t\t\tif (!this.tessellateMonoRegion_(mesh, f)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\t/* tessMeshDiscardExterior( mesh ) zaps (ie. sets to NULL) all faces\r\n\t * which are not marked \"inside\" the polygon.  Since further mesh operations\r\n\t * on NULL faces are not allowed, the main purpose is to clean up the\r\n\t * mesh so that exterior loops are not represented in the data structure.\r\n\t */\r\n\t//void tessMeshDiscardExterior( TESSmesh *mesh )\r\n\tdiscardExterior_: function(mesh) {\r\n\t\tvar f, next;\r\n\r\n\t\t/*LINTED*/\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = next) {\r\n\t\t\t/* Since f will be destroyed, save its next pointer. */\r\n\t\t\tnext = f.next;\r\n\t\t\tif (!f.inside) {\r\n\t\t\t\tmesh.zapFace(f);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/* tessMeshSetWindingNumber( mesh, value, keepOnlyBoundary ) resets the\r\n\t * winding numbers on all edges so that regions marked \"inside\" the\r\n\t * polygon have a winding number of \"value\", and regions outside\r\n\t * have a winding number of 0.\r\n\t *\r\n\t * If keepOnlyBoundary is TRUE, it also deletes all edges which do not\r\n\t * separate an interior region from an exterior one.\r\n\t */\r\n\t//\tint tessMeshSetWindingNumber( TESSmesh *mesh, int value, int keepOnlyBoundary )\r\n\tsetWindingNumber_: function(mesh, value, keepOnlyBoundary) {\r\n\t\tvar e, eNext;\r\n\r\n\t\tfor (e = mesh.eHead.next; e !== mesh.eHead; e = eNext) {\r\n\t\t\teNext = e.next;\r\n\t\t\tif (e.Rface.inside !== e.Lface.inside) {\r\n\t\t\t\t/* This is a boundary edge (one side is interior, one is exterior). */\r\n\t\t\t\te.winding = e.Lface.inside ? value : -value;\r\n\t\t\t} else {\r\n\t\t\t\t/* Both regions are interior, or both are exterior. */\r\n\t\t\t\tif (!keepOnlyBoundary) {\r\n\t\t\t\t\te.winding = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmesh.delete(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetNeighbourFace_: function(edge) {\r\n\t\tif (!edge.Rface) return -1;\r\n\t\tif (!edge.Rface.inside) return -1;\r\n\t\treturn edge.Rface.n;\r\n\t},\r\n\r\n\toutputPolymesh_: function(mesh, elementType, polySize, vertexSize) {\r\n\t\tvar v;\r\n\t\tvar f;\r\n\t\tvar edge;\r\n\t\tvar maxFaceCount = 0;\r\n\t\tvar maxVertexCount = 0;\r\n\t\tvar faceVerts, i;\r\n\t\tvar elements = 0;\r\n\t\tvar vert;\r\n\r\n\t\t// Assume that the input data is triangles now.\r\n\t\t// Try to merge as many polygons as possible\r\n\t\tif (polySize > 3) {\r\n\t\t\tmesh.mergeConvexFaces(polySize);\r\n\t\t}\r\n\r\n\t\t// Mark unused\r\n\t\tfor (v = mesh.vHead.next; v !== mesh.vHead; v = v.next) v.n = -1;\r\n\r\n\t\t// Create unique IDs for all vertices and faces.\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = f.next) {\r\n\t\t\tf.n = -1;\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\tedge = f.anEdge;\r\n\t\t\tfaceVerts = 0;\r\n\t\t\tdo {\r\n\t\t\t\tv = edge.Org;\r\n\t\t\t\tif (v.n === -1) {\r\n\t\t\t\t\tv.n = maxVertexCount;\r\n\t\t\t\t\tmaxVertexCount++;\r\n\t\t\t\t}\r\n\t\t\t\tfaceVerts++;\r\n\t\t\t\tedge = edge.Lnext;\r\n\t\t\t} while (edge !== f.anEdge);\r\n\r\n\t\t\tassert(faceVerts <= polySize);\r\n\r\n\t\t\tf.n = maxFaceCount;\r\n\t\t\t++maxFaceCount;\r\n\t\t}\r\n\r\n\t\tthis.elementCount = maxFaceCount;\r\n\t\tif (elementType === Tess2.CONNECTED_POLYGONS) maxFaceCount *= 2;\r\n\t\t/*\t\ttess.elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * maxFaceCount * polySize );\r\n\t\t\tif (!tess->elements)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.elements = [];\r\n\t\tthis.elements.length = maxFaceCount * polySize;\r\n\r\n\t\tthis.vertexCount = maxVertexCount;\r\n\t\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t sizeof(TESSreal) * tess->vertexCount * vertexSize );\r\n\t\t\tif (!tess->vertices)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.vertices = [];\r\n\t\tthis.vertices.length = maxVertexCount * vertexSize;\r\n\r\n\t\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizeof(TESSindex) * tess->vertexCount );\r\n\t\t\tif (!tess->vertexIndices)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.vertexIndices = [];\r\n\t\tthis.vertexIndices.length = maxVertexCount;\r\n\r\n\t\t// Output vertices.\r\n\t\tfor (v = mesh.vHead.next; v !== mesh.vHead; v = v.next) {\r\n\t\t\tif (v.n !== -1) {\r\n\t\t\t\t// Store coordinate\r\n\t\t\t\tvar idx = v.n * vertexSize;\r\n\t\t\t\tthis.vertices[idx + 0] = v.coords[0];\r\n\t\t\t\tthis.vertices[idx + 1] = v.coords[1];\r\n\t\t\t\tif (vertexSize > 2) this.vertices[idx + 2] = v.coords[2];\r\n\t\t\t\t// Store vertex index.\r\n\t\t\t\tthis.vertexIndices[v.n] = v.idx;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Output indices.\r\n\t\tvar nel = 0;\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = f.next) {\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\t// Store polygon\r\n\t\t\tedge = f.anEdge;\r\n\t\t\tfaceVerts = 0;\r\n\t\t\tdo {\r\n\t\t\t\tv = edge.Org;\r\n\t\t\t\tthis.elements[nel++] = v.n;\r\n\t\t\t\tfaceVerts++;\r\n\t\t\t\tedge = edge.Lnext;\r\n\t\t\t} while (edge !== f.anEdge);\r\n\t\t\t// Fill unused.\r\n\t\t\tfor (i = faceVerts; i < polySize; ++i) this.elements[nel++] = -1;\r\n\r\n\t\t\t// Store polygon connectivity\r\n\t\t\tif (elementType === Tess2.CONNECTED_POLYGONS) {\r\n\t\t\t\tedge = f.anEdge;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tthis.elements[nel++] = this.getNeighbourFace_(edge);\r\n\t\t\t\t\tedge = edge.Lnext;\r\n\t\t\t\t} while (edge !== f.anEdge);\r\n\t\t\t\t// Fill unused.\r\n\t\t\t\tfor (i = faceVerts; i < polySize; ++i)\r\n\t\t\t\t\tthis.elements[nel++] = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t//\tvoid OutputContours( TESStesselator *tess, TESSmesh *mesh, int vertexSize )\r\n\toutputContours_: function(mesh, vertexSize) {\r\n\t\tvar f;\r\n\t\tvar edge;\r\n\t\tvar start;\r\n\t\tvar verts;\r\n\t\tvar elements;\r\n\t\tvar vertInds;\r\n\t\tvar startVert = 0;\r\n\t\tvar vertCount = 0;\r\n\r\n\t\tthis.vertexCount = 0;\r\n\t\tthis.elementCount = 0;\r\n\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = f.next) {\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\tstart = edge = f.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tthis.vertexCount++;\r\n\t\t\t\tedge = edge.Lnext;\r\n\t\t\t} while (edge !== start);\r\n\r\n\t\t\tthis.elementCount++;\r\n\t\t}\r\n\r\n\t\t/*\t\ttess->elements = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSindex) * tess->elementCount * 2 );\r\n\t\t\tif (!tess->elements)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.elements = [];\r\n\t\tthis.elements.length = this.elementCount * 2;\r\n\r\n\t\t/*\t\ttess->vertices = (TESSreal*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  sizeof(TESSreal) * tess->vertexCount * vertexSize );\r\n\t\t\tif (!tess->vertices)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.vertices = [];\r\n\t\tthis.vertices.length = this.vertexCount * vertexSize;\r\n\r\n\t\t/*\t\ttess->vertexIndices = (TESSindex*)tess->alloc.memalloc( tess->alloc.userData,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsizeof(TESSindex) * tess->vertexCount );\r\n\t\t\tif (!tess->vertexIndices)\r\n\t\t\t{\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\tthis.vertexIndices = [];\r\n\t\tthis.vertexIndices.length = this.vertexCount;\r\n\r\n\t\tvar nv = 0;\r\n\t\tvar nvi = 0;\r\n\t\tvar nel = 0;\r\n\t\tstartVert = 0;\r\n\r\n\t\tfor (f = mesh.fHead.next; f !== mesh.fHead; f = f.next) {\r\n\t\t\tif (!f.inside) continue;\r\n\r\n\t\t\tvertCount = 0;\r\n\t\t\tstart = edge = f.anEdge;\r\n\t\t\tdo {\r\n\t\t\t\tthis.vertices[nv++] = edge.Org.coords[0];\r\n\t\t\t\tthis.vertices[nv++] = edge.Org.coords[1];\r\n\t\t\t\tif (vertexSize > 2) this.vertices[nv++] = edge.Org.coords[2];\r\n\t\t\t\tthis.vertexIndices[nvi++] = edge.Org.idx;\r\n\t\t\t\tvertCount++;\r\n\t\t\t\tedge = edge.Lnext;\r\n\t\t\t} while (edge !== start);\r\n\r\n\t\t\tthis.elements[nel++] = startVert;\r\n\t\t\tthis.elements[nel++] = vertCount;\r\n\r\n\t\t\tstartVert += vertCount;\r\n\t\t}\r\n\t},\r\n\r\n\taddContour: function(size, vertices) {\r\n\t\tvar e;\r\n\t\tvar i;\r\n\r\n\t\tif (this.mesh === null) this.mesh = new TESSmesh();\r\n\t\t/*\t \tif ( tess->mesh == NULL ) {\r\n\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\r\n\t\tif (size < 2) size = 2;\r\n\t\tif (size > 3) size = 3;\r\n\r\n\t\te = null;\r\n\r\n\t\tfor (i = 0; i < vertices.length; i += size) {\r\n\t\t\tif (e === null) {\r\n\t\t\t\t/* Make a self-loop (one vertex, one edge). */\r\n\t\t\t\te = this.mesh.makeEdge();\r\n\t\t\t\t/*\t\t\t\tif ( e == NULL ) {\r\n\t\t\t\t\t\ttess->outOfMemory = 1;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}*/\r\n\t\t\t\tthis.mesh.splice(e, e.Sym);\r\n\t\t\t} else {\r\n\t\t\t\t/* Create a new vertex and edge which immediately follow e\r\n\t\t\t\t * in the ordering around the left face.\r\n\t\t\t\t */\r\n\t\t\t\tthis.mesh.splitEdge(e);\r\n\t\t\t\te = e.Lnext;\r\n\t\t\t}\r\n\r\n\t\t\t/* The new vertex is now e->Org. */\r\n\t\t\te.Org.coords[0] = vertices[i + 0];\r\n\t\t\te.Org.coords[1] = vertices[i + 1];\r\n\t\t\tif (size > 2) e.Org.coords[2] = vertices[i + 2];\r\n\t\t\telse e.Org.coords[2] = 0.0;\r\n\t\t\t/* Store the insertion number so that the vertex can be later recognized. */\r\n\t\t\te.Org.idx = this.vertexIndexCounter++;\r\n\r\n\t\t\t/* The winding of an edge says how the winding number changes as we\r\n\t\t\t * cross from the edge''s right face to its left face.  We add the\r\n\t\t\t * vertices in such an order that a CCW contour will add +1 to\r\n\t\t\t * the winding number of the region inside the contour.\r\n\t\t\t */\r\n\t\t\te.winding = 1;\r\n\t\t\te.Sym.winding = -1;\r\n\t\t}\r\n\t},\r\n\r\n\t//\tint tessTesselate( TESStesselator *tess, int windingRule, int elementType, int polySize, int vertexSize, const TESSreal* normal )\r\n\ttesselate: function(\r\n\t\twindingRule,\r\n\t\telementType,\r\n\t\tpolySize,\r\n\t\tvertexSize,\r\n\t\tnormal,\r\n\t) {\r\n\t\tthis.vertices = [];\r\n\t\tthis.elements = [];\r\n\t\tthis.vertexIndices = [];\r\n\r\n\t\tthis.vertexIndexCounter = 0;\r\n\r\n\t\tif (normal) {\r\n\t\t\tthis.normal[0] = normal[0];\r\n\t\t\tthis.normal[1] = normal[1];\r\n\t\t\tthis.normal[2] = normal[2];\r\n\t\t}\r\n\r\n\t\tthis.windingRule = windingRule;\r\n\r\n\t\tif (vertexSize < 2) vertexSize = 2;\r\n\t\tif (vertexSize > 3) vertexSize = 3;\r\n\r\n\t\t/*\t\tif (setjmp(tess->env) != 0) { \r\n\t\t\t\t// come back here if out of memory\r\n\t\t\t\treturn 0;\r\n\t\t\t}*/\r\n\r\n\t\tif (!this.mesh) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t/* Determine the polygon normal and project vertices onto the plane\r\n\t\t * of the polygon.\r\n\t\t */\r\n\t\tthis.projectPolygon_();\r\n\r\n\t\t/* tessComputeInterior( tess ) computes the planar arrangement specified\r\n\t\t * by the given contours, and further subdivides this arrangement\r\n\t\t * into regions.  Each region is marked \"inside\" if it belongs\r\n\t\t * to the polygon, according to the rule given by tess->windingRule.\r\n\t\t * Each interior region is guaranteed be monotone.\r\n\t\t */\r\n\t\tSweep.computeInterior(this);\r\n\r\n\t\tvar mesh = this.mesh;\r\n\r\n\t\t/* If the user wants only the boundary contours, we throw away all edges\r\n\t\t * except those which separate the interior from the exterior.\r\n\t\t * Otherwise we tessellate all the regions marked \"inside\".\r\n\t\t */\r\n\t\tif (elementType === Tess2.BOUNDARY_CONTOURS) {\r\n\t\t\tthis.setWindingNumber_(mesh, 1, true);\r\n\t\t} else {\r\n\t\t\tthis.tessellateInterior_(mesh);\r\n\t\t}\r\n\t\t//\t\tif (rc == 0) longjmp(tess->env,1);  /* could've used a label */\r\n\r\n\t\tmesh.check();\r\n\r\n\t\tif (elementType === Tess2.BOUNDARY_CONTOURS) {\r\n\t\t\tthis.outputContours_(mesh, vertexSize); /* output contours */\r\n\t\t} else {\r\n\t\t\tthis.outputPolymesh_(\r\n\t\t\t\tmesh,\r\n\t\t\t\telementType,\r\n\t\t\t\tpolySize,\r\n\t\t\t\tvertexSize,\r\n\t\t\t); /* output polygons */\r\n\t\t}\r\n\r\n\t\t//\t\t\ttess.mesh = null;\r\n\r\n\t\treturn true;\r\n\t},\r\n};\r\n"],"names":[],"mappings":"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"}